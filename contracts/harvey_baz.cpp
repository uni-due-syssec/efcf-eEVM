// auto-generated by evm2cpp

#include "eEVM/evm2cpp/contracts/harvey_baz.h"

#include "eEVM/fuzz/tracecomp.hpp"

// this is generated code and we might have emitted some variables/labels that
// are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode =
  {
    0x60, /* [0'0x0] PUSH1 */
    0x80, /* constant data */
    0x60, /* [2'0x2] PUSH1 */
    0x40, /* constant data */
    0x52, /* [4'0x4] MSTORE */
    0x34, /* [5'0x5] CALLVALUE */
    0x80, /* [6'0x6] DUP1 */
    0x15, /* [7'0x7] ISZERO */
    0x61, /* [8'0x8] PUSH2 */
    0x00, 0x10, /* constant data */
    0x57, /* [11'0xb] JUMPI */
    0x60, /* [12'0xc] PUSH1 */
    0x00, /* constant data */
    0x80, /* [14'0xe] DUP1 */
    0xfd, /* [15'0xf] REVERT */
    0x5b, /* [16'0x10] JUMPDEST */
    0x50, /* [17'0x11] POP */
    0x60, /* [18'0x12] PUSH1 */
    0x04, /* constant data */
    0x36, /* [20'0x14] CALLDATASIZE */
    0x10, /* [21'0x15] LT */
    0x61, /* [22'0x16] PUSH2 */
    0x00, 0x36, /* constant data */
    0x57, /* [25'0x19] JUMPI */
    0x60, /* [26'0x1a] PUSH1 */
    0x00, /* constant data */
    0x35, /* [28'0x1c] CALLDATALOAD */
    0x60, /* [29'0x1d] PUSH1 */
    0xe0, /* constant data */
    0x1c, /* [31'0x1f] SHR */
    0x80, /* [32'0x20] DUP1 */
    0x63, /* [33'0x21] PUSH4 */
    0x43, 0xe3, 0xf8, 0x38, /* constant data */
    0x14, /* [38'0x26] EQ */
    0x61, /* [39'0x27] PUSH2 */
    0x00, 0x3b, /* constant data */
    0x57, /* [42'0x2a] JUMPI */
    0x80, /* [43'0x2b] DUP1 */
    0x63, /* [44'0x2c] PUSH4 */
    0xee, 0xe3, 0x06, 0x47, /* constant data */
    0x14, /* [49'0x31] EQ */
    0x61, /* [50'0x32] PUSH2 */
    0x00, 0x91, /* constant data */
    0x57, /* [53'0x35] JUMPI */
    0x5b, /* [54'0x36] JUMPDEST */
    0x60, /* [55'0x37] PUSH1 */
    0x00, /* constant data */
    0x80, /* [57'0x39] DUP1 */
    0xfd, /* [58'0x3a] REVERT */
    0x5b, /* [59'0x3b] JUMPDEST */
    0x61, /* [60'0x3c] PUSH2 */
    0x00, 0x7b, /* constant data */
    0x60, /* [63'0x3f] PUSH1 */
    0x04, /* constant data */
    0x80, /* [65'0x41] DUP1 */
    0x36, /* [66'0x42] CALLDATASIZE */
    0x03, /* [67'0x43] SUB */
    0x60, /* [68'0x44] PUSH1 */
    0x60, /* constant data */
    0x81, /* [70'0x46] DUP2 */
    0x10, /* [71'0x47] LT */
    0x15, /* [72'0x48] ISZERO */
    0x61, /* [73'0x49] PUSH2 */
    0x00, 0x51, /* constant data */
    0x57, /* [76'0x4c] JUMPI */
    0x60, /* [77'0x4d] PUSH1 */
    0x00, /* constant data */
    0x80, /* [79'0x4f] DUP1 */
    0xfd, /* [80'0x50] REVERT */
    0x5b, /* [81'0x51] JUMPDEST */
    0x81, /* [82'0x52] DUP2 */
    0x01, /* [83'0x53] ADD */
    0x90, /* [84'0x54] SWAP1 */
    0x80, /* [85'0x55] DUP1 */
    0x80, /* [86'0x56] DUP1 */
    0x35, /* [87'0x57] CALLDATALOAD */
    0x90, /* [88'0x58] SWAP1 */
    0x60, /* [89'0x59] PUSH1 */
    0x20, /* constant data */
    0x01, /* [91'0x5b] ADD */
    0x90, /* [92'0x5c] SWAP1 */
    0x92, /* [93'0x5d] SWAP3 */
    0x91, /* [94'0x5e] SWAP2 */
    0x90, /* [95'0x5f] SWAP1 */
    0x80, /* [96'0x60] DUP1 */
    0x35, /* [97'0x61] CALLDATALOAD */
    0x90, /* [98'0x62] SWAP1 */
    0x60, /* [99'0x63] PUSH1 */
    0x20, /* constant data */
    0x01, /* [101'0x65] ADD */
    0x90, /* [102'0x66] SWAP1 */
    0x92, /* [103'0x67] SWAP3 */
    0x91, /* [104'0x68] SWAP2 */
    0x90, /* [105'0x69] SWAP1 */
    0x80, /* [106'0x6a] DUP1 */
    0x35, /* [107'0x6b] CALLDATALOAD */
    0x90, /* [108'0x6c] SWAP1 */
    0x60, /* [109'0x6d] PUSH1 */
    0x20, /* constant data */
    0x01, /* [111'0x6f] ADD */
    0x90, /* [112'0x70] SWAP1 */
    0x92, /* [113'0x71] SWAP3 */
    0x91, /* [114'0x72] SWAP2 */
    0x90, /* [115'0x73] SWAP1 */
    0x50, /* [116'0x74] POP */
    0x50, /* [117'0x75] POP */
    0x50, /* [118'0x76] POP */
    0x61, /* [119'0x77] PUSH2 */
    0x00, 0xb1, /* constant data */
    0x56, /* [122'0x7a] JUMP */
    0x5b, /* [123'0x7b] JUMPDEST */
    0x60, /* [124'0x7c] PUSH1 */
    0x40, /* constant data */
    0x51, /* [126'0x7e] MLOAD */
    0x80, /* [127'0x7f] DUP1 */
    0x82, /* [128'0x80] DUP3 */
    0x81, /* [129'0x81] DUP2 */
    0x52, /* [130'0x82] MSTORE */
    0x60, /* [131'0x83] PUSH1 */
    0x20, /* constant data */
    0x01, /* [133'0x85] ADD */
    0x91, /* [134'0x86] SWAP2 */
    0x50, /* [135'0x87] POP */
    0x50, /* [136'0x88] POP */
    0x60, /* [137'0x89] PUSH1 */
    0x40, /* constant data */
    0x51, /* [139'0x8b] MLOAD */
    0x80, /* [140'0x8c] DUP1 */
    0x91, /* [141'0x8d] SWAP2 */
    0x03, /* [142'0x8e] SUB */
    0x90, /* [143'0x8f] SWAP1 */
    0xf3, /* [144'0x90] RETURN */
    0x5b, /* [145'0x91] JUMPDEST */
    0x61, /* [146'0x92] PUSH2 */
    0x00, 0x99, /* constant data */
    0x61, /* [149'0x95] PUSH2 */
    0x01, 0x98, /* constant data */
    0x56, /* [152'0x98] JUMP */
    0x5b, /* [153'0x99] JUMPDEST */
    0x60, /* [154'0x9a] PUSH1 */
    0x40, /* constant data */
    0x51, /* [156'0x9c] MLOAD */
    0x80, /* [157'0x9d] DUP1 */
    0x82, /* [158'0x9e] DUP3 */
    0x15, /* [159'0x9f] ISZERO */
    0x15, /* [160'0xa0] ISZERO */
    0x81, /* [161'0xa1] DUP2 */
    0x52, /* [162'0xa2] MSTORE */
    0x60, /* [163'0xa3] PUSH1 */
    0x20, /* constant data */
    0x01, /* [165'0xa5] ADD */
    0x91, /* [166'0xa6] SWAP2 */
    0x50, /* [167'0xa7] POP */
    0x50, /* [168'0xa8] POP */
    0x60, /* [169'0xa9] PUSH1 */
    0x40, /* constant data */
    0x51, /* [171'0xab] MLOAD */
    0x80, /* [172'0xac] DUP1 */
    0x91, /* [173'0xad] SWAP2 */
    0x03, /* [174'0xae] SUB */
    0x90, /* [175'0xaf] SWAP1 */
    0xf3, /* [176'0xb0] RETURN */
    0x5b, /* [177'0xb1] JUMPDEST */
    0x60, /* [178'0xb2] PUSH1 */
    0x00, /* constant data */
    0x80, /* [180'0xb4] DUP1 */
    0x82, /* [181'0xb5] DUP3 */
    0x84, /* [182'0xb6] DUP5 */
    0x01, /* [183'0xb7] ADD */
    0x90, /* [184'0xb8] SWAP1 */
    0x50, /* [185'0xb9] POP */
    0x60, /* [186'0xba] PUSH1 */
    0x01, /* constant data */
    0x81, /* [188'0xbc] DUP2 */
    0x12, /* [189'0xbd] SLT */
    0x15, /* [190'0xbe] ISZERO */
    0x61, /* [191'0xbf] PUSH2 */
    0x01, 0x42, /* constant data */
    0x57, /* [194'0xc2] JUMPI */
    0x60, /* [195'0xc3] PUSH1 */
    0x03, /* constant data */
    0x84, /* [197'0xc5] DUP5 */
    0x12, /* [198'0xc6] SLT */
    0x15, /* [199'0xc7] ISZERO */
    0x61, /* [200'0xc8] PUSH2 */
    0x00, 0xef, /* constant data */
    0x57, /* [203'0xcb] JUMPI */
    0x60, /* [204'0xcc] PUSH1 */
    0x01, /* constant data */
    0x60, /* [206'0xce] PUSH1 */
    0x00, /* constant data */
    0x80, /* [208'0xd0] DUP1 */
    0x61, /* [209'0xd1] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [212'0xd4] EXP */
    0x81, /* [213'0xd5] DUP2 */
    0x54, /* [214'0xd6] SLOAD */
    0x81, /* [215'0xd7] DUP2 */
    0x60, /* [216'0xd8] PUSH1 */
    0xff, /* constant data */
    0x02, /* [218'0xda] MUL */
    0x19, /* [219'0xdb] NOT */
    0x16, /* [220'0xdc] AND */
    0x90, /* [221'0xdd] SWAP1 */
    0x83, /* [222'0xde] DUP4 */
    0x15, /* [223'0xdf] ISZERO */
    0x15, /* [224'0xe0] ISZERO */
    0x02, /* [225'0xe1] MUL */
    0x17, /* [226'0xe2] OR */
    0x90, /* [227'0xe3] SWAP1 */
    0x55, /* [228'0xe4] SSTORE */
    0x50, /* [229'0xe5] POP */
    0x60, /* [230'0xe6] PUSH1 */
    0x01, /* constant data */
    0x91, /* [232'0xe8] SWAP2 */
    0x50, /* [233'0xe9] POP */
    0x50, /* [234'0xea] POP */
    0x61, /* [235'0xeb] PUSH2 */
    0x01, 0x91, /* constant data */
    0x56, /* [238'0xee] JUMP */
    0x5b, /* [239'0xef] JUMPDEST */
    0x60, /* [240'0xf0] PUSH1 */
    0x2a, /* constant data */
    0x85, /* [242'0xf2] DUP6 */
    0x14, /* [243'0xf3] EQ */
    0x15, /* [244'0xf4] ISZERO */
    0x61, /* [245'0xf5] PUSH2 */
    0x01, 0x1d, /* constant data */
    0x57, /* [248'0xf8] JUMPI */
    0x60, /* [249'0xf9] PUSH1 */
    0x01, /* constant data */
    0x60, /* [251'0xfb] PUSH1 */
    0x00, /* constant data */
    0x60, /* [253'0xfd] PUSH1 */
    0x01, /* constant data */
    0x61, /* [255'0xff] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [258'0x102] EXP */
    0x81, /* [259'0x103] DUP2 */
    0x54, /* [260'0x104] SLOAD */
    0x81, /* [261'0x105] DUP2 */
    0x60, /* [262'0x106] PUSH1 */
    0xff, /* constant data */
    0x02, /* [264'0x108] MUL */
    0x19, /* [265'0x109] NOT */
    0x16, /* [266'0x10a] AND */
    0x90, /* [267'0x10b] SWAP1 */
    0x83, /* [268'0x10c] DUP4 */
    0x15, /* [269'0x10d] ISZERO */
    0x15, /* [270'0x10e] ISZERO */
    0x02, /* [271'0x10f] MUL */
    0x17, /* [272'0x110] OR */
    0x90, /* [273'0x111] SWAP1 */
    0x55, /* [274'0x112] SSTORE */
    0x50, /* [275'0x113] POP */
    0x60, /* [276'0x114] PUSH1 */
    0x02, /* constant data */
    0x91, /* [278'0x116] SWAP2 */
    0x50, /* [279'0x117] POP */
    0x50, /* [280'0x118] POP */
    0x61, /* [281'0x119] PUSH2 */
    0x01, 0x91, /* constant data */
    0x56, /* [284'0x11c] JUMP */
    0x5b, /* [285'0x11d] JUMPDEST */
    0x60, /* [286'0x11e] PUSH1 */
    0x01, /* constant data */
    0x60, /* [288'0x120] PUSH1 */
    0x00, /* constant data */
    0x60, /* [290'0x122] PUSH1 */
    0x02, /* constant data */
    0x61, /* [292'0x124] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [295'0x127] EXP */
    0x81, /* [296'0x128] DUP2 */
    0x54, /* [297'0x129] SLOAD */
    0x81, /* [298'0x12a] DUP2 */
    0x60, /* [299'0x12b] PUSH1 */
    0xff, /* constant data */
    0x02, /* [301'0x12d] MUL */
    0x19, /* [302'0x12e] NOT */
    0x16, /* [303'0x12f] AND */
    0x90, /* [304'0x130] SWAP1 */
    0x83, /* [305'0x131] DUP4 */
    0x15, /* [306'0x132] ISZERO */
    0x15, /* [307'0x133] ISZERO */
    0x02, /* [308'0x134] MUL */
    0x17, /* [309'0x135] OR */
    0x90, /* [310'0x136] SWAP1 */
    0x55, /* [311'0x137] SSTORE */
    0x50, /* [312'0x138] POP */
    0x60, /* [313'0x139] PUSH1 */
    0x03, /* constant data */
    0x91, /* [315'0x13b] SWAP2 */
    0x50, /* [316'0x13c] POP */
    0x50, /* [317'0x13d] POP */
    0x61, /* [318'0x13e] PUSH2 */
    0x01, 0x91, /* constant data */
    0x56, /* [321'0x141] JUMP */
    0x5b, /* [322'0x142] JUMPDEST */
    0x60, /* [323'0x143] PUSH1 */
    0x2a, /* constant data */
    0x83, /* [325'0x145] DUP4 */
    0x12, /* [326'0x146] SLT */
    0x15, /* [327'0x147] ISZERO */
    0x61, /* [328'0x148] PUSH2 */
    0x01, 0x70, /* constant data */
    0x57, /* [331'0x14b] JUMPI */
    0x60, /* [332'0x14c] PUSH1 */
    0x01, /* constant data */
    0x60, /* [334'0x14e] PUSH1 */
    0x00, /* constant data */
    0x60, /* [336'0x150] PUSH1 */
    0x03, /* constant data */
    0x61, /* [338'0x152] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [341'0x155] EXP */
    0x81, /* [342'0x156] DUP2 */
    0x54, /* [343'0x157] SLOAD */
    0x81, /* [344'0x158] DUP2 */
    0x60, /* [345'0x159] PUSH1 */
    0xff, /* constant data */
    0x02, /* [347'0x15b] MUL */
    0x19, /* [348'0x15c] NOT */
    0x16, /* [349'0x15d] AND */
    0x90, /* [350'0x15e] SWAP1 */
    0x83, /* [351'0x15f] DUP4 */
    0x15, /* [352'0x160] ISZERO */
    0x15, /* [353'0x161] ISZERO */
    0x02, /* [354'0x162] MUL */
    0x17, /* [355'0x163] OR */
    0x90, /* [356'0x164] SWAP1 */
    0x55, /* [357'0x165] SSTORE */
    0x50, /* [358'0x166] POP */
    0x60, /* [359'0x167] PUSH1 */
    0x04, /* constant data */
    0x91, /* [361'0x169] SWAP2 */
    0x50, /* [362'0x16a] POP */
    0x50, /* [363'0x16b] POP */
    0x61, /* [364'0x16c] PUSH2 */
    0x01, 0x91, /* constant data */
    0x56, /* [367'0x16f] JUMP */
    0x5b, /* [368'0x170] JUMPDEST */
    0x60, /* [369'0x171] PUSH1 */
    0x01, /* constant data */
    0x60, /* [371'0x173] PUSH1 */
    0x00, /* constant data */
    0x60, /* [373'0x175] PUSH1 */
    0x04, /* constant data */
    0x61, /* [375'0x177] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [378'0x17a] EXP */
    0x81, /* [379'0x17b] DUP2 */
    0x54, /* [380'0x17c] SLOAD */
    0x81, /* [381'0x17d] DUP2 */
    0x60, /* [382'0x17e] PUSH1 */
    0xff, /* constant data */
    0x02, /* [384'0x180] MUL */
    0x19, /* [385'0x181] NOT */
    0x16, /* [386'0x182] AND */
    0x90, /* [387'0x183] SWAP1 */
    0x83, /* [388'0x184] DUP4 */
    0x15, /* [389'0x185] ISZERO */
    0x15, /* [390'0x186] ISZERO */
    0x02, /* [391'0x187] MUL */
    0x17, /* [392'0x188] OR */
    0x90, /* [393'0x189] SWAP1 */
    0x55, /* [394'0x18a] SSTORE */
    0x50, /* [395'0x18b] POP */
    0x60, /* [396'0x18c] PUSH1 */
    0x05, /* constant data */
    0x91, /* [398'0x18e] SWAP2 */
    0x50, /* [399'0x18f] POP */
    0x50, /* [400'0x190] POP */
    0x5b, /* [401'0x191] JUMPDEST */
    0x93, /* [402'0x192] SWAP4 */
    0x92, /* [403'0x193] SWAP3 */
    0x50, /* [404'0x194] POP */
    0x50, /* [405'0x195] POP */
    0x50, /* [406'0x196] POP */
    0x56, /* [407'0x197] JUMP */
    0x5b, /* [408'0x198] JUMPDEST */
    0x60, /* [409'0x199] PUSH1 */
    0x00, /* constant data */
    0x80, /* [411'0x19b] DUP1 */
    0x60, /* [412'0x19c] PUSH1 */
    0x00, /* constant data */
    0x90, /* [414'0x19e] SWAP1 */
    0x54, /* [415'0x19f] SLOAD */
    0x90, /* [416'0x1a0] SWAP1 */
    0x61, /* [417'0x1a1] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [420'0x1a4] EXP */
    0x90, /* [421'0x1a5] SWAP1 */
    0x04, /* [422'0x1a6] DIV */
    0x60, /* [423'0x1a7] PUSH1 */
    0xff, /* constant data */
    0x16, /* [425'0x1a9] AND */
    0x15, /* [426'0x1aa] ISZERO */
    0x80, /* [427'0x1ab] DUP1 */
    0x61, /* [428'0x1ac] PUSH2 */
    0x01, 0xc2, /* constant data */
    0x57, /* [431'0x1af] JUMPI */
    0x50, /* [432'0x1b0] POP */
    0x60, /* [433'0x1b1] PUSH1 */
    0x00, /* constant data */
    0x60, /* [435'0x1b3] PUSH1 */
    0x01, /* constant data */
    0x90, /* [437'0x1b5] SWAP1 */
    0x54, /* [438'0x1b6] SLOAD */
    0x90, /* [439'0x1b7] SWAP1 */
    0x61, /* [440'0x1b8] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [443'0x1bb] EXP */
    0x90, /* [444'0x1bc] SWAP1 */
    0x04, /* [445'0x1bd] DIV */
    0x60, /* [446'0x1be] PUSH1 */
    0xff, /* constant data */
    0x16, /* [448'0x1c0] AND */
    0x15, /* [449'0x1c1] ISZERO */
    0x5b, /* [450'0x1c2] JUMPDEST */
    0x80, /* [451'0x1c3] DUP1 */
    0x61, /* [452'0x1c4] PUSH2 */
    0x01, 0xda, /* constant data */
    0x57, /* [455'0x1c7] JUMPI */
    0x50, /* [456'0x1c8] POP */
    0x60, /* [457'0x1c9] PUSH1 */
    0x00, /* constant data */
    0x60, /* [459'0x1cb] PUSH1 */
    0x02, /* constant data */
    0x90, /* [461'0x1cd] SWAP1 */
    0x54, /* [462'0x1ce] SLOAD */
    0x90, /* [463'0x1cf] SWAP1 */
    0x61, /* [464'0x1d0] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [467'0x1d3] EXP */
    0x90, /* [468'0x1d4] SWAP1 */
    0x04, /* [469'0x1d5] DIV */
    0x60, /* [470'0x1d6] PUSH1 */
    0xff, /* constant data */
    0x16, /* [472'0x1d8] AND */
    0x15, /* [473'0x1d9] ISZERO */
    0x5b, /* [474'0x1da] JUMPDEST */
    0x80, /* [475'0x1db] DUP1 */
    0x61, /* [476'0x1dc] PUSH2 */
    0x01, 0xf2, /* constant data */
    0x57, /* [479'0x1df] JUMPI */
    0x50, /* [480'0x1e0] POP */
    0x60, /* [481'0x1e1] PUSH1 */
    0x00, /* constant data */
    0x60, /* [483'0x1e3] PUSH1 */
    0x03, /* constant data */
    0x90, /* [485'0x1e5] SWAP1 */
    0x54, /* [486'0x1e6] SLOAD */
    0x90, /* [487'0x1e7] SWAP1 */
    0x61, /* [488'0x1e8] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [491'0x1eb] EXP */
    0x90, /* [492'0x1ec] SWAP1 */
    0x04, /* [493'0x1ed] DIV */
    0x60, /* [494'0x1ee] PUSH1 */
    0xff, /* constant data */
    0x16, /* [496'0x1f0] AND */
    0x15, /* [497'0x1f1] ISZERO */
    0x5b, /* [498'0x1f2] JUMPDEST */
    0x80, /* [499'0x1f3] DUP1 */
    0x61, /* [500'0x1f4] PUSH2 */
    0x02, 0x0a, /* constant data */
    0x57, /* [503'0x1f7] JUMPI */
    0x50, /* [504'0x1f8] POP */
    0x60, /* [505'0x1f9] PUSH1 */
    0x00, /* constant data */
    0x60, /* [507'0x1fb] PUSH1 */
    0x04, /* constant data */
    0x90, /* [509'0x1fd] SWAP1 */
    0x54, /* [510'0x1fe] SLOAD */
    0x90, /* [511'0x1ff] SWAP1 */
    0x61, /* [512'0x200] PUSH2 */
    0x01, 0x00, /* constant data */
    0x0a, /* [515'0x203] EXP */
    0x90, /* [516'0x204] SWAP1 */
    0x04, /* [517'0x205] DIV */
    0x60, /* [518'0x206] PUSH1 */
    0xff, /* constant data */
    0x16, /* [520'0x208] AND */
    0x15, /* [521'0x209] ISZERO */
    0x5b, /* [522'0x20a] JUMPDEST */
    0x90, /* [523'0x20b] SWAP1 */
    0x50, /* [524'0x20c] POP */
    0x90, /* [525'0x20d] SWAP1 */
    0x56, /* [526'0x20e] JUMP */
    0xfe, /* [527'0x20f] INVALID */
    0xa2, /* [528'0x210] LOG2 */
    0x64, /* [529'0x211] PUSH5 */
    0x69, 0x70, 0x66, 0x73, 0x58, /* constant data */
    0x22, /* [535'0x217] INVALID' byte */
    0x12, /* [536'0x218] SLT */
    0x20, /* [537'0x219] SHA3 */
    0x34, /* [538'0x21a] CALLVALUE */
    0x27, /* [539'0x21b] INVALID' byte */
    0x91, /* [540'0x21c] SWAP2 */
    0xc4, /* [541'0x21d] INVALID' byte */
    0xcd, /* [542'0x21e] INVALID' byte */
    0xf0, /* [543'0x21f] CREATE */
    0x78, /* [544'0x220] PUSH25 */
    0xca, 0x9b, 0xbc, 0xe2, 0x61, 0x85, 0x41, 0xca, 0x54,
    0x7f, 0xd0, 0x05, 0x1d, 0xde, 0xde, 0x5a, 0x81, 0x29,
    0xc7, 0x81, 0xa8, 0xd7, 0xaf, 0x0b, 0xe0, /* constant data */
    0x64, /* [570'0x23a] PUSH5 */
    0x73, 0x6f, 0x6c, 0x63, 0x43, /* constant data */
    0x00, /* [576'0x240] STOP */
    0x07, /* [577'0x241] SMOD */
    0x06, /* [578'0x242] MOD */
    0x00, /* [579'0x243] STOP */
    0x33, /* [580'0x244] CALLER */
};

const eevm::Code& eevm::EVM2CPP_harvey_baz::bytecode()
{
  return _contract_bytecode;
}

const std::string eevm::EVM2CPP_harvey_baz::_contract_name = "harvey_baz";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_harvey_baz>
  eevm::EVM2CPP_harvey_baz::reg{};
const std::string& eevm::EVM2CPP_harvey_baz::name()
{
  return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_3 = 0x3_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_5 = 0x5_u256;
constexpr uint256_t c_10 = 0x10_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_2a = 0x2a_u256;
constexpr uint256_t c_36 = 0x36_u256;
constexpr uint256_t c_3b = 0x3b_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_51 = 0x51_u256;
constexpr uint256_t c_60 = 0x60_u256;
constexpr uint256_t c_7b = 0x7b_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_91 = 0x91_u256;
constexpr uint256_t c_99 = 0x99_u256;
constexpr uint256_t c_b1 = 0xb1_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_ef = 0xef_u256;
constexpr uint256_t c_ff = 0xff_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_11d = 0x11d_u256;
constexpr uint256_t c_142 = 0x142_u256;
constexpr uint256_t c_170 = 0x170_u256;
constexpr uint256_t c_191 = 0x191_u256;
constexpr uint256_t c_198 = 0x198_u256;
constexpr uint256_t c_1c2 = 0x1c2_u256;
constexpr uint256_t c_1da = 0x1da_u256;
constexpr uint256_t c_1f2 = 0x1f2_u256;
constexpr uint256_t c_20a = 0x20a_u256;
constexpr uint256_t c_ff00 = 0xff00_u256;
constexpr uint256_t c_10000 = 0x10000_u256;
constexpr uint256_t c_ff0000 = 0xff0000_u256;
constexpr uint256_t c_1000000 = 0x1000000_u256;
constexpr uint256_t c_43e3f838 = 0x43e3f838_u256;
constexpr uint256_t c_eee30647 = 0xeee30647_u256;
constexpr uint256_t c_ff000000 = 0xff000000_u256;
constexpr uint256_t g_39 = 0x100000000_u256;
constexpr uint256_t g_46 = 0x736f6c6343_u256;
constexpr uint256_t g_40 = 0xff00000000_u256;
constexpr uint256_t g_47 =
  0xca9bbce2618541ca547fd0051ddede5a8129c781a8d7af0be0_u256;
constexpr uint256_t g_41 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff_u256;
constexpr uint256_t g_37 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff_u256;
constexpr uint256_t g_33 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff_u256;
constexpr uint256_t g_30 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff_u256;
constexpr uint256_t g_24 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00_u256;

// code
void eevm::EVM2CPP_harvey_baz::dispatch()
{
  static void* _JUMP_TABLE_ARR[] = {
    &&_evm_start,

    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_10,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_36,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_3b,   &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_51,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_7b,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_91,      &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_99,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_b1,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_ef,   &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_11d,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_142,  &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_170,  &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_191,  &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_198,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_1c2,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_1da,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_1f2,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_20a,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld,

  };

  goto _evm_start;

__invld:
  throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) \
  { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) \
    { \
      goto* _JUMP_TABLE_ARR[_jump_target]; \
    } \
    else \
    { \
      goto __invld; \
    } \
  }

_evm_start:
pc_0 : { /* <============ */
  on_bb_start(0);
  /* PUSH1 */
  /* val = [128] */

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((1, 64)) */
  /* op_1 = Constant((0, 128)) */
  mstore_v(c_40, c_80);

  /* CALLVALUE */
  const uint256_t v_3_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_5_0 = iszero_v(v_3_0);

  /* PUSH2 */
  /* val = [16] */

  /* JUMPI */
  /* op_0 = Constant((6, 16)) */
  /* op_1 = InstructionRef((5, 0)) */
  if (v_5_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_10;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_c : { /* <============ */
  on_bb_start(12);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_10 : { /* <============ */
  on_bb_start(16);
  /* JUMPDEST */

  /* POP */

  /* PUSH1 */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_3_0 = calldatasize_v();

  /* LT */
  /* op_0 = InstructionRef((3, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_4_0 = lt_v(v_3_0, c_4);

  /* PUSH2 */
  /* val = [54] */

  /* JUMPI */
  /* op_0 = Constant((5, 54)) */
  /* op_1 = InstructionRef((4, 0)) */
  if (v_4_0)
  {
    /* BB finalizer */
    /* no stack sets */
    ctxt->s.pop_drop_n(1);
    /* no BB returns */

    goto pc_36;
  }

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_1a : { /* <============ */
  on_bb_start(26);
  /* PUSH1 */
  /* val = [0] */

  /* CALLDATALOAD */
  /* op_0 = Constant((0, 0)) */
  const uint256_t v_1_0 = calldataload_v(c_0);

  /* PUSH1 */
  /* val = [224] */

  /* SHR */
  /* op_0 = Constant((2, 224)) */
  /* op_1 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = shr_v(c_e0, v_1_0);

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* PUSH4 */
  /* val = [1139013688] */

  /* EQ */
  /* op_0 = Constant((5, 1139013688)) */
  /* op_1 = InstructionRef((3, 0)) */
  const uint256_t v_6_0 = eq_v(c_43e3f838, v_3_0);

  /* PUSH2 */
  /* val = [59] */

  /* JUMPI */
  /* op_0 = Constant((7, 59)) */
  /* op_1 = InstructionRef((6, 0)) */
  if (v_6_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_3b;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_2b : { /* <============ */
  on_bb_start(43);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH4 */
  /* val = [4007855687] */

  /* EQ */
  /* op_0 = Constant((1, 4007855687)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = eq_v(c_eee30647, s_0_0);

  /* PUSH2 */
  /* val = [145] */

  /* JUMPI */
  /* op_0 = Constant((3, 145)) */
  /* op_1 = InstructionRef((2, 0)) */
  if (v_2_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_91;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_36 : { /* <============ */
  on_bb_start(54);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = Constant((1, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_3b : { /* <============ */
  on_bb_start(59);
  /* JUMPDEST */

  /* PUSH2 */
  /* val = [123] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((2, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_4_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_5_0 = sub_v(v_4_0, c_4);

  /* PUSH1 */
  /* val = [96] */

  /* DUP2 */
  /* op_0 = InstructionRef((5, 0)) */

  /* LT */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((6, 96)) */
  const uint256_t v_8_0 = lt_v(v_5_0, c_60);

  /* ISZERO */
  /* op_0 = InstructionRef((8, 0)) */
  const uint256_t v_9_0 = iszero_v(v_8_0);

  /* PUSH2 */
  /* val = [81] */

  /* JUMPI */
  /* op_0 = Constant((10, 81)) */
  /* op_1 = InstructionRef((9, 0)) */
  if (v_9_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 123))*/
    ctxt->s.push(c_7b);
    /* BB return 1 Constant((2, 4))*/
    ctxt->s.push(c_4);
    /* BB return 2 InstructionRef((5, 0))*/
    ctxt->s.push(v_5_0);

    goto pc_51;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 123))*/
  ctxt->s.push(c_7b);
  /* BB return 1 Constant((2, 4))*/
  ctxt->s.push(c_4);
  /* BB return 2 InstructionRef((5, 0))*/
  ctxt->s.push(v_5_0);
}
pc_4d : { /* <============ */
  on_bb_start(77);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_51 : { /* <============ */
  on_bb_start(81);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((8, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_9_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((9, 0)) */
  /* op_1 = InstructionRef((6, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((9, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((9, 0)) */

  /* CALLDATALOAD */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_15_0 = calldataload_v(v_9_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((9, 0)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((17, 32)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_18_0 = add_v(c_20, v_9_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((18, 0)) */
  /* op_1 = InstructionRef((15, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((18, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((18, 0)) */

  /* CALLDATALOAD */
  /* op_0 = InstructionRef((18, 0)) */
  const uint256_t v_24_0 = calldataload_v(v_18_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((24, 0)) */
  /* op_1 = InstructionRef((18, 0)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((26, 32)) */
  /* op_1 = InstructionRef((18, 0)) */
  const uint256_t v_27_0 = add_v(c_20, v_18_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((27, 0)) */
  /* op_1 = InstructionRef((24, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((24, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((27, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [177] */

  /* JUMP */
  /* op_0 = Constant((35, 177)) */
  /* BB finalizer */
  ctxt->s.set(0, v_15_0);

  ctxt->s.set(1, v_6_0);
  /* no pops at end */
  /* BB return 0 InstructionRef((24, 0))*/
  ctxt->s.push(v_24_0);

  goto pc_b1;
}
pc_7b : { /* <============ */
  on_bb_start(123);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((1, 64)) */
  const uint256_t v_2_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((2, 0)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP2 */
  /* op_0 = InstructionRef((2, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(v_2_0, s_0_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((7, 32)) */
  /* op_1 = InstructionRef((2, 0)) */
  const uint256_t v_8_0 = add_v(c_20, v_2_0);

  /* SWAP2 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((12, 64)) */
  const uint256_t v_13_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((13, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = InstructionRef((13, 0)) */

  /* RETURN */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((16, 0)) */
  return_v(v_13_0, v_16_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_91 : { /* <============ */
  on_bb_start(145);
  /* JUMPDEST */

  /* PUSH2 */
  /* val = [153] */

  /* PUSH2 */
  /* val = [408] */

  /* JUMP */
  /* op_0 = Constant((2, 408)) */
  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 153))*/
  ctxt->s.push(c_99);

  goto pc_198;
}
pc_99 : { /* <============ */
  on_bb_start(153);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((1, 64)) */
  const uint256_t v_2_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((2, 0)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* ISZERO */
  /* op_0 = StackRef((0, 0)) */
  const uint256_t v_5_0 = iszero_v(s_0_0);

  /* ISZERO */
  /* op_0 = InstructionRef((5, 0)) */
  const uint256_t v_6_0 = iszero_v(v_5_0);

  /* DUP2 */
  /* op_0 = InstructionRef((2, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = InstructionRef((6, 0)) */
  mstore_v(v_2_0, v_6_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((9, 32)) */
  /* op_1 = InstructionRef((2, 0)) */
  const uint256_t v_10_0 = add_v(c_20, v_2_0);

  /* SWAP2 */
  /* op_0 = InstructionRef((10, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((14, 64)) */
  const uint256_t v_15_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((15, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((10, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((10, 0)) */
  /* op_1 = InstructionRef((15, 0)) */
  const uint256_t v_18_0 = sub_v(v_10_0, v_15_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((18, 0)) */
  /* op_1 = InstructionRef((15, 0)) */

  /* RETURN */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((18, 0)) */
  return_v(v_15_0, v_18_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_b1 : { /* <============ */
  on_bb_start(177);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP5 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_5_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* POP */

  /* PUSH1 */
  /* val = [1] */

  /* DUP2 */
  /* op_0 = InstructionRef((5, 0)) */

  /* SLT */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((8, 1)) */
  const uint256_t v_10_0 = slt_v(v_5_0, c_1);

  /* ISZERO */
  /* op_0 = InstructionRef((10, 0)) */
  const uint256_t v_11_0 = iszero_v(v_10_0);

  /* PUSH2 */
  /* val = [322] */

  /* JUMPI */
  /* op_0 = Constant((12, 322)) */
  /* op_1 = InstructionRef((11, 0)) */
  if (v_11_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 0))*/
    ctxt->s.push(c_0);
    /* BB return 1 InstructionRef((5, 0))*/
    ctxt->s.push(v_5_0);

    goto pc_142;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 0))*/
  ctxt->s.push(c_0);
  /* BB return 1 InstructionRef((5, 0))*/
  ctxt->s.push(v_5_0);
}
pc_c3 : { /* <============ */
  on_bb_start(195);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  /* PUSH1 */
  /* val = [3] */

  /* DUP5 */
  /* op_0 = StackRef((0, 3)) */

  /* SLT */
  /* op_0 = StackRef((0, 3)) */
  /* op_1 = Constant((0, 3)) */
  const uint256_t v_2_0 = slt_v(s_0_3, c_3);

  /* ISZERO */
  /* op_0 = InstructionRef((2, 0)) */
  const uint256_t v_3_0 = iszero_v(v_2_0);

  /* PUSH2 */
  /* val = [239] */

  /* JUMPI */
  /* op_0 = Constant((4, 239)) */
  /* op_1 = InstructionRef((3, 0)) */
  if (v_3_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_ef;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_cc : { /* <============ */
  on_bb_start(204);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* PUSH1 */
  /* val = [1] */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((3, 256)) */
  /* op_1 = Constant((1, 0)) */
  /* val = [1] */

  /* DUP2 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_6_0 = sload_v(c_0);

  /* DUP2 */
  /* op_0 = Constant((4, 1)) */
  /* val = [1] */

  /* PUSH1 */
  /* val = [255] */

  /* MUL */
  /* op_0 = Constant((8, 255)) */
  /* op_1 = Constant((4, 1)) */
  /* val = [255] */

  /* NOT */
  /* op_0 = Constant((9, 255)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584007913129639680]
   */

  /* AND */
  /* op_0 = Constant((10,
   * 115792089237316195423570985008687907853269984665640564039457584007913129639680))
   */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_11_0 = and_v(g_24, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = Constant((4, 1)) */

  /* DUP4 */
  /* op_0 = Constant((0, 1)) */
  /* val = [1] */

  /* ISZERO */
  /* op_0 = Constant((0, 1)) */
  /* val = [0] */

  /* ISZERO */
  /* op_0 = Constant((14, 0)) */
  /* val = [1] */

  /* MUL */
  /* op_0 = Constant((15, 1)) */
  /* op_1 = Constant((4, 1)) */
  /* val = [1] */

  /* OR */
  /* op_0 = Constant((16, 1)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_17_0 = or_v(c_1, v_11_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* SSTORE */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = InstructionRef((17, 0)) */
  sstore_v(c_0, v_17_0);

  /* POP */

  /* PUSH1 */
  /* val = [1] */

  /* SWAP2 */
  /* op_0 = Constant((21, 1)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [401] */

  /* JUMP */
  /* op_0 = Constant((25, 401)) */
  /* BB finalizer */
  ctxt->s.set(1, c_1);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_191;
}
pc_ef : { /* <============ */
  on_bb_start(239);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [42] */

  /* DUP6 */
  /* op_0 = StackRef((0, 4)) */

  /* EQ */
  /* op_0 = StackRef((0, 4)) */
  /* op_1 = Constant((1, 42)) */
  const uint256_t v_3_0 = eq_v(s_0_4, c_2a);

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_4_0 = iszero_v(v_3_0);

  /* PUSH2 */
  /* val = [285] */

  /* JUMPI */
  /* op_0 = Constant((5, 285)) */
  /* op_1 = InstructionRef((4, 0)) */
  if (v_4_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_11d;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_f9 : { /* <============ */
  on_bb_start(249);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* PUSH1 */
  /* val = [1] */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [1] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((3, 256)) */
  /* op_1 = Constant((2, 1)) */
  /* val = [256] */

  /* DUP2 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_6_0 = sload_v(c_0);

  /* DUP2 */
  /* op_0 = Constant((4, 256)) */
  /* val = [256] */

  /* PUSH1 */
  /* val = [255] */

  /* MUL */
  /* op_0 = Constant((8, 255)) */
  /* op_1 = Constant((4, 256)) */
  /* val = [65280] */

  /* NOT */
  /* op_0 = Constant((9, 65280)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584007913129574655]
   */

  /* AND */
  /* op_0 = Constant((10,
   * 115792089237316195423570985008687907853269984665640564039457584007913129574655))
   */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_11_0 = and_v(g_30, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = Constant((4, 256)) */

  /* DUP4 */
  /* op_0 = Constant((0, 1)) */
  /* val = [1] */

  /* ISZERO */
  /* op_0 = Constant((0, 1)) */
  /* val = [0] */

  /* ISZERO */
  /* op_0 = Constant((14, 0)) */
  /* val = [1] */

  /* MUL */
  /* op_0 = Constant((15, 1)) */
  /* op_1 = Constant((4, 256)) */
  /* val = [256] */

  /* OR */
  /* op_0 = Constant((16, 256)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_17_0 = or_v(c_100, v_11_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* SSTORE */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = InstructionRef((17, 0)) */
  sstore_v(c_0, v_17_0);

  /* POP */

  /* PUSH1 */
  /* val = [2] */

  /* SWAP2 */
  /* op_0 = Constant((21, 2)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [401] */

  /* JUMP */
  /* op_0 = Constant((25, 401)) */
  /* BB finalizer */
  ctxt->s.set(1, c_2);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_191;
}
pc_11d : { /* <============ */
  on_bb_start(285);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [1] */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [2] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((4, 256)) */
  /* op_1 = Constant((3, 2)) */
  /* val = [65536] */

  /* DUP2 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((2, 0)) */
  const uint256_t v_7_0 = sload_v(c_0);

  /* DUP2 */
  /* op_0 = Constant((5, 65536)) */
  /* val = [65536] */

  /* PUSH1 */
  /* val = [255] */

  /* MUL */
  /* op_0 = Constant((9, 255)) */
  /* op_1 = Constant((5, 65536)) */
  /* val = [16711680] */

  /* NOT */
  /* op_0 = Constant((10, 16711680)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584007913112928255]
   */

  /* AND */
  /* op_0 = Constant((11,
   * 115792089237316195423570985008687907853269984665640564039457584007913112928255))
   */
  /* op_1 = InstructionRef((7, 0)) */
  const uint256_t v_12_0 = and_v(g_33, v_7_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((12, 0)) */
  /* op_1 = Constant((5, 65536)) */

  /* DUP4 */
  /* op_0 = Constant((1, 1)) */
  /* val = [1] */

  /* ISZERO */
  /* op_0 = Constant((1, 1)) */
  /* val = [0] */

  /* ISZERO */
  /* op_0 = Constant((15, 0)) */
  /* val = [1] */

  /* MUL */
  /* op_0 = Constant((16, 1)) */
  /* op_1 = Constant((5, 65536)) */
  /* val = [65536] */

  /* OR */
  /* op_0 = Constant((17, 65536)) */
  /* op_1 = InstructionRef((12, 0)) */
  const uint256_t v_18_0 = or_v(c_10000, v_12_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((18, 0)) */
  /* op_1 = Constant((2, 0)) */

  /* SSTORE */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = InstructionRef((18, 0)) */
  sstore_v(c_0, v_18_0);

  /* POP */

  /* PUSH1 */
  /* val = [3] */

  /* SWAP2 */
  /* op_0 = Constant((22, 3)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [401] */

  /* JUMP */
  /* op_0 = Constant((26, 401)) */
  /* BB finalizer */
  ctxt->s.set(1, c_3);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_191;
}
pc_142 : { /* <============ */
  on_bb_start(322);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [42] */

  /* DUP4 */
  /* op_0 = StackRef((0, 2)) */

  /* SLT */
  /* op_0 = StackRef((0, 2)) */
  /* op_1 = Constant((1, 42)) */
  const uint256_t v_3_0 = slt_v(s_0_2, c_2a);

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_4_0 = iszero_v(v_3_0);

  /* PUSH2 */
  /* val = [368] */

  /* JUMPI */
  /* op_0 = Constant((5, 368)) */
  /* op_1 = InstructionRef((4, 0)) */
  if (v_4_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_170;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_14c : { /* <============ */
  on_bb_start(332);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* PUSH1 */
  /* val = [1] */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [3] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((3, 256)) */
  /* op_1 = Constant((2, 3)) */
  /* val = [16777216] */

  /* DUP2 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_6_0 = sload_v(c_0);

  /* DUP2 */
  /* op_0 = Constant((4, 16777216)) */
  /* val = [16777216] */

  /* PUSH1 */
  /* val = [255] */

  /* MUL */
  /* op_0 = Constant((8, 255)) */
  /* op_1 = Constant((4, 16777216)) */
  /* val = [4278190080] */

  /* NOT */
  /* op_0 = Constant((9, 4278190080)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584007908851449855]
   */

  /* AND */
  /* op_0 = Constant((10,
   * 115792089237316195423570985008687907853269984665640564039457584007908851449855))
   */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_11_0 = and_v(g_37, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = Constant((4, 16777216)) */

  /* DUP4 */
  /* op_0 = Constant((0, 1)) */
  /* val = [1] */

  /* ISZERO */
  /* op_0 = Constant((0, 1)) */
  /* val = [0] */

  /* ISZERO */
  /* op_0 = Constant((14, 0)) */
  /* val = [1] */

  /* MUL */
  /* op_0 = Constant((15, 1)) */
  /* op_1 = Constant((4, 16777216)) */
  /* val = [16777216] */

  /* OR */
  /* op_0 = Constant((16, 16777216)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_17_0 = or_v(c_1000000, v_11_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* SSTORE */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = InstructionRef((17, 0)) */
  sstore_v(c_0, v_17_0);

  /* POP */

  /* PUSH1 */
  /* val = [4] */

  /* SWAP2 */
  /* op_0 = Constant((21, 4)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [401] */

  /* JUMP */
  /* op_0 = Constant((25, 401)) */
  /* BB finalizer */
  ctxt->s.set(1, c_4);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_191;
}
pc_170 : { /* <============ */
  on_bb_start(368);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [1] */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [4] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((4, 256)) */
  /* op_1 = Constant((3, 4)) */
  /* val = [4294967296] */

  /* DUP2 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((2, 0)) */
  const uint256_t v_7_0 = sload_v(c_0);

  /* DUP2 */
  /* op_0 = Constant((5, 4294967296)) */
  /* val = [4294967296] */

  /* PUSH1 */
  /* val = [255] */

  /* MUL */
  /* op_0 = Constant((9, 255)) */
  /* op_1 = Constant((5, 4294967296)) */
  /* val = [1095216660480] */

  /* NOT */
  /* op_0 = Constant((10, 1095216660480)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584006817912979455]
   */

  /* AND */
  /* op_0 = Constant((11,
   * 115792089237316195423570985008687907853269984665640564039457584006817912979455))
   */
  /* op_1 = InstructionRef((7, 0)) */
  const uint256_t v_12_0 = and_v(g_41, v_7_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((12, 0)) */
  /* op_1 = Constant((5, 4294967296)) */

  /* DUP4 */
  /* op_0 = Constant((1, 1)) */
  /* val = [1] */

  /* ISZERO */
  /* op_0 = Constant((1, 1)) */
  /* val = [0] */

  /* ISZERO */
  /* op_0 = Constant((15, 0)) */
  /* val = [1] */

  /* MUL */
  /* op_0 = Constant((16, 1)) */
  /* op_1 = Constant((5, 4294967296)) */
  /* val = [4294967296] */

  /* OR */
  /* op_0 = Constant((17, 4294967296)) */
  /* op_1 = InstructionRef((12, 0)) */
  const uint256_t v_18_0 = or_v(g_39, v_12_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((18, 0)) */
  /* op_1 = Constant((2, 0)) */

  /* SSTORE */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = InstructionRef((18, 0)) */
  sstore_v(c_0, v_18_0);

  /* POP */

  /* PUSH1 */
  /* val = [5] */

  /* SWAP2 */
  /* op_0 = Constant((22, 5)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* BB finalizer */
  ctxt->s.set(1, c_5);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_191 : { /* <============ */
  on_bb_start(401);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  /* JUMPDEST */

  /* SWAP4 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 4)) */

  /* SWAP3 */
  /* op_0 = StackRef((0, 4)) */
  /* op_1 = StackRef((0, 3)) */

  /* POP */

  /* POP */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 4)) */
  /* BB finalizer */
  ctxt->s.set(4, s_0_0);
  ctxt->s.pop_drop_n(4);
  /* no BB returns */

  JUMP(s_0_4);
}
pc_198 : { /* <============ */
  on_bb_start(408);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* PUSH1 */
  /* val = [0] */

  /* SWAP1 */
  /* op_0 = Constant((3, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_5_0 = sload_v(c_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((3, 0)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((7, 256)) */
  /* op_1 = Constant((3, 0)) */
  /* val = [1] */

  /* SWAP1 */
  /* op_0 = Constant((8, 1)) */
  /* op_1 = InstructionRef((5, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((8, 1)) */
  /* val = [] */

  /* PUSH1 */
  /* val = [255] */

  /* AND */
  /* op_0 = Constant((11, 255)) */
  /* op_1 = InstructionRef((5, 0)) */
  const uint256_t v_12_0 = and_v(c_ff, v_5_0);

  /* ISZERO */
  /* op_0 = InstructionRef((12, 0)) */
  const uint256_t v_13_0 = iszero_v(v_12_0);

  /* DUP1 */
  /* op_0 = InstructionRef((13, 0)) */

  /* PUSH2 */
  /* val = [450] */

  /* JUMPI */
  /* op_0 = Constant((15, 450)) */
  /* op_1 = InstructionRef((13, 0)) */
  if (v_13_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 0))*/
    ctxt->s.push(c_0);
    /* BB return 1 InstructionRef((13, 0))*/
    ctxt->s.push(v_13_0);

    goto pc_1c2;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 0))*/
  ctxt->s.push(c_0);
  /* BB return 1 InstructionRef((13, 0))*/
  ctxt->s.push(v_13_0);
}
pc_1b0 : { /* <============ */
  on_bb_start(432);
  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [1] */

  /* SWAP1 */
  /* op_0 = Constant((2, 1)) */
  /* op_1 = Constant((1, 0)) */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_4_0 = sload_v(c_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 1)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((6, 256)) */
  /* op_1 = Constant((2, 1)) */
  /* val = [256] */

  /* SWAP1 */
  /* op_0 = Constant((7, 256)) */
  /* op_1 = InstructionRef((4, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((7, 256)) */
  const uint256_t v_9_0 = div_v(v_4_0, c_100);

  /* PUSH1 */
  /* val = [255] */

  /* AND */
  /* op_0 = Constant((10, 255)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_11_0 = and_v(c_ff, v_9_0);

  /* ISZERO */
  /* op_0 = InstructionRef((11, 0)) */
  const uint256_t v_12_0 = iszero_v(v_11_0);

  /* BB finalizer */
  ctxt->s.set(0, v_12_0);
  /* no pops at end */
  /* no BB returns */
}
pc_1c2 : { /* <============ */
  on_bb_start(450);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH2 */
  /* val = [474] */

  /* JUMPI */
  /* op_0 = Constant((2, 474)) */
  /* op_1 = StackRef((0, 0)) */
  if (s_0_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_1da;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1c8 : { /* <============ */
  on_bb_start(456);
  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [2] */

  /* SWAP1 */
  /* op_0 = Constant((2, 2)) */
  /* op_1 = Constant((1, 0)) */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_4_0 = sload_v(c_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 2)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((6, 256)) */
  /* op_1 = Constant((2, 2)) */
  /* val = [65536] */

  /* SWAP1 */
  /* op_0 = Constant((7, 65536)) */
  /* op_1 = InstructionRef((4, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((7, 65536)) */
  const uint256_t v_9_0 = div_v(v_4_0, c_10000);

  /* PUSH1 */
  /* val = [255] */

  /* AND */
  /* op_0 = Constant((10, 255)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_11_0 = and_v(c_ff, v_9_0);

  /* ISZERO */
  /* op_0 = InstructionRef((11, 0)) */
  const uint256_t v_12_0 = iszero_v(v_11_0);

  /* BB finalizer */
  ctxt->s.set(0, v_12_0);
  /* no pops at end */
  /* no BB returns */
}
pc_1da : { /* <============ */
  on_bb_start(474);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH2 */
  /* val = [498] */

  /* JUMPI */
  /* op_0 = Constant((2, 498)) */
  /* op_1 = StackRef((0, 0)) */
  if (s_0_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_1f2;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1e0 : { /* <============ */
  on_bb_start(480);
  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [3] */

  /* SWAP1 */
  /* op_0 = Constant((2, 3)) */
  /* op_1 = Constant((1, 0)) */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_4_0 = sload_v(c_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 3)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((6, 256)) */
  /* op_1 = Constant((2, 3)) */
  /* val = [16777216] */

  /* SWAP1 */
  /* op_0 = Constant((7, 16777216)) */
  /* op_1 = InstructionRef((4, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((7, 16777216)) */
  const uint256_t v_9_0 = div_v(v_4_0, c_1000000);

  /* PUSH1 */
  /* val = [255] */

  /* AND */
  /* op_0 = Constant((10, 255)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_11_0 = and_v(c_ff, v_9_0);

  /* ISZERO */
  /* op_0 = InstructionRef((11, 0)) */
  const uint256_t v_12_0 = iszero_v(v_11_0);

  /* BB finalizer */
  ctxt->s.set(0, v_12_0);
  /* no pops at end */
  /* no BB returns */
}
pc_1f2 : { /* <============ */
  on_bb_start(498);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH2 */
  /* val = [522] */

  /* JUMPI */
  /* op_0 = Constant((2, 522)) */
  /* op_1 = StackRef((0, 0)) */
  if (s_0_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_20a;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1f8 : { /* <============ */
  on_bb_start(504);
  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [4] */

  /* SWAP1 */
  /* op_0 = Constant((2, 4)) */
  /* op_1 = Constant((1, 0)) */

  /* SLOAD */
  /* op_0 = Constant((1, 0)) */
  const uint256_t v_4_0 = sload_v(c_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 4)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((6, 256)) */
  /* op_1 = Constant((2, 4)) */
  /* val = [4294967296] */

  /* SWAP1 */
  /* op_0 = Constant((7, 4294967296)) */
  /* op_1 = InstructionRef((4, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((7, 4294967296)) */
  const uint256_t v_9_0 = div_v(v_4_0, g_39);

  /* PUSH1 */
  /* val = [255] */

  /* AND */
  /* op_0 = Constant((10, 255)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_11_0 = and_v(c_ff, v_9_0);

  /* ISZERO */
  /* op_0 = InstructionRef((11, 0)) */
  const uint256_t v_12_0 = iszero_v(v_11_0);

  /* BB finalizer */
  ctxt->s.set(0, v_12_0);
  /* no pops at end */
  /* no BB returns */
}
pc_20a : { /* <============ */
  on_bb_start(522);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* JUMPDEST */

  /* SWAP1 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* SWAP1 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */

  /* JUMP */
  /* op_0 = StackRef((0, 2)) */
  /* BB finalizer */
  ctxt->s.set(2, s_0_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */

  JUMP(s_0_2);
}
pc_20f : { /* <============ */
  on_bb_start(527);
  /* INVALID */
  invalid_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_210 : { /* <============ */
  on_bb_start(528);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  /* LOG2 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  /* op_3 = StackRef((0, 3)) */
  log2_v(s_0_0, s_0_1, s_0_2, s_0_3);

  /* PUSH5 */
  /* val = [452857328472] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x210 (inst offset 2; byte 0x22)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_218 : { /* <============ */
  on_bb_start(536);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SLT */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  TRACE_COMP(eevm::Opcode::SLT, s_0_0, s_0_1);
  const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);

  /* SHA3 */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);

  /* CALLVALUE */
  const uint256_t v_2_0 = callvalue_v();

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x218 (inst offset 3; byte 0x27)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_21c : { /* <============ */
  on_bb_start(540);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SWAP2 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x21c (inst offset 1; byte 0xc4)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_21e : { /* <============ */
  on_bb_start(542);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x21e (inst offset 0; byte 0xcd)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_21f : { /* <============ */
  on_bb_start(543);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* CREATE */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  const uint256_t v_0_0 = create_v(s_0_0, s_0_1, s_0_2);
  if (ctxt->error)
    goto exit_label;

  /* PUSH25 */
  /* val = [1271793231011227244041853537592143269646379103965603909536736] */

  /* PUSH5 */
  /* val = [495790613315] */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(0, g_46);

  ctxt->s.set(1, g_47);

  ctxt->s.set(2, v_0_0);
  /* no pops at end */
  /* no BB returns */
}
pc_241 : { /* <============ */
  on_bb_start(577);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SMOD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = smod_v(s_0_0, s_0_1);

  /* MOD */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = mod_v(v_0_0, s_0_2);

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(2, v_1_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_244 : { /* <============ */
  on_bb_start(580);
  /* CALLER */
  const uint256_t v_0_0 = caller_v();

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((0, 0))*/
  ctxt->s.push(v_0_0);
}
exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
  0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x0,  0x80, 0x60, 0x0,  0x61, 0x1,  0x0,
  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15,
  0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x0,  0x80, 0x60, 0x1,  0x61, 0x1,  0x0,
  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15,
  0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x0,  0x80, 0x60, 0x2,  0x61, 0x1,  0x0,
  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15,
  0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x0,  0x80, 0x60, 0x3,  0x61, 0x1,  0x0,
  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15,
  0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x0,  0x80, 0x60, 0x4,  0x61, 0x1,  0x0,
  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15,
  0x2,  0x17, 0x90, 0x55, 0x50, 0x34, 0x80, 0x15, 0x61, 0x0,  0x92, 0x57, 0x60,
  0x0,  0x80, 0xfd, 0x5b, 0x50, 0x61, 0x2,  0x45, 0x80, 0x61, 0x0,  0xa2, 0x60,
  0x0,  0x39, 0x60, 0x0,  0xf3, 0xfe, 0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80,
  0x15, 0x61, 0x0,  0x10, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50, 0x60, 0x4,
  0x36, 0x10, 0x61, 0x0,  0x36, 0x57, 0x60, 0x0,  0x35, 0x60, 0xe0, 0x1c, 0x80,
  0x63, 0x43, 0xe3, 0xf8, 0x38, 0x14, 0x61, 0x0,  0x3b, 0x57, 0x80, 0x63, 0xee,
  0xe3, 0x6,  0x47, 0x14, 0x61, 0x0,  0x91, 0x57, 0x5b, 0x60, 0x0,  0x80, 0xfd,
  0x5b, 0x61, 0x0,  0x7b, 0x60, 0x4,  0x80, 0x36, 0x3,  0x60, 0x60, 0x81, 0x10,
  0x15, 0x61, 0x0,  0x51, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90,
  0x80, 0x80, 0x35, 0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91, 0x90, 0x80, 0x35,
  0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91, 0x90, 0x80, 0x35, 0x90, 0x60, 0x20,
  0x1,  0x90, 0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x61, 0x0,  0xb1, 0x56, 0x5b,
  0x60, 0x40, 0x51, 0x80, 0x82, 0x81, 0x52, 0x60, 0x20, 0x1,  0x91, 0x50, 0x50,
  0x60, 0x40, 0x51, 0x80, 0x91, 0x3,  0x90, 0xf3, 0x5b, 0x61, 0x0,  0x99, 0x61,
  0x1,  0x98, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x82, 0x15, 0x15, 0x81, 0x52,
  0x60, 0x20, 0x1,  0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x3,  0x90,
  0xf3, 0x5b, 0x60, 0x0,  0x80, 0x82, 0x84, 0x1,  0x90, 0x50, 0x60, 0x1,  0x81,
  0x12, 0x15, 0x61, 0x1,  0x42, 0x57, 0x60, 0x3,  0x84, 0x12, 0x15, 0x61, 0x0,
  0xef, 0x57, 0x60, 0x1,  0x60, 0x0,  0x80, 0x61, 0x1,  0x0,  0xa,  0x81, 0x54,
  0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15, 0x2,  0x17, 0x90,
  0x55, 0x50, 0x60, 0x1,  0x91, 0x50, 0x50, 0x61, 0x1,  0x91, 0x56, 0x5b, 0x60,
  0x2a, 0x85, 0x14, 0x15, 0x61, 0x1,  0x1d, 0x57, 0x60, 0x1,  0x60, 0x0,  0x60,
  0x1,  0x61, 0x1,  0x0,  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16,
  0x90, 0x83, 0x15, 0x15, 0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x2,  0x91, 0x50,
  0x50, 0x61, 0x1,  0x91, 0x56, 0x5b, 0x60, 0x1,  0x60, 0x0,  0x60, 0x2,  0x61,
  0x1,  0x0,  0xa,  0x81, 0x54, 0x81, 0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83,
  0x15, 0x15, 0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x3,  0x91, 0x50, 0x50, 0x61,
  0x1,  0x91, 0x56, 0x5b, 0x60, 0x2a, 0x83, 0x12, 0x15, 0x61, 0x1,  0x70, 0x57,
  0x60, 0x1,  0x60, 0x0,  0x60, 0x3,  0x61, 0x1,  0x0,  0xa,  0x81, 0x54, 0x81,
  0x60, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15, 0x2,  0x17, 0x90, 0x55,
  0x50, 0x60, 0x4,  0x91, 0x50, 0x50, 0x61, 0x1,  0x91, 0x56, 0x5b, 0x60, 0x1,
  0x60, 0x0,  0x60, 0x4,  0x61, 0x1,  0x0,  0xa,  0x81, 0x54, 0x81, 0x60, 0xff,
  0x2,  0x19, 0x16, 0x90, 0x83, 0x15, 0x15, 0x2,  0x17, 0x90, 0x55, 0x50, 0x60,
  0x5,  0x91, 0x50, 0x50, 0x5b, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60,
  0x0,  0x80, 0x60, 0x0,  0x90, 0x54, 0x90, 0x61, 0x1,  0x0,  0xa,  0x90, 0x4,
  0x60, 0xff, 0x16, 0x15, 0x80, 0x61, 0x1,  0xc2, 0x57, 0x50, 0x60, 0x0,  0x60,
  0x1,  0x90, 0x54, 0x90, 0x61, 0x1,  0x0,  0xa,  0x90, 0x4,  0x60, 0xff, 0x16,
  0x15, 0x5b, 0x80, 0x61, 0x1,  0xda, 0x57, 0x50, 0x60, 0x0,  0x60, 0x2,  0x90,
  0x54, 0x90, 0x61, 0x1,  0x0,  0xa,  0x90, 0x4,  0x60, 0xff, 0x16, 0x15, 0x5b,
  0x80, 0x61, 0x1,  0xf2, 0x57, 0x50, 0x60, 0x0,  0x60, 0x3,  0x90, 0x54, 0x90,
  0x61, 0x1,  0x0,  0xa,  0x90, 0x4,  0x60, 0xff, 0x16, 0x15, 0x5b, 0x80, 0x61,
  0x2,  0xa,  0x57, 0x50, 0x60, 0x0,  0x60, 0x4,  0x90, 0x54, 0x90, 0x61, 0x1,
  0x0,  0xa,  0x90, 0x4,  0x60, 0xff, 0x16, 0x15, 0x5b, 0x90, 0x50, 0x90, 0x56,
  0xfe, 0xa2, 0x64, 0x69, 0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20, 0x34, 0x27,
  0x91, 0xc4, 0xcd, 0xf0, 0x78, 0xca, 0x9b, 0xbc, 0xe2, 0x61, 0x85, 0x41, 0xca,
  0x54, 0x7f, 0xd0, 0x5,  0x1d, 0xde, 0xde, 0x5a, 0x81, 0x29, 0xc7, 0x81, 0xa8,
  0xd7, 0xaf, 0xb,  0xe0, 0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x0,  0x7,  0x6,
  0x0,  0x33,
};

const eevm::Code& eevm::EVM2CPP_harvey_baz::constructor_bytecode()
{
  return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_harvey_baz::constructor_args()
{
  return _constructor_args;
}
