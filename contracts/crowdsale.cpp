// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/crowdsale.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0xf3,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x60, /* [16'0x10] PUSH1 */
0xe0,/* constant data */
0x1c, /* [18'0x12] SHR */
0x80, /* [19'0x13] DUP1 */
0x63, /* [20'0x14] PUSH4 */
0x62,0x77,0x49,0xe6,/* constant data */
0x11, /* [25'0x19] GT */
0x61, /* [26'0x1a] PUSH2 */
0x00,0x8a,/* constant data */
0x57, /* [29'0x1d] JUMPI */
0x80, /* [30'0x1e] DUP1 */
0x63, /* [31'0x1f] PUSH4 */
0xa8,0xbf,0x27,0x89,/* constant data */
0x11, /* [36'0x24] GT */
0x61, /* [37'0x25] PUSH2 */
0x00,0x59,/* constant data */
0x57, /* [40'0x28] JUMPI */
0x80, /* [41'0x29] DUP1 */
0x63, /* [42'0x2a] PUSH4 */
0xa8,0xbf,0x27,0x89,/* constant data */
0x14, /* [47'0x2f] EQ */
0x61, /* [48'0x30] PUSH2 */
0x03,0x10,/* constant data */
0x57, /* [51'0x33] JUMPI */
0x80, /* [52'0x34] DUP1 */
0x63, /* [53'0x35] PUSH4 */
0xb1,0xc9,0xfe,0x6e,/* constant data */
0x14, /* [58'0x3a] EQ */
0x61, /* [59'0x3b] PUSH2 */
0x03,0x3b,/* constant data */
0x57, /* [62'0x3e] JUMPI */
0x80, /* [63'0x3f] DUP1 */
0x63, /* [64'0x40] PUSH4 */
0xe8,0xb5,0xe5,0x1f,/* constant data */
0x14, /* [69'0x45] EQ */
0x61, /* [70'0x46] PUSH2 */
0x03,0x66,/* constant data */
0x57, /* [73'0x49] JUMPI */
0x80, /* [74'0x4a] DUP1 */
0x63, /* [75'0x4b] PUSH4 */
0xfc,0x7e,0x28,0x6d,/* constant data */
0x14, /* [80'0x50] EQ */
0x61, /* [81'0x51] PUSH2 */
0x03,0x70,/* constant data */
0x57, /* [84'0x54] JUMPI */
0x61, /* [85'0x55] PUSH2 */
0x00,0xf3,/* constant data */
0x56, /* [88'0x58] JUMP */
0x5b, /* [89'0x59] JUMPDEST */
0x80, /* [90'0x5a] DUP1 */
0x63, /* [91'0x5b] PUSH4 */
0x62,0x77,0x49,0xe6,/* constant data */
0x14, /* [96'0x60] EQ */
0x61, /* [97'0x61] PUSH2 */
0x02,0x4c,/* constant data */
0x57, /* [100'0x64] JUMPI */
0x80, /* [101'0x65] DUP1 */
0x63, /* [102'0x66] PUSH4 */
0x71,0xe2,0xd8,0x6c,/* constant data */
0x14, /* [107'0x6b] EQ */
0x61, /* [108'0x6c] PUSH2 */
0x02,0x77,/* constant data */
0x57, /* [111'0x6f] JUMPI */
0x80, /* [112'0x70] DUP1 */
0x63, /* [113'0x71] PUSH4 */
0x83,0x31,0xca,0xe5,/* constant data */
0x14, /* [118'0x76] EQ */
0x61, /* [119'0x77] PUSH2 */
0x02,0xa4,/* constant data */
0x57, /* [122'0x7a] JUMPI */
0x80, /* [123'0x7b] DUP1 */
0x63, /* [124'0x7c] PUSH4 */
0x8d,0xa5,0xcb,0x5b,/* constant data */
0x14, /* [129'0x81] EQ */
0x61, /* [130'0x82] PUSH2 */
0x02,0xcf,/* constant data */
0x57, /* [133'0x85] JUMPI */
0x61, /* [134'0x86] PUSH2 */
0x00,0xf3,/* constant data */
0x56, /* [137'0x89] JUMP */
0x5b, /* [138'0x8a] JUMPDEST */
0x80, /* [139'0x8b] DUP1 */
0x63, /* [140'0x8c] PUSH4 */
0x2c,0xc8,0x26,0x55,/* constant data */
0x11, /* [145'0x91] GT */
0x61, /* [146'0x92] PUSH2 */
0x00,0xc6,/* constant data */
0x57, /* [149'0x95] JUMPI */
0x80, /* [150'0x96] DUP1 */
0x63, /* [151'0x97] PUSH4 */
0x2c,0xc8,0x26,0x55,/* constant data */
0x14, /* [156'0x9c] EQ */
0x61, /* [157'0x9d] PUSH2 */
0x01,0xb8,/* constant data */
0x57, /* [160'0xa0] JUMPI */
0x80, /* [161'0xa1] DUP1 */
0x63, /* [162'0xa2] PUSH4 */
0x3c,0xcf,0xd6,0x0b,/* constant data */
0x14, /* [167'0xa7] EQ */
0x61, /* [168'0xa8] PUSH2 */
0x01,0xf3,/* constant data */
0x57, /* [171'0xab] JUMPI */
0x80, /* [172'0xac] DUP1 */
0x63, /* [173'0xad] PUSH4 */
0x59,0x0e,0x1a,0xe3,/* constant data */
0x14, /* [178'0xb2] EQ */
0x61, /* [179'0xb3] PUSH2 */
0x02,0x0a,/* constant data */
0x57, /* [182'0xb6] JUMPI */
0x80, /* [183'0xb7] DUP1 */
0x63, /* [184'0xb8] PUSH4 */
0x61,0xac,0x0d,0xd9,/* constant data */
0x14, /* [189'0xbd] EQ */
0x61, /* [190'0xbe] PUSH2 */
0x02,0x21,/* constant data */
0x57, /* [193'0xc1] JUMPI */
0x61, /* [194'0xc2] PUSH2 */
0x00,0xf3,/* constant data */
0x56, /* [197'0xc5] JUMP */
0x5b, /* [198'0xc6] JUMPDEST */
0x80, /* [199'0xc7] DUP1 */
0x63, /* [200'0xc8] PUSH4 */
0x07,0xda,0x68,0xf5,/* constant data */
0x14, /* [205'0xcd] EQ */
0x61, /* [206'0xce] PUSH2 */
0x00,0xf8,/* constant data */
0x57, /* [209'0xd1] JUMPI */
0x80, /* [210'0xd2] DUP1 */
0x63, /* [211'0xd3] PUSH4 */
0x13,0xaf,0x40,0x35,/* constant data */
0x14, /* [216'0xd8] EQ */
0x61, /* [217'0xd9] PUSH2 */
0x01,0x0f,/* constant data */
0x57, /* [220'0xdc] JUMPI */
0x80, /* [221'0xdd] DUP1 */
0x63, /* [222'0xde] PUSH4 */
0x22,0xf3,0xe2,0xd4,/* constant data */
0x14, /* [227'0xe3] EQ */
0x61, /* [228'0xe4] PUSH2 */
0x01,0x60,/* constant data */
0x57, /* [231'0xe7] JUMPI */
0x80, /* [232'0xe8] DUP1 */
0x63, /* [233'0xe9] PUSH4 */
0x23,0x2d,0xda,0xaf,/* constant data */
0x14, /* [238'0xee] EQ */
0x61, /* [239'0xef] PUSH2 */
0x01,0x8d,/* constant data */
0x57, /* [242'0xf2] JUMPI */
0x5b, /* [243'0xf3] JUMPDEST */
0x60, /* [244'0xf4] PUSH1 */
0x00,/* constant data */
0x80, /* [246'0xf6] DUP1 */
0xfd, /* [247'0xf7] REVERT */
0x5b, /* [248'0xf8] JUMPDEST */
0x34, /* [249'0xf9] CALLVALUE */
0x80, /* [250'0xfa] DUP1 */
0x15, /* [251'0xfb] ISZERO */
0x61, /* [252'0xfc] PUSH2 */
0x01,0x04,/* constant data */
0x57, /* [255'0xff] JUMPI */
0x60, /* [256'0x100] PUSH1 */
0x00,/* constant data */
0x80, /* [258'0x102] DUP1 */
0xfd, /* [259'0x103] REVERT */
0x5b, /* [260'0x104] JUMPDEST */
0x50, /* [261'0x105] POP */
0x61, /* [262'0x106] PUSH2 */
0x01,0x0d,/* constant data */
0x61, /* [265'0x109] PUSH2 */
0x03,0xd5,/* constant data */
0x56, /* [268'0x10c] JUMP */
0x5b, /* [269'0x10d] JUMPDEST */
0x00, /* [270'0x10e] STOP */
0x5b, /* [271'0x10f] JUMPDEST */
0x34, /* [272'0x110] CALLVALUE */
0x80, /* [273'0x111] DUP1 */
0x15, /* [274'0x112] ISZERO */
0x61, /* [275'0x113] PUSH2 */
0x01,0x1b,/* constant data */
0x57, /* [278'0x116] JUMPI */
0x60, /* [279'0x117] PUSH1 */
0x00,/* constant data */
0x80, /* [281'0x119] DUP1 */
0xfd, /* [282'0x11a] REVERT */
0x5b, /* [283'0x11b] JUMPDEST */
0x50, /* [284'0x11c] POP */
0x61, /* [285'0x11d] PUSH2 */
0x01,0x5e,/* constant data */
0x60, /* [288'0x120] PUSH1 */
0x04,/* constant data */
0x80, /* [290'0x122] DUP1 */
0x36, /* [291'0x123] CALLDATASIZE */
0x03, /* [292'0x124] SUB */
0x60, /* [293'0x125] PUSH1 */
0x20,/* constant data */
0x81, /* [295'0x127] DUP2 */
0x10, /* [296'0x128] LT */
0x15, /* [297'0x129] ISZERO */
0x61, /* [298'0x12a] PUSH2 */
0x01,0x32,/* constant data */
0x57, /* [301'0x12d] JUMPI */
0x60, /* [302'0x12e] PUSH1 */
0x00,/* constant data */
0x80, /* [304'0x130] DUP1 */
0xfd, /* [305'0x131] REVERT */
0x5b, /* [306'0x132] JUMPDEST */
0x81, /* [307'0x133] DUP2 */
0x01, /* [308'0x134] ADD */
0x90, /* [309'0x135] SWAP1 */
0x80, /* [310'0x136] DUP1 */
0x80, /* [311'0x137] DUP1 */
0x35, /* [312'0x138] CALLDATALOAD */
0x73, /* [313'0x139] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [334'0x14e] AND */
0x90, /* [335'0x14f] SWAP1 */
0x60, /* [336'0x150] PUSH1 */
0x20,/* constant data */
0x01, /* [338'0x152] ADD */
0x90, /* [339'0x153] SWAP1 */
0x92, /* [340'0x154] SWAP3 */
0x91, /* [341'0x155] SWAP2 */
0x90, /* [342'0x156] SWAP1 */
0x50, /* [343'0x157] POP */
0x50, /* [344'0x158] POP */
0x50, /* [345'0x159] POP */
0x61, /* [346'0x15a] PUSH2 */
0x03,0xfc,/* constant data */
0x56, /* [349'0x15d] JUMP */
0x5b, /* [350'0x15e] JUMPDEST */
0x00, /* [351'0x15f] STOP */
0x5b, /* [352'0x160] JUMPDEST */
0x34, /* [353'0x161] CALLVALUE */
0x80, /* [354'0x162] DUP1 */
0x15, /* [355'0x163] ISZERO */
0x61, /* [356'0x164] PUSH2 */
0x01,0x6c,/* constant data */
0x57, /* [359'0x167] JUMPI */
0x60, /* [360'0x168] PUSH1 */
0x00,/* constant data */
0x80, /* [362'0x16a] DUP1 */
0xfd, /* [363'0x16b] REVERT */
0x5b, /* [364'0x16c] JUMPDEST */
0x50, /* [365'0x16d] POP */
0x61, /* [366'0x16e] PUSH2 */
0x01,0x75,/* constant data */
0x61, /* [369'0x171] PUSH2 */
0x04,0x40,/* constant data */
0x56, /* [372'0x174] JUMP */
0x5b, /* [373'0x175] JUMPDEST */
0x60, /* [374'0x176] PUSH1 */
0x40,/* constant data */
0x51, /* [376'0x178] MLOAD */
0x80, /* [377'0x179] DUP1 */
0x82, /* [378'0x17a] DUP3 */
0x15, /* [379'0x17b] ISZERO */
0x15, /* [380'0x17c] ISZERO */
0x81, /* [381'0x17d] DUP2 */
0x52, /* [382'0x17e] MSTORE */
0x60, /* [383'0x17f] PUSH1 */
0x20,/* constant data */
0x01, /* [385'0x181] ADD */
0x91, /* [386'0x182] SWAP2 */
0x50, /* [387'0x183] POP */
0x50, /* [388'0x184] POP */
0x60, /* [389'0x185] PUSH1 */
0x40,/* constant data */
0x51, /* [391'0x187] MLOAD */
0x80, /* [392'0x188] DUP1 */
0x91, /* [393'0x189] SWAP2 */
0x03, /* [394'0x18a] SUB */
0x90, /* [395'0x18b] SWAP1 */
0xf3, /* [396'0x18c] RETURN */
0x5b, /* [397'0x18d] JUMPDEST */
0x34, /* [398'0x18e] CALLVALUE */
0x80, /* [399'0x18f] DUP1 */
0x15, /* [400'0x190] ISZERO */
0x61, /* [401'0x191] PUSH2 */
0x01,0x99,/* constant data */
0x57, /* [404'0x194] JUMPI */
0x60, /* [405'0x195] PUSH1 */
0x00,/* constant data */
0x80, /* [407'0x197] DUP1 */
0xfd, /* [408'0x198] REVERT */
0x5b, /* [409'0x199] JUMPDEST */
0x50, /* [410'0x19a] POP */
0x61, /* [411'0x19b] PUSH2 */
0x01,0xa2,/* constant data */
0x61, /* [414'0x19e] PUSH2 */
0x04,0x4c,/* constant data */
0x56, /* [417'0x1a1] JUMP */
0x5b, /* [418'0x1a2] JUMPDEST */
0x60, /* [419'0x1a3] PUSH1 */
0x40,/* constant data */
0x51, /* [421'0x1a5] MLOAD */
0x80, /* [422'0x1a6] DUP1 */
0x82, /* [423'0x1a7] DUP3 */
0x81, /* [424'0x1a8] DUP2 */
0x52, /* [425'0x1a9] MSTORE */
0x60, /* [426'0x1aa] PUSH1 */
0x20,/* constant data */
0x01, /* [428'0x1ac] ADD */
0x91, /* [429'0x1ad] SWAP2 */
0x50, /* [430'0x1ae] POP */
0x50, /* [431'0x1af] POP */
0x60, /* [432'0x1b0] PUSH1 */
0x40,/* constant data */
0x51, /* [434'0x1b2] MLOAD */
0x80, /* [435'0x1b3] DUP1 */
0x91, /* [436'0x1b4] SWAP2 */
0x03, /* [437'0x1b5] SUB */
0x90, /* [438'0x1b6] SWAP1 */
0xf3, /* [439'0x1b7] RETURN */
0x5b, /* [440'0x1b8] JUMPDEST */
0x34, /* [441'0x1b9] CALLVALUE */
0x80, /* [442'0x1ba] DUP1 */
0x15, /* [443'0x1bb] ISZERO */
0x61, /* [444'0x1bc] PUSH2 */
0x01,0xc4,/* constant data */
0x57, /* [447'0x1bf] JUMPI */
0x60, /* [448'0x1c0] PUSH1 */
0x00,/* constant data */
0x80, /* [450'0x1c2] DUP1 */
0xfd, /* [451'0x1c3] REVERT */
0x5b, /* [452'0x1c4] JUMPDEST */
0x50, /* [453'0x1c5] POP */
0x61, /* [454'0x1c6] PUSH2 */
0x01,0xf1,/* constant data */
0x60, /* [457'0x1c9] PUSH1 */
0x04,/* constant data */
0x80, /* [459'0x1cb] DUP1 */
0x36, /* [460'0x1cc] CALLDATASIZE */
0x03, /* [461'0x1cd] SUB */
0x60, /* [462'0x1ce] PUSH1 */
0x20,/* constant data */
0x81, /* [464'0x1d0] DUP2 */
0x10, /* [465'0x1d1] LT */
0x15, /* [466'0x1d2] ISZERO */
0x61, /* [467'0x1d3] PUSH2 */
0x01,0xdb,/* constant data */
0x57, /* [470'0x1d6] JUMPI */
0x60, /* [471'0x1d7] PUSH1 */
0x00,/* constant data */
0x80, /* [473'0x1d9] DUP1 */
0xfd, /* [474'0x1da] REVERT */
0x5b, /* [475'0x1db] JUMPDEST */
0x81, /* [476'0x1dc] DUP2 */
0x01, /* [477'0x1dd] ADD */
0x90, /* [478'0x1de] SWAP1 */
0x80, /* [479'0x1df] DUP1 */
0x80, /* [480'0x1e0] DUP1 */
0x35, /* [481'0x1e1] CALLDATALOAD */
0x90, /* [482'0x1e2] SWAP1 */
0x60, /* [483'0x1e3] PUSH1 */
0x20,/* constant data */
0x01, /* [485'0x1e5] ADD */
0x90, /* [486'0x1e6] SWAP1 */
0x92, /* [487'0x1e7] SWAP3 */
0x91, /* [488'0x1e8] SWAP2 */
0x90, /* [489'0x1e9] SWAP1 */
0x50, /* [490'0x1ea] POP */
0x50, /* [491'0x1eb] POP */
0x50, /* [492'0x1ec] POP */
0x61, /* [493'0x1ed] PUSH2 */
0x04,0x51,/* constant data */
0x56, /* [496'0x1f0] JUMP */
0x5b, /* [497'0x1f1] JUMPDEST */
0x00, /* [498'0x1f2] STOP */
0x5b, /* [499'0x1f3] JUMPDEST */
0x34, /* [500'0x1f4] CALLVALUE */
0x80, /* [501'0x1f5] DUP1 */
0x15, /* [502'0x1f6] ISZERO */
0x61, /* [503'0x1f7] PUSH2 */
0x01,0xff,/* constant data */
0x57, /* [506'0x1fa] JUMPI */
0x60, /* [507'0x1fb] PUSH1 */
0x00,/* constant data */
0x80, /* [509'0x1fd] DUP1 */
0xfd, /* [510'0x1fe] REVERT */
0x5b, /* [511'0x1ff] JUMPDEST */
0x50, /* [512'0x200] POP */
0x61, /* [513'0x201] PUSH2 */
0x02,0x08,/* constant data */
0x61, /* [516'0x204] PUSH2 */
0x04,0xba,/* constant data */
0x56, /* [519'0x207] JUMP */
0x5b, /* [520'0x208] JUMPDEST */
0x00, /* [521'0x209] STOP */
0x5b, /* [522'0x20a] JUMPDEST */
0x34, /* [523'0x20b] CALLVALUE */
0x80, /* [524'0x20c] DUP1 */
0x15, /* [525'0x20d] ISZERO */
0x61, /* [526'0x20e] PUSH2 */
0x02,0x16,/* constant data */
0x57, /* [529'0x211] JUMPI */
0x60, /* [530'0x212] PUSH1 */
0x00,/* constant data */
0x80, /* [532'0x214] DUP1 */
0xfd, /* [533'0x215] REVERT */
0x5b, /* [534'0x216] JUMPDEST */
0x50, /* [535'0x217] POP */
0x61, /* [536'0x218] PUSH2 */
0x02,0x1f,/* constant data */
0x61, /* [539'0x21b] PUSH2 */
0x05,0x3c,/* constant data */
0x56, /* [542'0x21e] JUMP */
0x5b, /* [543'0x21f] JUMPDEST */
0x00, /* [544'0x220] STOP */
0x5b, /* [545'0x221] JUMPDEST */
0x34, /* [546'0x222] CALLVALUE */
0x80, /* [547'0x223] DUP1 */
0x15, /* [548'0x224] ISZERO */
0x61, /* [549'0x225] PUSH2 */
0x02,0x2d,/* constant data */
0x57, /* [552'0x228] JUMPI */
0x60, /* [553'0x229] PUSH1 */
0x00,/* constant data */
0x80, /* [555'0x22b] DUP1 */
0xfd, /* [556'0x22c] REVERT */
0x5b, /* [557'0x22d] JUMPDEST */
0x50, /* [558'0x22e] POP */
0x61, /* [559'0x22f] PUSH2 */
0x02,0x36,/* constant data */
0x61, /* [562'0x232] PUSH2 */
0x06,0x3a,/* constant data */
0x56, /* [565'0x235] JUMP */
0x5b, /* [566'0x236] JUMPDEST */
0x60, /* [567'0x237] PUSH1 */
0x40,/* constant data */
0x51, /* [569'0x239] MLOAD */
0x80, /* [570'0x23a] DUP1 */
0x82, /* [571'0x23b] DUP3 */
0x81, /* [572'0x23c] DUP2 */
0x52, /* [573'0x23d] MSTORE */
0x60, /* [574'0x23e] PUSH1 */
0x20,/* constant data */
0x01, /* [576'0x240] ADD */
0x91, /* [577'0x241] SWAP2 */
0x50, /* [578'0x242] POP */
0x50, /* [579'0x243] POP */
0x60, /* [580'0x244] PUSH1 */
0x40,/* constant data */
0x51, /* [582'0x246] MLOAD */
0x80, /* [583'0x247] DUP1 */
0x91, /* [584'0x248] SWAP2 */
0x03, /* [585'0x249] SUB */
0x90, /* [586'0x24a] SWAP1 */
0xf3, /* [587'0x24b] RETURN */
0x5b, /* [588'0x24c] JUMPDEST */
0x34, /* [589'0x24d] CALLVALUE */
0x80, /* [590'0x24e] DUP1 */
0x15, /* [591'0x24f] ISZERO */
0x61, /* [592'0x250] PUSH2 */
0x02,0x58,/* constant data */
0x57, /* [595'0x253] JUMPI */
0x60, /* [596'0x254] PUSH1 */
0x00,/* constant data */
0x80, /* [598'0x256] DUP1 */
0xfd, /* [599'0x257] REVERT */
0x5b, /* [600'0x258] JUMPDEST */
0x50, /* [601'0x259] POP */
0x61, /* [602'0x25a] PUSH2 */
0x02,0x61,/* constant data */
0x61, /* [605'0x25d] PUSH2 */
0x06,0x3f,/* constant data */
0x56, /* [608'0x260] JUMP */
0x5b, /* [609'0x261] JUMPDEST */
0x60, /* [610'0x262] PUSH1 */
0x40,/* constant data */
0x51, /* [612'0x264] MLOAD */
0x80, /* [613'0x265] DUP1 */
0x82, /* [614'0x266] DUP3 */
0x81, /* [615'0x267] DUP2 */
0x52, /* [616'0x268] MSTORE */
0x60, /* [617'0x269] PUSH1 */
0x20,/* constant data */
0x01, /* [619'0x26b] ADD */
0x91, /* [620'0x26c] SWAP2 */
0x50, /* [621'0x26d] POP */
0x50, /* [622'0x26e] POP */
0x60, /* [623'0x26f] PUSH1 */
0x40,/* constant data */
0x51, /* [625'0x271] MLOAD */
0x80, /* [626'0x272] DUP1 */
0x91, /* [627'0x273] SWAP2 */
0x03, /* [628'0x274] SUB */
0x90, /* [629'0x275] SWAP1 */
0xf3, /* [630'0x276] RETURN */
0x5b, /* [631'0x277] JUMPDEST */
0x34, /* [632'0x278] CALLVALUE */
0x80, /* [633'0x279] DUP1 */
0x15, /* [634'0x27a] ISZERO */
0x61, /* [635'0x27b] PUSH2 */
0x02,0x83,/* constant data */
0x57, /* [638'0x27e] JUMPI */
0x60, /* [639'0x27f] PUSH1 */
0x00,/* constant data */
0x80, /* [641'0x281] DUP1 */
0xfd, /* [642'0x282] REVERT */
0x5b, /* [643'0x283] JUMPDEST */
0x50, /* [644'0x284] POP */
0x61, /* [645'0x285] PUSH2 */
0x02,0x8c,/* constant data */
0x61, /* [648'0x288] PUSH2 */
0x06,0x45,/* constant data */
0x56, /* [651'0x28b] JUMP */
0x5b, /* [652'0x28c] JUMPDEST */
0x60, /* [653'0x28d] PUSH1 */
0x40,/* constant data */
0x51, /* [655'0x28f] MLOAD */
0x80, /* [656'0x290] DUP1 */
0x82, /* [657'0x291] DUP3 */
0x15, /* [658'0x292] ISZERO */
0x15, /* [659'0x293] ISZERO */
0x81, /* [660'0x294] DUP2 */
0x52, /* [661'0x295] MSTORE */
0x60, /* [662'0x296] PUSH1 */
0x20,/* constant data */
0x01, /* [664'0x298] ADD */
0x91, /* [665'0x299] SWAP2 */
0x50, /* [666'0x29a] POP */
0x50, /* [667'0x29b] POP */
0x60, /* [668'0x29c] PUSH1 */
0x40,/* constant data */
0x51, /* [670'0x29e] MLOAD */
0x80, /* [671'0x29f] DUP1 */
0x91, /* [672'0x2a0] SWAP2 */
0x03, /* [673'0x2a1] SUB */
0x90, /* [674'0x2a2] SWAP1 */
0xf3, /* [675'0x2a3] RETURN */
0x5b, /* [676'0x2a4] JUMPDEST */
0x34, /* [677'0x2a5] CALLVALUE */
0x80, /* [678'0x2a6] DUP1 */
0x15, /* [679'0x2a7] ISZERO */
0x61, /* [680'0x2a8] PUSH2 */
0x02,0xb0,/* constant data */
0x57, /* [683'0x2ab] JUMPI */
0x60, /* [684'0x2ac] PUSH1 */
0x00,/* constant data */
0x80, /* [686'0x2ae] DUP1 */
0xfd, /* [687'0x2af] REVERT */
0x5b, /* [688'0x2b0] JUMPDEST */
0x50, /* [689'0x2b1] POP */
0x61, /* [690'0x2b2] PUSH2 */
0x02,0xb9,/* constant data */
0x61, /* [693'0x2b5] PUSH2 */
0x06,0xac,/* constant data */
0x56, /* [696'0x2b8] JUMP */
0x5b, /* [697'0x2b9] JUMPDEST */
0x60, /* [698'0x2ba] PUSH1 */
0x40,/* constant data */
0x51, /* [700'0x2bc] MLOAD */
0x80, /* [701'0x2bd] DUP1 */
0x82, /* [702'0x2be] DUP3 */
0x81, /* [703'0x2bf] DUP2 */
0x52, /* [704'0x2c0] MSTORE */
0x60, /* [705'0x2c1] PUSH1 */
0x20,/* constant data */
0x01, /* [707'0x2c3] ADD */
0x91, /* [708'0x2c4] SWAP2 */
0x50, /* [709'0x2c5] POP */
0x50, /* [710'0x2c6] POP */
0x60, /* [711'0x2c7] PUSH1 */
0x40,/* constant data */
0x51, /* [713'0x2c9] MLOAD */
0x80, /* [714'0x2ca] DUP1 */
0x91, /* [715'0x2cb] SWAP2 */
0x03, /* [716'0x2cc] SUB */
0x90, /* [717'0x2cd] SWAP1 */
0xf3, /* [718'0x2ce] RETURN */
0x5b, /* [719'0x2cf] JUMPDEST */
0x34, /* [720'0x2d0] CALLVALUE */
0x80, /* [721'0x2d1] DUP1 */
0x15, /* [722'0x2d2] ISZERO */
0x61, /* [723'0x2d3] PUSH2 */
0x02,0xdb,/* constant data */
0x57, /* [726'0x2d6] JUMPI */
0x60, /* [727'0x2d7] PUSH1 */
0x00,/* constant data */
0x80, /* [729'0x2d9] DUP1 */
0xfd, /* [730'0x2da] REVERT */
0x5b, /* [731'0x2db] JUMPDEST */
0x50, /* [732'0x2dc] POP */
0x61, /* [733'0x2dd] PUSH2 */
0x02,0xe4,/* constant data */
0x61, /* [736'0x2e0] PUSH2 */
0x06,0xb1,/* constant data */
0x56, /* [739'0x2e3] JUMP */
0x5b, /* [740'0x2e4] JUMPDEST */
0x60, /* [741'0x2e5] PUSH1 */
0x40,/* constant data */
0x51, /* [743'0x2e7] MLOAD */
0x80, /* [744'0x2e8] DUP1 */
0x82, /* [745'0x2e9] DUP3 */
0x73, /* [746'0x2ea] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [767'0x2ff] AND */
0x81, /* [768'0x300] DUP2 */
0x52, /* [769'0x301] MSTORE */
0x60, /* [770'0x302] PUSH1 */
0x20,/* constant data */
0x01, /* [772'0x304] ADD */
0x91, /* [773'0x305] SWAP2 */
0x50, /* [774'0x306] POP */
0x50, /* [775'0x307] POP */
0x60, /* [776'0x308] PUSH1 */
0x40,/* constant data */
0x51, /* [778'0x30a] MLOAD */
0x80, /* [779'0x30b] DUP1 */
0x91, /* [780'0x30c] SWAP2 */
0x03, /* [781'0x30d] SUB */
0x90, /* [782'0x30e] SWAP1 */
0xf3, /* [783'0x30f] RETURN */
0x5b, /* [784'0x310] JUMPDEST */
0x34, /* [785'0x311] CALLVALUE */
0x80, /* [786'0x312] DUP1 */
0x15, /* [787'0x313] ISZERO */
0x61, /* [788'0x314] PUSH2 */
0x03,0x1c,/* constant data */
0x57, /* [791'0x317] JUMPI */
0x60, /* [792'0x318] PUSH1 */
0x00,/* constant data */
0x80, /* [794'0x31a] DUP1 */
0xfd, /* [795'0x31b] REVERT */
0x5b, /* [796'0x31c] JUMPDEST */
0x50, /* [797'0x31d] POP */
0x61, /* [798'0x31e] PUSH2 */
0x03,0x25,/* constant data */
0x61, /* [801'0x321] PUSH2 */
0x06,0xd7,/* constant data */
0x56, /* [804'0x324] JUMP */
0x5b, /* [805'0x325] JUMPDEST */
0x60, /* [806'0x326] PUSH1 */
0x40,/* constant data */
0x51, /* [808'0x328] MLOAD */
0x80, /* [809'0x329] DUP1 */
0x82, /* [810'0x32a] DUP3 */
0x81, /* [811'0x32b] DUP2 */
0x52, /* [812'0x32c] MSTORE */
0x60, /* [813'0x32d] PUSH1 */
0x20,/* constant data */
0x01, /* [815'0x32f] ADD */
0x91, /* [816'0x330] SWAP2 */
0x50, /* [817'0x331] POP */
0x50, /* [818'0x332] POP */
0x60, /* [819'0x333] PUSH1 */
0x40,/* constant data */
0x51, /* [821'0x335] MLOAD */
0x80, /* [822'0x336] DUP1 */
0x91, /* [823'0x337] SWAP2 */
0x03, /* [824'0x338] SUB */
0x90, /* [825'0x339] SWAP1 */
0xf3, /* [826'0x33a] RETURN */
0x5b, /* [827'0x33b] JUMPDEST */
0x34, /* [828'0x33c] CALLVALUE */
0x80, /* [829'0x33d] DUP1 */
0x15, /* [830'0x33e] ISZERO */
0x61, /* [831'0x33f] PUSH2 */
0x03,0x47,/* constant data */
0x57, /* [834'0x342] JUMPI */
0x60, /* [835'0x343] PUSH1 */
0x00,/* constant data */
0x80, /* [837'0x345] DUP1 */
0xfd, /* [838'0x346] REVERT */
0x5b, /* [839'0x347] JUMPDEST */
0x50, /* [840'0x348] POP */
0x61, /* [841'0x349] PUSH2 */
0x03,0x50,/* constant data */
0x61, /* [844'0x34c] PUSH2 */
0x06,0xdc,/* constant data */
0x56, /* [847'0x34f] JUMP */
0x5b, /* [848'0x350] JUMPDEST */
0x60, /* [849'0x351] PUSH1 */
0x40,/* constant data */
0x51, /* [851'0x353] MLOAD */
0x80, /* [852'0x354] DUP1 */
0x82, /* [853'0x355] DUP3 */
0x81, /* [854'0x356] DUP2 */
0x52, /* [855'0x357] MSTORE */
0x60, /* [856'0x358] PUSH1 */
0x20,/* constant data */
0x01, /* [858'0x35a] ADD */
0x91, /* [859'0x35b] SWAP2 */
0x50, /* [860'0x35c] POP */
0x50, /* [861'0x35d] POP */
0x60, /* [862'0x35e] PUSH1 */
0x40,/* constant data */
0x51, /* [864'0x360] MLOAD */
0x80, /* [865'0x361] DUP1 */
0x91, /* [866'0x362] SWAP2 */
0x03, /* [867'0x363] SUB */
0x90, /* [868'0x364] SWAP1 */
0xf3, /* [869'0x365] RETURN */
0x5b, /* [870'0x366] JUMPDEST */
0x61, /* [871'0x367] PUSH2 */
0x03,0x6e,/* constant data */
0x61, /* [874'0x36a] PUSH2 */
0x06,0xe2,/* constant data */
0x56, /* [877'0x36d] JUMP */
0x5b, /* [878'0x36e] JUMPDEST */
0x00, /* [879'0x36f] STOP */
0x5b, /* [880'0x370] JUMPDEST */
0x34, /* [881'0x371] CALLVALUE */
0x80, /* [882'0x372] DUP1 */
0x15, /* [883'0x373] ISZERO */
0x61, /* [884'0x374] PUSH2 */
0x03,0x7c,/* constant data */
0x57, /* [887'0x377] JUMPI */
0x60, /* [888'0x378] PUSH1 */
0x00,/* constant data */
0x80, /* [890'0x37a] DUP1 */
0xfd, /* [891'0x37b] REVERT */
0x5b, /* [892'0x37c] JUMPDEST */
0x50, /* [893'0x37d] POP */
0x61, /* [894'0x37e] PUSH2 */
0x03,0xbf,/* constant data */
0x60, /* [897'0x381] PUSH1 */
0x04,/* constant data */
0x80, /* [899'0x383] DUP1 */
0x36, /* [900'0x384] CALLDATASIZE */
0x03, /* [901'0x385] SUB */
0x60, /* [902'0x386] PUSH1 */
0x20,/* constant data */
0x81, /* [904'0x388] DUP2 */
0x10, /* [905'0x389] LT */
0x15, /* [906'0x38a] ISZERO */
0x61, /* [907'0x38b] PUSH2 */
0x03,0x93,/* constant data */
0x57, /* [910'0x38e] JUMPI */
0x60, /* [911'0x38f] PUSH1 */
0x00,/* constant data */
0x80, /* [913'0x391] DUP1 */
0xfd, /* [914'0x392] REVERT */
0x5b, /* [915'0x393] JUMPDEST */
0x81, /* [916'0x394] DUP2 */
0x01, /* [917'0x395] ADD */
0x90, /* [918'0x396] SWAP1 */
0x80, /* [919'0x397] DUP1 */
0x80, /* [920'0x398] DUP1 */
0x35, /* [921'0x399] CALLDATALOAD */
0x73, /* [922'0x39a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [943'0x3af] AND */
0x90, /* [944'0x3b0] SWAP1 */
0x60, /* [945'0x3b1] PUSH1 */
0x20,/* constant data */
0x01, /* [947'0x3b3] ADD */
0x90, /* [948'0x3b4] SWAP1 */
0x92, /* [949'0x3b5] SWAP3 */
0x91, /* [950'0x3b6] SWAP2 */
0x90, /* [951'0x3b7] SWAP1 */
0x50, /* [952'0x3b8] POP */
0x50, /* [953'0x3b9] POP */
0x50, /* [954'0x3ba] POP */
0x61, /* [955'0x3bb] PUSH2 */
0x07,0x6d,/* constant data */
0x56, /* [958'0x3be] JUMP */
0x5b, /* [959'0x3bf] JUMPDEST */
0x60, /* [960'0x3c0] PUSH1 */
0x40,/* constant data */
0x51, /* [962'0x3c2] MLOAD */
0x80, /* [963'0x3c3] DUP1 */
0x82, /* [964'0x3c4] DUP3 */
0x81, /* [965'0x3c5] DUP2 */
0x52, /* [966'0x3c6] MSTORE */
0x60, /* [967'0x3c7] PUSH1 */
0x20,/* constant data */
0x01, /* [969'0x3c9] ADD */
0x91, /* [970'0x3ca] SWAP2 */
0x50, /* [971'0x3cb] POP */
0x50, /* [972'0x3cc] POP */
0x60, /* [973'0x3cd] PUSH1 */
0x40,/* constant data */
0x51, /* [975'0x3cf] MLOAD */
0x80, /* [976'0x3d0] DUP1 */
0x91, /* [977'0x3d1] SWAP2 */
0x03, /* [978'0x3d2] SUB */
0x90, /* [979'0x3d3] SWAP1 */
0xf3, /* [980'0x3d4] RETURN */
0x5b, /* [981'0x3d5] JUMPDEST */
0x60, /* [982'0x3d6] PUSH1 */
0x02,/* constant data */
0x54, /* [984'0x3d8] SLOAD */
0x42, /* [985'0x3d9] TIMESTAMP */
0x10, /* [986'0x3da] LT */
0x15, /* [987'0x3db] ISZERO */
0x80, /* [988'0x3dc] DUP1 */
0x15, /* [989'0x3dd] ISZERO */
0x61, /* [990'0x3de] PUSH2 */
0x03,0xe9,/* constant data */
0x57, /* [993'0x3e1] JUMPI */
0x50, /* [994'0x3e2] POP */
0x60, /* [995'0x3e3] PUSH1 */
0x00,/* constant data */
0x60, /* [997'0x3e5] PUSH1 */
0x01,/* constant data */
0x54, /* [999'0x3e7] SLOAD */
0x14, /* [1000'0x3e8] EQ */
0x5b, /* [1001'0x3e9] JUMPDEST */
0x61, /* [1002'0x3ea] PUSH2 */
0x03,0xf2,/* constant data */
0x57, /* [1005'0x3ed] JUMPI */
0x60, /* [1006'0x3ee] PUSH1 */
0x00,/* constant data */
0x80, /* [1008'0x3f0] DUP1 */
0xfd, /* [1009'0x3f1] REVERT */
0x5b, /* [1010'0x3f2] JUMPDEST */
0x60, /* [1011'0x3f3] PUSH1 */
0x03,/* constant data */
0x60, /* [1013'0x3f5] PUSH1 */
0x05,/* constant data */
0x81, /* [1015'0x3f7] DUP2 */
0x90, /* [1016'0x3f8] SWAP1 */
0x55, /* [1017'0x3f9] SSTORE */
0x50, /* [1018'0x3fa] POP */
0x56, /* [1019'0x3fb] JUMP */
0x5b, /* [1020'0x3fc] JUMPDEST */
0x80, /* [1021'0x3fd] DUP1 */
0x60, /* [1022'0x3fe] PUSH1 */
0x03,/* constant data */
0x60, /* [1024'0x400] PUSH1 */
0x00,/* constant data */
0x61, /* [1026'0x402] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [1029'0x405] EXP */
0x81, /* [1030'0x406] DUP2 */
0x54, /* [1031'0x407] SLOAD */
0x81, /* [1032'0x408] DUP2 */
0x73, /* [1033'0x409] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [1054'0x41e] MUL */
0x19, /* [1055'0x41f] NOT */
0x16, /* [1056'0x420] AND */
0x90, /* [1057'0x421] SWAP1 */
0x83, /* [1058'0x422] DUP4 */
0x73, /* [1059'0x423] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1080'0x438] AND */
0x02, /* [1081'0x439] MUL */
0x17, /* [1082'0x43a] OR */
0x90, /* [1083'0x43b] SWAP1 */
0x55, /* [1084'0x43c] SSTORE */
0x50, /* [1085'0x43d] POP */
0x50, /* [1086'0x43e] POP */
0x56, /* [1087'0x43f] JUMP */
0x5b, /* [1088'0x440] JUMPDEST */
0x60, /* [1089'0x441] PUSH1 */
0x00,/* constant data */
0x80, /* [1091'0x443] DUP1 */
0x60, /* [1092'0x444] PUSH1 */
0x05,/* constant data */
0x54, /* [1094'0x446] SLOAD */
0x14, /* [1095'0x447] EQ */
0x90, /* [1096'0x448] SWAP1 */
0x50, /* [1097'0x449] POP */
0x90, /* [1098'0x44a] SWAP1 */
0x56, /* [1099'0x44b] JUMP */
0x5b, /* [1100'0x44c] JUMPDEST */
0x60, /* [1101'0x44d] PUSH1 */
0x02,/* constant data */
0x81, /* [1103'0x44f] DUP2 */
0x56, /* [1104'0x450] JUMP */
0x5b, /* [1105'0x451] JUMPDEST */
0x60, /* [1106'0x452] PUSH1 */
0x02,/* constant data */
0x54, /* [1108'0x454] SLOAD */
0x42, /* [1109'0x455] TIMESTAMP */
0x10, /* [1110'0x456] LT */
0x15, /* [1111'0x457] ISZERO */
0x61, /* [1112'0x458] PUSH2 */
0x04,0x60,/* constant data */
0x57, /* [1115'0x45b] JUMPI */
0x60, /* [1116'0x45c] PUSH1 */
0x00,/* constant data */
0x80, /* [1118'0x45e] DUP1 */
0xfd, /* [1119'0x45f] REVERT */
0x5b, /* [1120'0x460] JUMPDEST */
0x60, /* [1121'0x461] PUSH1 */
0x01,/* constant data */
0x81, /* [1123'0x463] DUP2 */
0x14, /* [1124'0x464] EQ */
0x80, /* [1125'0x465] DUP1 */
0x15, /* [1126'0x466] ISZERO */
0x61, /* [1127'0x467] PUSH2 */
0x04,0x74,/* constant data */
0x57, /* [1130'0x46a] JUMPI */
0x50, /* [1131'0x46b] POP */
0x60, /* [1132'0x46c] PUSH1 */
0x00,/* constant data */
0x54, /* [1134'0x46e] SLOAD */
0x60, /* [1135'0x46f] PUSH1 */
0x01,/* constant data */
0x54, /* [1137'0x471] SLOAD */
0x10, /* [1138'0x472] LT */
0x15, /* [1139'0x473] ISZERO */
0x5b, /* [1140'0x474] JUMPDEST */
0x80, /* [1141'0x475] DUP1 */
0x61, /* [1142'0x476] PUSH2 */
0x04,0x8e,/* constant data */
0x57, /* [1145'0x479] JUMPI */
0x50, /* [1146'0x47a] POP */
0x60, /* [1147'0x47b] PUSH1 */
0x02,/* constant data */
0x81, /* [1149'0x47d] DUP2 */
0x14, /* [1150'0x47e] EQ */
0x80, /* [1151'0x47f] DUP1 */
0x15, /* [1152'0x480] ISZERO */
0x61, /* [1153'0x481] PUSH2 */
0x04,0x8d,/* constant data */
0x57, /* [1156'0x484] JUMPI */
0x50, /* [1157'0x485] POP */
0x60, /* [1158'0x486] PUSH1 */
0x00,/* constant data */
0x54, /* [1160'0x488] SLOAD */
0x60, /* [1161'0x489] PUSH1 */
0x01,/* constant data */
0x54, /* [1163'0x48b] SLOAD */
0x10, /* [1164'0x48c] LT */
0x5b, /* [1165'0x48d] JUMPDEST */
0x5b, /* [1166'0x48e] JUMPDEST */
0x80, /* [1167'0x48f] DUP1 */
0x61, /* [1168'0x490] PUSH2 */
0x04,0xa7,/* constant data */
0x57, /* [1171'0x493] JUMPI */
0x50, /* [1172'0x494] POP */
0x60, /* [1173'0x495] PUSH1 */
0x03,/* constant data */
0x81, /* [1175'0x497] DUP2 */
0x14, /* [1176'0x498] EQ */
0x80, /* [1177'0x499] DUP1 */
0x15, /* [1178'0x49a] ISZERO */
0x61, /* [1179'0x49b] PUSH2 */
0x04,0xa6,/* constant data */
0x57, /* [1182'0x49e] JUMPI */
0x50, /* [1183'0x49f] POP */
0x60, /* [1184'0x4a0] PUSH1 */
0x00,/* constant data */
0x60, /* [1186'0x4a2] PUSH1 */
0x01,/* constant data */
0x54, /* [1188'0x4a4] SLOAD */
0x14, /* [1189'0x4a5] EQ */
0x5b, /* [1190'0x4a6] JUMPDEST */
0x5b, /* [1191'0x4a7] JUMPDEST */
0x61, /* [1192'0x4a8] PUSH2 */
0x04,0xb0,/* constant data */
0x57, /* [1195'0x4ab] JUMPI */
0x60, /* [1196'0x4ac] PUSH1 */
0x00,/* constant data */
0x80, /* [1198'0x4ae] DUP1 */
0xfd, /* [1199'0x4af] REVERT */
0x5b, /* [1200'0x4b0] JUMPDEST */
0x80, /* [1201'0x4b1] DUP1 */
0x60, /* [1202'0x4b2] PUSH1 */
0x05,/* constant data */
0x81, /* [1204'0x4b4] DUP2 */
0x90, /* [1205'0x4b5] SWAP1 */
0x55, /* [1206'0x4b6] SSTORE */
0x50, /* [1207'0x4b7] POP */
0x50, /* [1208'0x4b8] POP */
0x56, /* [1209'0x4b9] JUMP */
0x5b, /* [1210'0x4ba] JUMPDEST */
0x60, /* [1211'0x4bb] PUSH1 */
0x01,/* constant data */
0x60, /* [1213'0x4bd] PUSH1 */
0x05,/* constant data */
0x54, /* [1215'0x4bf] SLOAD */
0x14, /* [1216'0x4c0] EQ */
0x61, /* [1217'0x4c1] PUSH2 */
0x04,0xc9,/* constant data */
0x57, /* [1220'0x4c4] JUMPI */
0x60, /* [1221'0x4c5] PUSH1 */
0x00,/* constant data */
0x80, /* [1223'0x4c7] DUP1 */
0xfd, /* [1224'0x4c8] REVERT */
0x5b, /* [1225'0x4c9] JUMPDEST */
0x60, /* [1226'0x4ca] PUSH1 */
0x03,/* constant data */
0x60, /* [1228'0x4cc] PUSH1 */
0x00,/* constant data */
0x90, /* [1230'0x4ce] SWAP1 */
0x54, /* [1231'0x4cf] SLOAD */
0x90, /* [1232'0x4d0] SWAP1 */
0x61, /* [1233'0x4d1] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [1236'0x4d4] EXP */
0x90, /* [1237'0x4d5] SWAP1 */
0x04, /* [1238'0x4d6] DIV */
0x73, /* [1239'0x4d7] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1260'0x4ec] AND */
0x73, /* [1261'0x4ed] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1282'0x502] AND */
0x61, /* [1283'0x503] PUSH2 */
0x08,0xfc,/* constant data */
0x47, /* [1286'0x506] SELFBALANCE */
0x90, /* [1287'0x507] SWAP1 */
0x81, /* [1288'0x508] DUP2 */
0x15, /* [1289'0x509] ISZERO */
0x02, /* [1290'0x50a] MUL */
0x90, /* [1291'0x50b] SWAP1 */
0x60, /* [1292'0x50c] PUSH1 */
0x40,/* constant data */
0x51, /* [1294'0x50e] MLOAD */
0x60, /* [1295'0x50f] PUSH1 */
0x00,/* constant data */
0x60, /* [1297'0x511] PUSH1 */
0x40,/* constant data */
0x51, /* [1299'0x513] MLOAD */
0x80, /* [1300'0x514] DUP1 */
0x83, /* [1301'0x515] DUP4 */
0x03, /* [1302'0x516] SUB */
0x81, /* [1303'0x517] DUP2 */
0x85, /* [1304'0x518] DUP6 */
0x88, /* [1305'0x519] DUP9 */
0x88, /* [1306'0x51a] DUP9 */
0xf1, /* [1307'0x51b] CALL */
0x93, /* [1308'0x51c] SWAP4 */
0x50, /* [1309'0x51d] POP */
0x50, /* [1310'0x51e] POP */
0x50, /* [1311'0x51f] POP */
0x50, /* [1312'0x520] POP */
0x15, /* [1313'0x521] ISZERO */
0x80, /* [1314'0x522] DUP1 */
0x15, /* [1315'0x523] ISZERO */
0x61, /* [1316'0x524] PUSH2 */
0x05,0x31,/* constant data */
0x57, /* [1319'0x527] JUMPI */
0x3d, /* [1320'0x528] RETURNDATASIZE */
0x60, /* [1321'0x529] PUSH1 */
0x00,/* constant data */
0x80, /* [1323'0x52b] DUP1 */
0x3e, /* [1324'0x52c] RETURNDATACOPY */
0x3d, /* [1325'0x52d] RETURNDATASIZE */
0x60, /* [1326'0x52e] PUSH1 */
0x00,/* constant data */
0xfd, /* [1328'0x530] REVERT */
0x5b, /* [1329'0x531] JUMPDEST */
0x50, /* [1330'0x532] POP */
0x60, /* [1331'0x533] PUSH1 */
0x03,/* constant data */
0x60, /* [1333'0x535] PUSH1 */
0x05,/* constant data */
0x81, /* [1335'0x537] DUP2 */
0x90, /* [1336'0x538] SWAP1 */
0x55, /* [1337'0x539] SSTORE */
0x50, /* [1338'0x53a] POP */
0x56, /* [1339'0x53b] JUMP */
0x5b, /* [1340'0x53c] JUMPDEST */
0x60, /* [1341'0x53d] PUSH1 */
0x02,/* constant data */
0x60, /* [1343'0x53f] PUSH1 */
0x05,/* constant data */
0x54, /* [1345'0x541] SLOAD */
0x14, /* [1346'0x542] EQ */
0x61, /* [1347'0x543] PUSH2 */
0x05,0x4b,/* constant data */
0x57, /* [1350'0x546] JUMPI */
0x60, /* [1351'0x547] PUSH1 */
0x00,/* constant data */
0x80, /* [1353'0x549] DUP1 */
0xfd, /* [1354'0x54a] REVERT */
0x5b, /* [1355'0x54b] JUMPDEST */
0x60, /* [1356'0x54c] PUSH1 */
0x00,/* constant data */
0x60, /* [1358'0x54e] PUSH1 */
0x04,/* constant data */
0x60, /* [1360'0x550] PUSH1 */
0x00,/* constant data */
0x33, /* [1362'0x552] CALLER */
0x73, /* [1363'0x553] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1384'0x568] AND */
0x73, /* [1385'0x569] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1406'0x57e] AND */
0x81, /* [1407'0x57f] DUP2 */
0x52, /* [1408'0x580] MSTORE */
0x60, /* [1409'0x581] PUSH1 */
0x20,/* constant data */
0x01, /* [1411'0x583] ADD */
0x90, /* [1412'0x584] SWAP1 */
0x81, /* [1413'0x585] DUP2 */
0x52, /* [1414'0x586] MSTORE */
0x60, /* [1415'0x587] PUSH1 */
0x20,/* constant data */
0x01, /* [1417'0x589] ADD */
0x60, /* [1418'0x58a] PUSH1 */
0x00,/* constant data */
0x20, /* [1420'0x58c] SHA3 */
0x54, /* [1421'0x58d] SLOAD */
0x90, /* [1422'0x58e] SWAP1 */
0x50, /* [1423'0x58f] POP */
0x80, /* [1424'0x590] DUP1 */
0x60, /* [1425'0x591] PUSH1 */
0x01,/* constant data */
0x54, /* [1427'0x593] SLOAD */
0x10, /* [1428'0x594] LT */
0x15, /* [1429'0x595] ISZERO */
0x61, /* [1430'0x596] PUSH2 */
0x05,0x9b,/* constant data */
0x57, /* [1433'0x599] JUMPI */
0xfe, /* [1434'0x59a] INVALID */
0x5b, /* [1435'0x59b] JUMPDEST */
0x80, /* [1436'0x59c] DUP1 */
0x60, /* [1437'0x59d] PUSH1 */
0x01,/* constant data */
0x60, /* [1439'0x59f] PUSH1 */
0x00,/* constant data */
0x82, /* [1441'0x5a1] DUP3 */
0x82, /* [1442'0x5a2] DUP3 */
0x54, /* [1443'0x5a3] SLOAD */
0x03, /* [1444'0x5a4] SUB */
0x92, /* [1445'0x5a5] SWAP3 */
0x50, /* [1446'0x5a6] POP */
0x50, /* [1447'0x5a7] POP */
0x81, /* [1448'0x5a8] DUP2 */
0x90, /* [1449'0x5a9] SWAP1 */
0x55, /* [1450'0x5aa] SSTORE */
0x50, /* [1451'0x5ab] POP */
0x33, /* [1452'0x5ac] CALLER */
0x73, /* [1453'0x5ad] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1474'0x5c2] AND */
0x61, /* [1475'0x5c3] PUSH2 */
0x08,0xfc,/* constant data */
0x82, /* [1478'0x5c6] DUP3 */
0x90, /* [1479'0x5c7] SWAP1 */
0x81, /* [1480'0x5c8] DUP2 */
0x15, /* [1481'0x5c9] ISZERO */
0x02, /* [1482'0x5ca] MUL */
0x90, /* [1483'0x5cb] SWAP1 */
0x60, /* [1484'0x5cc] PUSH1 */
0x40,/* constant data */
0x51, /* [1486'0x5ce] MLOAD */
0x60, /* [1487'0x5cf] PUSH1 */
0x00,/* constant data */
0x60, /* [1489'0x5d1] PUSH1 */
0x40,/* constant data */
0x51, /* [1491'0x5d3] MLOAD */
0x80, /* [1492'0x5d4] DUP1 */
0x83, /* [1493'0x5d5] DUP4 */
0x03, /* [1494'0x5d6] SUB */
0x81, /* [1495'0x5d7] DUP2 */
0x85, /* [1496'0x5d8] DUP6 */
0x88, /* [1497'0x5d9] DUP9 */
0x88, /* [1498'0x5da] DUP9 */
0xf1, /* [1499'0x5db] CALL */
0x93, /* [1500'0x5dc] SWAP4 */
0x50, /* [1501'0x5dd] POP */
0x50, /* [1502'0x5de] POP */
0x50, /* [1503'0x5df] POP */
0x50, /* [1504'0x5e0] POP */
0x15, /* [1505'0x5e1] ISZERO */
0x80, /* [1506'0x5e2] DUP1 */
0x15, /* [1507'0x5e3] ISZERO */
0x61, /* [1508'0x5e4] PUSH2 */
0x05,0xf1,/* constant data */
0x57, /* [1511'0x5e7] JUMPI */
0x3d, /* [1512'0x5e8] RETURNDATASIZE */
0x60, /* [1513'0x5e9] PUSH1 */
0x00,/* constant data */
0x80, /* [1515'0x5eb] DUP1 */
0x3e, /* [1516'0x5ec] RETURNDATACOPY */
0x3d, /* [1517'0x5ed] RETURNDATASIZE */
0x60, /* [1518'0x5ee] PUSH1 */
0x00,/* constant data */
0xfd, /* [1520'0x5f0] REVERT */
0x5b, /* [1521'0x5f1] JUMPDEST */
0x50, /* [1522'0x5f2] POP */
0x60, /* [1523'0x5f3] PUSH1 */
0x00,/* constant data */
0x60, /* [1525'0x5f5] PUSH1 */
0x04,/* constant data */
0x60, /* [1527'0x5f7] PUSH1 */
0x00,/* constant data */
0x33, /* [1529'0x5f9] CALLER */
0x73, /* [1530'0x5fa] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1551'0x60f] AND */
0x73, /* [1552'0x610] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1573'0x625] AND */
0x81, /* [1574'0x626] DUP2 */
0x52, /* [1575'0x627] MSTORE */
0x60, /* [1576'0x628] PUSH1 */
0x20,/* constant data */
0x01, /* [1578'0x62a] ADD */
0x90, /* [1579'0x62b] SWAP1 */
0x81, /* [1580'0x62c] DUP2 */
0x52, /* [1581'0x62d] MSTORE */
0x60, /* [1582'0x62e] PUSH1 */
0x20,/* constant data */
0x01, /* [1584'0x630] ADD */
0x60, /* [1585'0x631] PUSH1 */
0x00,/* constant data */
0x20, /* [1587'0x633] SHA3 */
0x81, /* [1588'0x634] DUP2 */
0x90, /* [1589'0x635] SWAP1 */
0x55, /* [1590'0x636] SSTORE */
0x50, /* [1591'0x637] POP */
0x50, /* [1592'0x638] POP */
0x56, /* [1593'0x639] JUMP */
0x5b, /* [1594'0x63a] JUMPDEST */
0x60, /* [1595'0x63b] PUSH1 */
0x03,/* constant data */
0x81, /* [1597'0x63d] DUP2 */
0x56, /* [1598'0x63e] JUMP */
0x5b, /* [1599'0x63f] JUMPDEST */
0x60, /* [1600'0x640] PUSH1 */
0x02,/* constant data */
0x54, /* [1602'0x642] SLOAD */
0x81, /* [1603'0x643] DUP2 */
0x56, /* [1604'0x644] JUMP */
0x5b, /* [1605'0x645] JUMPDEST */
0x60, /* [1606'0x646] PUSH1 */
0x00,/* constant data */
0x33, /* [1608'0x648] CALLER */
0x73, /* [1609'0x649] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1630'0x65e] AND */
0x60, /* [1631'0x65f] PUSH1 */
0x03,/* constant data */
0x60, /* [1633'0x661] PUSH1 */
0x00,/* constant data */
0x90, /* [1635'0x663] SWAP1 */
0x54, /* [1636'0x664] SLOAD */
0x90, /* [1637'0x665] SWAP1 */
0x61, /* [1638'0x666] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [1641'0x669] EXP */
0x90, /* [1642'0x66a] SWAP1 */
0x04, /* [1643'0x66b] DIV */
0x73, /* [1644'0x66c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1665'0x681] AND */
0x73, /* [1666'0x682] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1687'0x697] AND */
0x14, /* [1688'0x698] EQ */
0x80, /* [1689'0x699] DUP1 */
0x15, /* [1690'0x69a] ISZERO */
0x61, /* [1691'0x69b] PUSH2 */
0x06,0xa6,/* constant data */
0x57, /* [1694'0x69e] JUMPI */
0x50, /* [1695'0x69f] POP */
0x60, /* [1696'0x6a0] PUSH1 */
0x01,/* constant data */
0x60, /* [1698'0x6a2] PUSH1 */
0x05,/* constant data */
0x54, /* [1700'0x6a4] SLOAD */
0x14, /* [1701'0x6a5] EQ */
0x5b, /* [1702'0x6a6] JUMPDEST */
0x15, /* [1703'0x6a7] ISZERO */
0x90, /* [1704'0x6a8] SWAP1 */
0x50, /* [1705'0x6a9] POP */
0x90, /* [1706'0x6aa] SWAP1 */
0x56, /* [1707'0x6ab] JUMP */
0x5b, /* [1708'0x6ac] JUMPDEST */
0x60, /* [1709'0x6ad] PUSH1 */
0x00,/* constant data */
0x81, /* [1711'0x6af] DUP2 */
0x56, /* [1712'0x6b0] JUMP */
0x5b, /* [1713'0x6b1] JUMPDEST */
0x60, /* [1714'0x6b2] PUSH1 */
0x03,/* constant data */
0x60, /* [1716'0x6b4] PUSH1 */
0x00,/* constant data */
0x90, /* [1718'0x6b6] SWAP1 */
0x54, /* [1719'0x6b7] SLOAD */
0x90, /* [1720'0x6b8] SWAP1 */
0x61, /* [1721'0x6b9] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [1724'0x6bc] EXP */
0x90, /* [1725'0x6bd] SWAP1 */
0x04, /* [1726'0x6be] DIV */
0x73, /* [1727'0x6bf] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1748'0x6d4] AND */
0x81, /* [1749'0x6d5] DUP2 */
0x56, /* [1750'0x6d6] JUMP */
0x5b, /* [1751'0x6d7] JUMPDEST */
0x60, /* [1752'0x6d8] PUSH1 */
0x01,/* constant data */
0x81, /* [1754'0x6da] DUP2 */
0x56, /* [1755'0x6db] JUMP */
0x5b, /* [1756'0x6dc] JUMPDEST */
0x60, /* [1757'0x6dd] PUSH1 */
0x05,/* constant data */
0x54, /* [1759'0x6df] SLOAD */
0x81, /* [1760'0x6e0] DUP2 */
0x56, /* [1761'0x6e1] JUMP */
0x5b, /* [1762'0x6e2] JUMPDEST */
0x60, /* [1763'0x6e3] PUSH1 */
0x02,/* constant data */
0x54, /* [1765'0x6e5] SLOAD */
0x42, /* [1766'0x6e6] TIMESTAMP */
0x10, /* [1767'0x6e7] LT */
0x61, /* [1768'0x6e8] PUSH2 */
0x06,0xf0,/* constant data */
0x57, /* [1771'0x6eb] JUMPI */
0x60, /* [1772'0x6ec] PUSH1 */
0x00,/* constant data */
0x80, /* [1774'0x6ee] DUP1 */
0xfd, /* [1775'0x6ef] REVERT */
0x5b, /* [1776'0x6f0] JUMPDEST */
0x60, /* [1777'0x6f1] PUSH1 */
0x00,/* constant data */
0x60, /* [1779'0x6f3] PUSH1 */
0x05,/* constant data */
0x54, /* [1781'0x6f5] SLOAD */
0x14, /* [1782'0x6f6] EQ */
0x80, /* [1783'0x6f7] DUP1 */
0x15, /* [1784'0x6f8] ISZERO */
0x61, /* [1785'0x6f9] PUSH2 */
0x07,0x05,/* constant data */
0x57, /* [1788'0x6fc] JUMPI */
0x50, /* [1789'0x6fd] POP */
0x60, /* [1790'0x6fe] PUSH1 */
0x00,/* constant data */
0x54, /* [1792'0x700] SLOAD */
0x60, /* [1793'0x701] PUSH1 */
0x01,/* constant data */
0x54, /* [1795'0x703] SLOAD */
0x10, /* [1796'0x704] LT */
0x5b, /* [1797'0x705] JUMPDEST */
0x61, /* [1798'0x706] PUSH2 */
0x07,0x0e,/* constant data */
0x57, /* [1801'0x709] JUMPI */
0x60, /* [1802'0x70a] PUSH1 */
0x00,/* constant data */
0x80, /* [1804'0x70c] DUP1 */
0xfd, /* [1805'0x70d] REVERT */
0x5b, /* [1806'0x70e] JUMPDEST */
0x34, /* [1807'0x70f] CALLVALUE */
0x60, /* [1808'0x710] PUSH1 */
0x04,/* constant data */
0x60, /* [1810'0x712] PUSH1 */
0x00,/* constant data */
0x33, /* [1812'0x714] CALLER */
0x73, /* [1813'0x715] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1834'0x72a] AND */
0x73, /* [1835'0x72b] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1856'0x740] AND */
0x81, /* [1857'0x741] DUP2 */
0x52, /* [1858'0x742] MSTORE */
0x60, /* [1859'0x743] PUSH1 */
0x20,/* constant data */
0x01, /* [1861'0x745] ADD */
0x90, /* [1862'0x746] SWAP1 */
0x81, /* [1863'0x747] DUP2 */
0x52, /* [1864'0x748] MSTORE */
0x60, /* [1865'0x749] PUSH1 */
0x20,/* constant data */
0x01, /* [1867'0x74b] ADD */
0x60, /* [1868'0x74c] PUSH1 */
0x00,/* constant data */
0x20, /* [1870'0x74e] SHA3 */
0x60, /* [1871'0x74f] PUSH1 */
0x00,/* constant data */
0x82, /* [1873'0x751] DUP3 */
0x82, /* [1874'0x752] DUP3 */
0x54, /* [1875'0x753] SLOAD */
0x01, /* [1876'0x754] ADD */
0x92, /* [1877'0x755] SWAP3 */
0x50, /* [1878'0x756] POP */
0x50, /* [1879'0x757] POP */
0x81, /* [1880'0x758] DUP2 */
0x90, /* [1881'0x759] SWAP1 */
0x55, /* [1882'0x75a] SSTORE */
0x50, /* [1883'0x75b] POP */
0x34, /* [1884'0x75c] CALLVALUE */
0x60, /* [1885'0x75d] PUSH1 */
0x01,/* constant data */
0x60, /* [1887'0x75f] PUSH1 */
0x00,/* constant data */
0x82, /* [1889'0x761] DUP3 */
0x82, /* [1890'0x762] DUP3 */
0x54, /* [1891'0x763] SLOAD */
0x01, /* [1892'0x764] ADD */
0x92, /* [1893'0x765] SWAP3 */
0x50, /* [1894'0x766] POP */
0x50, /* [1895'0x767] POP */
0x81, /* [1896'0x768] DUP2 */
0x90, /* [1897'0x769] SWAP1 */
0x55, /* [1898'0x76a] SSTORE */
0x50, /* [1899'0x76b] POP */
0x56, /* [1900'0x76c] JUMP */
0x5b, /* [1901'0x76d] JUMPDEST */
0x60, /* [1902'0x76e] PUSH1 */
0x04,/* constant data */
0x60, /* [1904'0x770] PUSH1 */
0x20,/* constant data */
0x52, /* [1906'0x772] MSTORE */
0x80, /* [1907'0x773] DUP1 */
0x60, /* [1908'0x774] PUSH1 */
0x00,/* constant data */
0x52, /* [1910'0x776] MSTORE */
0x60, /* [1911'0x777] PUSH1 */
0x40,/* constant data */
0x60, /* [1913'0x779] PUSH1 */
0x00,/* constant data */
0x20, /* [1915'0x77b] SHA3 */
0x60, /* [1916'0x77c] PUSH1 */
0x00,/* constant data */
0x91, /* [1918'0x77e] SWAP2 */
0x50, /* [1919'0x77f] POP */
0x90, /* [1920'0x780] SWAP1 */
0x50, /* [1921'0x781] POP */
0x54, /* [1922'0x782] SLOAD */
0x81, /* [1923'0x783] DUP2 */
0x56, /* [1924'0x784] JUMP */
0xfe, /* [1925'0x785] INVALID */
0xa2, /* [1926'0x786] LOG2 */
0x64, /* [1927'0x787] PUSH5 */
0x69,0x70,0x66,0x73,0x58,/* constant data */
0x22, /* [1933'0x78d] INVALID' byte */
0x12, /* [1934'0x78e] SLT */
0x20, /* [1935'0x78f] SHA3 */
0xfb, /* [1936'0x790] INVALID' byte */
0x82, /* [1937'0x791] DUP3 */
0x0f, /* [1938'0x792] INVALID' byte */
0x5f, /* [1939'0x793] INVALID' byte */
0x36, /* [1940'0x794] CALLDATASIZE */
0x6b, /* [1941'0x795] PUSH12 */
0x85,0x28,0x69,0x68,0x3e,0x56,0x64,0xac,0x21,0xc4,0x58,0xe3,/* constant data */
0xb1, /* [1954'0x7a2] INVALID' byte */
0x00, /* [1955'0x7a3] STOP */
0x8e, /* [1956'0x7a4] DUP15 */
0x50, /* [1957'0x7a5] POP */
0x7f, /* [1958'0x7a6] PUSH32 */
0x3f,0xc4,0x58,0xbd,0x82,0xed,0xde,0x9b,0xcb,0x64,0x73,0x6f,0x6c,0x63,0x43,0x00,0x07,0x06,0x00,0x33,};

const eevm::Code& eevm::EVM2CPP_crowdsale::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_crowdsale::_contract_name = "crowdsale";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_crowdsale> eevm::EVM2CPP_crowdsale::reg{};
const std::string& eevm::EVM2CPP_crowdsale::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_3 = 0x3_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_5 = 0x5_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_59 = 0x59_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_8a = 0x8a_u256;
constexpr uint256_t c_c6 = 0xc6_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_f3 = 0xf3_u256;
constexpr uint256_t c_f8 = 0xf8_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_104 = 0x104_u256;
constexpr uint256_t c_10d = 0x10d_u256;
constexpr uint256_t c_10f = 0x10f_u256;
constexpr uint256_t c_11b = 0x11b_u256;
constexpr uint256_t c_132 = 0x132_u256;
constexpr uint256_t c_15e = 0x15e_u256;
constexpr uint256_t c_160 = 0x160_u256;
constexpr uint256_t c_16c = 0x16c_u256;
constexpr uint256_t c_175 = 0x175_u256;
constexpr uint256_t c_18d = 0x18d_u256;
constexpr uint256_t c_199 = 0x199_u256;
constexpr uint256_t c_1a2 = 0x1a2_u256;
constexpr uint256_t c_1b8 = 0x1b8_u256;
constexpr uint256_t c_1c4 = 0x1c4_u256;
constexpr uint256_t c_1db = 0x1db_u256;
constexpr uint256_t c_1f1 = 0x1f1_u256;
constexpr uint256_t c_1f3 = 0x1f3_u256;
constexpr uint256_t c_1ff = 0x1ff_u256;
constexpr uint256_t c_208 = 0x208_u256;
constexpr uint256_t c_20a = 0x20a_u256;
constexpr uint256_t c_216 = 0x216_u256;
constexpr uint256_t c_21f = 0x21f_u256;
constexpr uint256_t c_221 = 0x221_u256;
constexpr uint256_t c_22d = 0x22d_u256;
constexpr uint256_t c_236 = 0x236_u256;
constexpr uint256_t c_24c = 0x24c_u256;
constexpr uint256_t c_258 = 0x258_u256;
constexpr uint256_t c_261 = 0x261_u256;
constexpr uint256_t c_277 = 0x277_u256;
constexpr uint256_t c_283 = 0x283_u256;
constexpr uint256_t c_28c = 0x28c_u256;
constexpr uint256_t c_2a4 = 0x2a4_u256;
constexpr uint256_t c_2b0 = 0x2b0_u256;
constexpr uint256_t c_2b9 = 0x2b9_u256;
constexpr uint256_t c_2cf = 0x2cf_u256;
constexpr uint256_t c_2db = 0x2db_u256;
constexpr uint256_t c_2e4 = 0x2e4_u256;
constexpr uint256_t c_310 = 0x310_u256;
constexpr uint256_t c_31c = 0x31c_u256;
constexpr uint256_t c_325 = 0x325_u256;
constexpr uint256_t c_33b = 0x33b_u256;
constexpr uint256_t c_347 = 0x347_u256;
constexpr uint256_t c_350 = 0x350_u256;
constexpr uint256_t c_366 = 0x366_u256;
constexpr uint256_t c_36e = 0x36e_u256;
constexpr uint256_t c_370 = 0x370_u256;
constexpr uint256_t c_37c = 0x37c_u256;
constexpr uint256_t c_393 = 0x393_u256;
constexpr uint256_t c_3bf = 0x3bf_u256;
constexpr uint256_t c_3d5 = 0x3d5_u256;
constexpr uint256_t c_3e9 = 0x3e9_u256;
constexpr uint256_t c_3f2 = 0x3f2_u256;
constexpr uint256_t c_3fc = 0x3fc_u256;
constexpr uint256_t c_440 = 0x440_u256;
constexpr uint256_t c_44c = 0x44c_u256;
constexpr uint256_t c_451 = 0x451_u256;
constexpr uint256_t c_460 = 0x460_u256;
constexpr uint256_t c_474 = 0x474_u256;
constexpr uint256_t c_48d = 0x48d_u256;
constexpr uint256_t c_48e = 0x48e_u256;
constexpr uint256_t c_4a6 = 0x4a6_u256;
constexpr uint256_t c_4a7 = 0x4a7_u256;
constexpr uint256_t c_4b0 = 0x4b0_u256;
constexpr uint256_t c_4ba = 0x4ba_u256;
constexpr uint256_t c_4c9 = 0x4c9_u256;
constexpr uint256_t c_531 = 0x531_u256;
constexpr uint256_t c_53c = 0x53c_u256;
constexpr uint256_t c_54b = 0x54b_u256;
constexpr uint256_t c_59b = 0x59b_u256;
constexpr uint256_t c_5f1 = 0x5f1_u256;
constexpr uint256_t c_63a = 0x63a_u256;
constexpr uint256_t c_63f = 0x63f_u256;
constexpr uint256_t c_645 = 0x645_u256;
constexpr uint256_t c_6a6 = 0x6a6_u256;
constexpr uint256_t c_6ac = 0x6ac_u256;
constexpr uint256_t c_6b1 = 0x6b1_u256;
constexpr uint256_t c_6d7 = 0x6d7_u256;
constexpr uint256_t c_6dc = 0x6dc_u256;
constexpr uint256_t c_6e2 = 0x6e2_u256;
constexpr uint256_t c_6f0 = 0x6f0_u256;
constexpr uint256_t c_705 = 0x705_u256;
constexpr uint256_t c_70e = 0x70e_u256;
constexpr uint256_t c_76d = 0x76d_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_7da68f5 = 0x7da68f5_u256;
constexpr uint256_t c_13af4035 = 0x13af4035_u256;
constexpr uint256_t c_22f3e2d4 = 0x22f3e2d4_u256;
constexpr uint256_t c_232ddaaf = 0x232ddaaf_u256;
constexpr uint256_t c_2cc82655 = 0x2cc82655_u256;
constexpr uint256_t c_3ccfd60b = 0x3ccfd60b_u256;
constexpr uint256_t c_590e1ae3 = 0x590e1ae3_u256;
constexpr uint256_t c_61ac0dd9 = 0x61ac0dd9_u256;
constexpr uint256_t c_627749e6 = 0x627749e6_u256;
constexpr uint256_t c_71e2d86c = 0x71e2d86c_u256;
constexpr uint256_t c_8331cae5 = 0x8331cae5_u256;
constexpr uint256_t c_8da5cb5b = 0x8da5cb5b_u256;
constexpr uint256_t c_a8bf2789 = 0xa8bf2789_u256;
constexpr uint256_t c_b1c9fe6e = 0xb1c9fe6e_u256;
constexpr uint256_t c_e8b5e51f = 0xe8b5e51f_u256;
constexpr uint256_t c_fc7e286d = 0xfc7e286d_u256;
constexpr uint256_t g_118 = 0x3fc458bd82edde9bcb64736f6c63430007060033_u256;
constexpr uint256_t g_48 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_100 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_crowdsale::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_59,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_8a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_c6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f3,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_104,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_10d,
&&__invld,
&&pc_10f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_11b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_132,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_15e,
&&__invld,
&&pc_160,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_16c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_175,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_18d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_199,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1a2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1b8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1c4,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1db,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1f1,
&&__invld,
&&pc_1f3,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1ff,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_208,
&&__invld,
&&pc_20a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_216,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_21f,
&&__invld,
&&pc_221,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_22d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_236,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_24c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_258,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_261,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_277,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_283,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_28c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2a4,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2b0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2b9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2cf,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2db,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2e4,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_310,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_31c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_325,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_33b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_347,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_350,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_366,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_36e,
&&__invld,
&&pc_370,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_37c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_393,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3bf,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3d5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3e9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3f2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3fc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_440,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_44c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_451,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_460,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_474,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_48d,
&&pc_48e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4a6,
&&pc_4a7,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4b0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4ba,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4c9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_531,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_53c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_54b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_59b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_5f1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_63a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_63f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_645,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6a6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6ac,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6b1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6d7,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6dc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6e2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6f0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_705,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_70e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_76d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [243] */

/* JUMPI */
/* op_0 = Constant((6, 243)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_f3;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH1 */
/* val = [224] */

/* SHR */
/* op_0 = Constant((2, 224)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = shr_v(c_e0, v_1_0);


/* DUP1 */
/* op_0 = InstructionRef((3, 0)) */

/* PUSH4 */
/* val = [1651984870] */

/* GT */
/* op_0 = Constant((5, 1651984870)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_6_0 = gt_v(c_627749e6, v_3_0);


/* PUSH2 */
/* val = [138] */

/* JUMPI */
/* op_0 = Constant((7, 138)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
 
 goto pc_8a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
}pc_1e:
{ /* <============ */ 
on_bb_start(30);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2831099785] */

/* GT */
/* op_0 = Constant((1, 2831099785)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = gt_v(c_a8bf2789, s_0_0);


/* PUSH2 */
/* val = [89] */

/* JUMPI */
/* op_0 = Constant((3, 89)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_59;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_29:
{ /* <============ */ 
on_bb_start(41);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2831099785] */

/* EQ */
/* op_0 = Constant((1, 2831099785)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_a8bf2789, s_0_0);


/* PUSH2 */
/* val = [784] */

/* JUMPI */
/* op_0 = Constant((3, 784)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_310;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_34:
{ /* <============ */ 
on_bb_start(52);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2982805102] */

/* EQ */
/* op_0 = Constant((1, 2982805102)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_b1c9fe6e, s_0_0);


/* PUSH2 */
/* val = [827] */

/* JUMPI */
/* op_0 = Constant((3, 827)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_33b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f:
{ /* <============ */ 
on_bb_start(63);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3904234783] */

/* EQ */
/* op_0 = Constant((1, 3904234783)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_e8b5e51f, s_0_0);


/* PUSH2 */
/* val = [870] */

/* JUMPI */
/* op_0 = Constant((3, 870)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_366;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4a:
{ /* <============ */ 
on_bb_start(74);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [4236126317] */

/* EQ */
/* op_0 = Constant((1, 4236126317)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_fc7e286d, s_0_0);


/* PUSH2 */
/* val = [880] */

/* JUMPI */
/* op_0 = Constant((3, 880)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_370;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_55:
{ /* <============ */ 
on_bb_start(85);
/* PUSH2 */
/* val = [243] */

/* JUMP */
/* op_0 = Constant((0, 243)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_f3;


}pc_59:
{ /* <============ */ 
on_bb_start(89);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1651984870] */

/* EQ */
/* op_0 = Constant((2, 1651984870)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_3_0 = eq_v(c_627749e6, s_0_0);


/* PUSH2 */
/* val = [588] */

/* JUMPI */
/* op_0 = Constant((4, 588)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_24c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_65:
{ /* <============ */ 
on_bb_start(101);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1910691948] */

/* EQ */
/* op_0 = Constant((1, 1910691948)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_71e2d86c, s_0_0);


/* PUSH2 */
/* val = [631] */

/* JUMPI */
/* op_0 = Constant((3, 631)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_277;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_70:
{ /* <============ */ 
on_bb_start(112);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2201078501] */

/* EQ */
/* op_0 = Constant((1, 2201078501)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_8331cae5, s_0_0);


/* PUSH2 */
/* val = [676] */

/* JUMPI */
/* op_0 = Constant((3, 676)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_2a4;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7b:
{ /* <============ */ 
on_bb_start(123);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2376452955] */

/* EQ */
/* op_0 = Constant((1, 2376452955)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_8da5cb5b, s_0_0);


/* PUSH2 */
/* val = [719] */

/* JUMPI */
/* op_0 = Constant((3, 719)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_2cf;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_86:
{ /* <============ */ 
on_bb_start(134);
/* PUSH2 */
/* val = [243] */

/* JUMP */
/* op_0 = Constant((0, 243)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_f3;


}pc_8a:
{ /* <============ */ 
on_bb_start(138);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [751314517] */

/* GT */
/* op_0 = Constant((2, 751314517)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_3_0 = gt_v(c_2cc82655, s_0_0);


/* PUSH2 */
/* val = [198] */

/* JUMPI */
/* op_0 = Constant((4, 198)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_c6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_96:
{ /* <============ */ 
on_bb_start(150);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [751314517] */

/* EQ */
/* op_0 = Constant((1, 751314517)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_2cc82655, s_0_0);


/* PUSH2 */
/* val = [440] */

/* JUMPI */
/* op_0 = Constant((3, 440)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1b8;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_a1:
{ /* <============ */ 
on_bb_start(161);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1020253707] */

/* EQ */
/* op_0 = Constant((1, 1020253707)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_3ccfd60b, s_0_0);


/* PUSH2 */
/* val = [499] */

/* JUMPI */
/* op_0 = Constant((3, 499)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1f3;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ac:
{ /* <============ */ 
on_bb_start(172);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1494096611] */

/* EQ */
/* op_0 = Constant((1, 1494096611)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_590e1ae3, s_0_0);


/* PUSH2 */
/* val = [522] */

/* JUMPI */
/* op_0 = Constant((3, 522)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_20a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_b7:
{ /* <============ */ 
on_bb_start(183);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1638665689] */

/* EQ */
/* op_0 = Constant((1, 1638665689)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_61ac0dd9, s_0_0);


/* PUSH2 */
/* val = [545] */

/* JUMPI */
/* op_0 = Constant((3, 545)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_221;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c2:
{ /* <============ */ 
on_bb_start(194);
/* PUSH2 */
/* val = [243] */

/* JUMP */
/* op_0 = Constant((0, 243)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_f3;


}pc_c6:
{ /* <============ */ 
on_bb_start(198);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [131754229] */

/* EQ */
/* op_0 = Constant((2, 131754229)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_3_0 = eq_v(c_7da68f5, s_0_0);


/* PUSH2 */
/* val = [248] */

/* JUMPI */
/* op_0 = Constant((4, 248)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_f8;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d2:
{ /* <============ */ 
on_bb_start(210);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [330252341] */

/* EQ */
/* op_0 = Constant((1, 330252341)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_13af4035, s_0_0);


/* PUSH2 */
/* val = [271] */

/* JUMPI */
/* op_0 = Constant((3, 271)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_10f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_dd:
{ /* <============ */ 
on_bb_start(221);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [586408660] */

/* EQ */
/* op_0 = Constant((1, 586408660)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_22f3e2d4, s_0_0);


/* PUSH2 */
/* val = [352] */

/* JUMPI */
/* op_0 = Constant((3, 352)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_160;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_e8:
{ /* <============ */ 
on_bb_start(232);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [590207663] */

/* EQ */
/* op_0 = Constant((1, 590207663)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_232ddaaf, s_0_0);


/* PUSH2 */
/* val = [397] */

/* JUMPI */
/* op_0 = Constant((3, 397)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_18d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_f3:
{ /* <============ */ 
on_bb_start(243);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_f8:
{ /* <============ */ 
on_bb_start(248);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [260] */

/* JUMPI */
/* op_0 = Constant((4, 260)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_104;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_100:
{ /* <============ */ 
on_bb_start(256);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_104:
{ /* <============ */ 
on_bb_start(260);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [269] */

/* PUSH2 */
/* val = [981] */

/* JUMP */
/* op_0 = Constant((3, 981)) */
/* BB finalizer */
ctxt->s.set(0, c_10d);
/* no pops at end */
/* no BB returns */

goto pc_3d5;


}pc_10d:
{ /* <============ */ 
on_bb_start(269);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_10f:
{ /* <============ */ 
on_bb_start(271);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [283] */

/* JUMPI */
/* op_0 = Constant((4, 283)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_11b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_117:
{ /* <============ */ 
on_bb_start(279);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_11b:
{ /* <============ */ 
on_bb_start(283);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [350] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [306] */

/* JUMPI */
/* op_0 = Constant((11, 306)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_15e);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_132;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_15e);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_12e:
{ /* <============ */ 
on_bb_start(302);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_132:
{ /* <============ */ 
on_bb_start(306);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_1, s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_6_0 = calldataload_v(s_0_1);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_48, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_11_0 = add_v(c_20, s_0_1);


/* SWAP1 */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((2, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((11, 0)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [1020] */

/* JUMP */
/* op_0 = Constant((19, 1020)) */
/* BB finalizer */
ctxt->s.set(1, v_8_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_3fc;


}pc_15e:
{ /* <============ */ 
on_bb_start(350);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_160:
{ /* <============ */ 
on_bb_start(352);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [364] */

/* JUMPI */
/* op_0 = Constant((4, 364)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_16c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_168:
{ /* <============ */ 
on_bb_start(360);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_16c:
{ /* <============ */ 
on_bb_start(364);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [373] */

/* PUSH2 */
/* val = [1088] */

/* JUMP */
/* op_0 = Constant((3, 1088)) */
/* BB finalizer */
ctxt->s.set(0, c_175);
/* no pops at end */
/* no BB returns */

goto pc_440;


}pc_175:
{ /* <============ */ 
on_bb_start(373);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_5_0 = iszero_v(s_0_0);


/* ISZERO */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = iszero_v(v_5_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((6, 0)) */
mstore_v(v_2_0, v_6_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((9, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_10_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((10, 0)) */

/* SUB */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_10_0, v_15_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((15, 0)) */

/* RETURN */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
return_v(v_15_0, v_18_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_18d:
{ /* <============ */ 
on_bb_start(397);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [409] */

/* JUMPI */
/* op_0 = Constant((4, 409)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_199;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_195:
{ /* <============ */ 
on_bb_start(405);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_199:
{ /* <============ */ 
on_bb_start(409);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [418] */

/* PUSH2 */
/* val = [1100] */

/* JUMP */
/* op_0 = Constant((3, 1100)) */
/* BB finalizer */
ctxt->s.set(0, c_1a2);
/* no pops at end */
/* no BB returns */

goto pc_44c;


}pc_1a2:
{ /* <============ */ 
on_bb_start(418);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_1b8:
{ /* <============ */ 
on_bb_start(440);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [452] */

/* JUMPI */
/* op_0 = Constant((4, 452)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_1c4;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_1c0:
{ /* <============ */ 
on_bb_start(448);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1c4:
{ /* <============ */ 
on_bb_start(452);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [497] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [475] */

/* JUMPI */
/* op_0 = Constant((11, 475)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_1f1);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_1db;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_1f1);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_1d7:
{ /* <============ */ 
on_bb_start(471);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1db:
{ /* <============ */ 
on_bb_start(475);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_1, s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_6_0 = calldataload_v(s_0_1);


/* SWAP1 */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((8, 32)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_9_0 = add_v(c_20, s_0_1);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((6, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = InstructionRef((2, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((9, 0)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [1105] */

/* JUMP */
/* op_0 = Constant((17, 1105)) */
/* BB finalizer */
ctxt->s.set(1, v_6_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_451;


}pc_1f1:
{ /* <============ */ 
on_bb_start(497);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1f3:
{ /* <============ */ 
on_bb_start(499);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [511] */

/* JUMPI */
/* op_0 = Constant((4, 511)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_1ff;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_1fb:
{ /* <============ */ 
on_bb_start(507);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1ff:
{ /* <============ */ 
on_bb_start(511);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [520] */

/* PUSH2 */
/* val = [1210] */

/* JUMP */
/* op_0 = Constant((3, 1210)) */
/* BB finalizer */
ctxt->s.set(0, c_208);
/* no pops at end */
/* no BB returns */

goto pc_4ba;


}pc_208:
{ /* <============ */ 
on_bb_start(520);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_20a:
{ /* <============ */ 
on_bb_start(522);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [534] */

/* JUMPI */
/* op_0 = Constant((4, 534)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_216;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_212:
{ /* <============ */ 
on_bb_start(530);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_216:
{ /* <============ */ 
on_bb_start(534);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [543] */

/* PUSH2 */
/* val = [1340] */

/* JUMP */
/* op_0 = Constant((3, 1340)) */
/* BB finalizer */
ctxt->s.set(0, c_21f);
/* no pops at end */
/* no BB returns */

goto pc_53c;


}pc_21f:
{ /* <============ */ 
on_bb_start(543);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_221:
{ /* <============ */ 
on_bb_start(545);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [557] */

/* JUMPI */
/* op_0 = Constant((4, 557)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_22d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_229:
{ /* <============ */ 
on_bb_start(553);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_22d:
{ /* <============ */ 
on_bb_start(557);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [566] */

/* PUSH2 */
/* val = [1594] */

/* JUMP */
/* op_0 = Constant((3, 1594)) */
/* BB finalizer */
ctxt->s.set(0, c_236);
/* no pops at end */
/* no BB returns */

goto pc_63a;


}pc_236:
{ /* <============ */ 
on_bb_start(566);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_24c:
{ /* <============ */ 
on_bb_start(588);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [600] */

/* JUMPI */
/* op_0 = Constant((4, 600)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_258;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_254:
{ /* <============ */ 
on_bb_start(596);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_258:
{ /* <============ */ 
on_bb_start(600);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [609] */

/* PUSH2 */
/* val = [1599] */

/* JUMP */
/* op_0 = Constant((3, 1599)) */
/* BB finalizer */
ctxt->s.set(0, c_261);
/* no pops at end */
/* no BB returns */

goto pc_63f;


}pc_261:
{ /* <============ */ 
on_bb_start(609);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_277:
{ /* <============ */ 
on_bb_start(631);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [643] */

/* JUMPI */
/* op_0 = Constant((4, 643)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_283;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_27f:
{ /* <============ */ 
on_bb_start(639);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_283:
{ /* <============ */ 
on_bb_start(643);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [652] */

/* PUSH2 */
/* val = [1605] */

/* JUMP */
/* op_0 = Constant((3, 1605)) */
/* BB finalizer */
ctxt->s.set(0, c_28c);
/* no pops at end */
/* no BB returns */

goto pc_645;


}pc_28c:
{ /* <============ */ 
on_bb_start(652);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_5_0 = iszero_v(s_0_0);


/* ISZERO */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = iszero_v(v_5_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((6, 0)) */
mstore_v(v_2_0, v_6_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((9, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_10_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((10, 0)) */

/* SUB */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_10_0, v_15_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((15, 0)) */

/* RETURN */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
return_v(v_15_0, v_18_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_2a4:
{ /* <============ */ 
on_bb_start(676);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [688] */

/* JUMPI */
/* op_0 = Constant((4, 688)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_2b0;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_2ac:
{ /* <============ */ 
on_bb_start(684);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2b0:
{ /* <============ */ 
on_bb_start(688);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [697] */

/* PUSH2 */
/* val = [1708] */

/* JUMP */
/* op_0 = Constant((3, 1708)) */
/* BB finalizer */
ctxt->s.set(0, c_2b9);
/* no pops at end */
/* no BB returns */

goto pc_6ac;


}pc_2b9:
{ /* <============ */ 
on_bb_start(697);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_2cf:
{ /* <============ */ 
on_bb_start(719);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [731] */

/* JUMPI */
/* op_0 = Constant((4, 731)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_2db;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_2d7:
{ /* <============ */ 
on_bb_start(727);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2db:
{ /* <============ */ 
on_bb_start(731);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [740] */

/* PUSH2 */
/* val = [1713] */

/* JUMP */
/* op_0 = Constant((3, 1713)) */
/* BB finalizer */
ctxt->s.set(0, c_2e4);
/* no pops at end */
/* no BB returns */

goto pc_6b1;


}pc_2e4:
{ /* <============ */ 
on_bb_start(740);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = and_v(g_48, s_0_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((6, 0)) */
mstore_v(v_2_0, v_6_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((9, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_10_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((10, 0)) */

/* SUB */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_10_0, v_15_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((15, 0)) */

/* RETURN */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
return_v(v_15_0, v_18_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_310:
{ /* <============ */ 
on_bb_start(784);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [796] */

/* JUMPI */
/* op_0 = Constant((4, 796)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_31c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_318:
{ /* <============ */ 
on_bb_start(792);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_31c:
{ /* <============ */ 
on_bb_start(796);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [805] */

/* PUSH2 */
/* val = [1751] */

/* JUMP */
/* op_0 = Constant((3, 1751)) */
/* BB finalizer */
ctxt->s.set(0, c_325);
/* no pops at end */
/* no BB returns */

goto pc_6d7;


}pc_325:
{ /* <============ */ 
on_bb_start(805);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_33b:
{ /* <============ */ 
on_bb_start(827);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [839] */

/* JUMPI */
/* op_0 = Constant((4, 839)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_347;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_343:
{ /* <============ */ 
on_bb_start(835);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_347:
{ /* <============ */ 
on_bb_start(839);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [848] */

/* PUSH2 */
/* val = [1756] */

/* JUMP */
/* op_0 = Constant((3, 1756)) */
/* BB finalizer */
ctxt->s.set(0, c_350);
/* no pops at end */
/* no BB returns */

goto pc_6dc;


}pc_350:
{ /* <============ */ 
on_bb_start(848);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_366:
{ /* <============ */ 
on_bb_start(870);
/* JUMPDEST */

/* PUSH2 */
/* val = [878] */

/* PUSH2 */
/* val = [1762] */

/* JUMP */
/* op_0 = Constant((2, 1762)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 878))*/
ctxt->s.push(c_36e);

goto pc_6e2;


}pc_36e:
{ /* <============ */ 
on_bb_start(878);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_370:
{ /* <============ */ 
on_bb_start(880);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [892] */

/* JUMPI */
/* op_0 = Constant((4, 892)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_37c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_378:
{ /* <============ */ 
on_bb_start(888);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_37c:
{ /* <============ */ 
on_bb_start(892);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [959] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [915] */

/* JUMPI */
/* op_0 = Constant((11, 915)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_3bf);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_393;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_3bf);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_38f:
{ /* <============ */ 
on_bb_start(911);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_393:
{ /* <============ */ 
on_bb_start(915);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_1, s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_6_0 = calldataload_v(s_0_1);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_48, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_11_0 = add_v(c_20, s_0_1);


/* SWAP1 */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((2, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((11, 0)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [1901] */

/* JUMP */
/* op_0 = Constant((19, 1901)) */
/* BB finalizer */
ctxt->s.set(1, v_8_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_76d;


}pc_3bf:
{ /* <============ */ 
on_bb_start(959);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_3d5:
{ /* <============ */ 
on_bb_start(981);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((1, 2)) */
const uint256_t v_2_0 = sload_v(c_2);


/* TIMESTAMP */
const uint256_t v_3_0 = timestamp_v();


/* LT */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = InstructionRef((2, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_3_0, v_2_0);
const uint256_t v_4_0 = lt_v(v_3_0, v_2_0);


/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_5_0 = iszero_v(v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((5, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = iszero_v(v_5_0);


/* PUSH2 */
/* val = [1001] */

/* JUMPI */
/* op_0 = Constant((8, 1001)) */
/* op_1 = InstructionRef((7, 0)) */
if ( v_7_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((5, 0))*/
ctxt->s.push(v_5_0);
 
 goto pc_3e9;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((5, 0))*/
ctxt->s.push(v_5_0);
}pc_3e2:
{ /* <============ */ 
on_bb_start(994);
/* POP */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_3_0 = sload_v(c_1);


/* EQ */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */
const uint256_t v_4_0 = eq_v(v_3_0, c_0);


/* BB finalizer */
ctxt->s.set(0, v_4_0);
/* no pops at end */
/* no BB returns */
}pc_3e9:
{ /* <============ */ 
on_bb_start(1001);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH2 */
/* val = [1010] */

/* JUMPI */
/* op_0 = Constant((1, 1010)) */
/* op_1 = StackRef((0, 0)) */
if ( s_0_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
 
 goto pc_3f2;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_3ee:
{ /* <============ */ 
on_bb_start(1006);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f2:
{ /* <============ */ 
on_bb_start(1010);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [5] */

/* DUP2 */
/* op_0 = Constant((1, 3)) */
/* val = [3] */

/* SWAP1 */
/* op_0 = Constant((1, 3)) */
/* op_1 = Constant((2, 5)) */

/* SSTORE */
/* op_0 = Constant((2, 5)) */
/* op_1 = Constant((1, 3)) */
sstore_v(c_5, c_3);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_3fc:
{ /* <============ */ 
on_bb_start(1020);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((3, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 3)) */
/* val = [3] */

/* SLOAD */
/* op_0 = Constant((2, 3)) */
const uint256_t v_7_0 = sload_v(c_3);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_100, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_16_0 = and_v(g_48, s_0_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 3)) */

/* SSTORE */
/* op_0 = Constant((2, 3)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_3, v_18_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_440:
{ /* <============ */ 
on_bb_start(1088);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* PUSH1 */
/* val = [5] */

/* SLOAD */
/* op_0 = Constant((3, 5)) */
const uint256_t v_4_0 = sload_v(c_5);


/* EQ */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */
const uint256_t v_5_0 = eq_v(v_4_0, c_0);


/* SWAP1 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((1, 0)) */

/* POP */

/* SWAP1 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
ctxt->s.set(0, v_5_0);
/* no pops at end */
/* no BB returns */

JUMP(s_0_0);


}pc_44c:
{ /* <============ */ 
on_bb_start(1100);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 2))*/
ctxt->s.push(c_2);

JUMP(s_0_0);


}pc_451:
{ /* <============ */ 
on_bb_start(1105);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((1, 2)) */
const uint256_t v_2_0 = sload_v(c_2);


/* TIMESTAMP */
const uint256_t v_3_0 = timestamp_v();


/* LT */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = InstructionRef((2, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_3_0, v_2_0);
const uint256_t v_4_0 = lt_v(v_3_0, v_2_0);


/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_5_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [1120] */

/* JUMPI */
/* op_0 = Constant((6, 1120)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_460;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_45c:
{ /* <============ */ 
on_bb_start(1116);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_460:
{ /* <============ */ 
on_bb_start(1120);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* EQ */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((1, 1)) */
const uint256_t v_3_0 = eq_v(s_0_0, c_1);


/* DUP1 */
/* op_0 = InstructionRef((3, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [1140] */

/* JUMPI */
/* op_0 = Constant((6, 1140)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
 
 goto pc_474;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
}pc_46b:
{ /* <============ */ 
on_bb_start(1131);
/* POP */

/* PUSH1 */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_2_0 = sload_v(c_0);


/* PUSH1 */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((3, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = InstructionRef((2, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_4_0, v_2_0);
const uint256_t v_5_0 = lt_v(v_4_0, v_2_0);


/* ISZERO */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = iszero_v(v_5_0);


/* BB finalizer */
ctxt->s.set(0, v_6_0);
/* no pops at end */
/* no BB returns */
}pc_474:
{ /* <============ */ 
on_bb_start(1140);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH2 */
/* val = [1166] */

/* JUMPI */
/* op_0 = Constant((2, 1166)) */
/* op_1 = StackRef((0, 0)) */
if ( s_0_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_48e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_47a:
{ /* <============ */ 
on_bb_start(1146);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* POP */

/* PUSH1 */
/* val = [2] */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* EQ */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((1, 2)) */
const uint256_t v_3_0 = eq_v(s_0_1, c_2);


/* DUP1 */
/* op_0 = InstructionRef((3, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [1165] */

/* JUMPI */
/* op_0 = Constant((6, 1165)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_48d;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
}pc_485:
{ /* <============ */ 
on_bb_start(1157);
/* POP */

/* PUSH1 */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_2_0 = sload_v(c_0);


/* PUSH1 */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((3, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = InstructionRef((2, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_4_0, v_2_0);
const uint256_t v_5_0 = lt_v(v_4_0, v_2_0);


/* BB finalizer */
ctxt->s.set(0, v_5_0);
/* no pops at end */
/* no BB returns */
}pc_48d:
{ /* <============ */ 
on_bb_start(1165);
/* JUMPDEST */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_48e:
{ /* <============ */ 
on_bb_start(1166);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH2 */
/* val = [1191] */

/* JUMPI */
/* op_0 = Constant((2, 1191)) */
/* op_1 = StackRef((0, 0)) */
if ( s_0_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_4a7;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_494:
{ /* <============ */ 
on_bb_start(1172);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* POP */

/* PUSH1 */
/* val = [3] */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* EQ */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((1, 3)) */
const uint256_t v_3_0 = eq_v(s_0_1, c_3);


/* DUP1 */
/* op_0 = InstructionRef((3, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [1190] */

/* JUMPI */
/* op_0 = Constant((6, 1190)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_4a6;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
}pc_49f:
{ /* <============ */ 
on_bb_start(1183);
/* POP */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_3_0 = sload_v(c_1);


/* EQ */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */
const uint256_t v_4_0 = eq_v(v_3_0, c_0);


/* BB finalizer */
ctxt->s.set(0, v_4_0);
/* no pops at end */
/* no BB returns */
}pc_4a6:
{ /* <============ */ 
on_bb_start(1190);
/* JUMPDEST */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4a7:
{ /* <============ */ 
on_bb_start(1191);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH2 */
/* val = [1200] */

/* JUMPI */
/* op_0 = Constant((1, 1200)) */
/* op_1 = StackRef((0, 0)) */
if ( s_0_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
 
 goto pc_4b0;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_4ac:
{ /* <============ */ 
on_bb_start(1196);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4b0:
{ /* <============ */ 
on_bb_start(1200);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [5] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((2, 5)) */

/* SSTORE */
/* op_0 = Constant((2, 5)) */
/* op_1 = StackRef((0, 0)) */
sstore_v(c_5, s_0_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_4ba:
{ /* <============ */ 
on_bb_start(1210);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [5] */

/* SLOAD */
/* op_0 = Constant((2, 5)) */
const uint256_t v_3_0 = sload_v(c_5);


/* EQ */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 1)) */
const uint256_t v_4_0 = eq_v(v_3_0, c_1);


/* PUSH2 */
/* val = [1225] */

/* JUMPI */
/* op_0 = Constant((5, 1225)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_4c9;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c5:
{ /* <============ */ 
on_bb_start(1221);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c9:
{ /* <============ */ 
on_bb_start(1225);
/* JUMPDEST */

/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((1, 3)) */

/* SLOAD */
/* op_0 = Constant((1, 3)) */
const uint256_t v_4_0 = sload_v(c_3);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_48, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_48, v_11_0);


/* PUSH2 */
/* val = [2300] */

/* SELFBALANCE */
const uint256_t v_15_0 = selfbalance_v();


/* SWAP1 */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = Constant((14, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((15, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = iszero_v(v_15_0);


/* MUL */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((14, 2300)) */
const uint256_t v_19_0 = mul_v(v_18_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((15, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((21, 64)) */
const uint256_t v_22_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((24, 64)) */
const uint256_t v_25_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((25, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((22, 0)) */

/* SUB */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((25, 0)) */
const uint256_t v_28_0 = sub_v(v_22_0, v_25_0);


/* DUP2 */
/* op_0 = InstructionRef((25, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((13, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((19, 0)) */

/* CALL */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((13, 0)) */
/* op_2 = InstructionRef((15, 0)) */
/* op_3 = InstructionRef((25, 0)) */
/* op_4 = InstructionRef((28, 0)) */
/* op_5 = InstructionRef((25, 0)) */
/* op_6 = Constant((23, 0)) */
const uint256_t v_33_0 = call_v(v_19_0, v_13_0, v_15_0, v_25_0, v_28_0, v_25_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((33, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((33, 0)) */
const uint256_t v_39_0 = iszero_v(v_33_0);


/* DUP1 */
/* op_0 = InstructionRef((39, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((39, 0)) */
const uint256_t v_41_0 = iszero_v(v_39_0);


/* PUSH2 */
/* val = [1329] */

/* JUMPI */
/* op_0 = Constant((42, 1329)) */
/* op_1 = InstructionRef((41, 0)) */
if ( v_41_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((39, 0))*/
ctxt->s.push(v_39_0);
 
 goto pc_531;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((39, 0))*/
ctxt->s.push(v_39_0);
}pc_528:
{ /* <============ */ 
on_bb_start(1320);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_531:
{ /* <============ */ 
on_bb_start(1329);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [5] */

/* DUP2 */
/* op_0 = Constant((2, 3)) */
/* val = [3] */

/* SWAP1 */
/* op_0 = Constant((2, 3)) */
/* op_1 = Constant((3, 5)) */

/* SSTORE */
/* op_0 = Constant((3, 5)) */
/* op_1 = Constant((2, 3)) */
sstore_v(c_5, c_3);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_53c:
{ /* <============ */ 
on_bb_start(1340);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [5] */

/* SLOAD */
/* op_0 = Constant((2, 5)) */
const uint256_t v_3_0 = sload_v(c_5);


/* EQ */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 2)) */
const uint256_t v_4_0 = eq_v(v_3_0, c_2);


/* PUSH2 */
/* val = [1355] */

/* JUMPI */
/* op_0 = Constant((5, 1355)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_54b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_547:
{ /* <============ */ 
on_bb_start(1351);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_54b:
{ /* <============ */ 
on_bb_start(1355);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [4] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_4_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(g_48, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_48, v_6_0);


/* DUP2 */
/* op_0 = Constant((3, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((3, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(c_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((3, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 4)) */

/* DUP2 */
/* op_0 = Constant((12, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 4)) */
mstore_v(c_20, c_4);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((12, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((18, 0)) */
/* op_1 = Constant((17, 64)) */
const uint256_t v_19_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_20_0 = sload_v(v_19_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = Constant((1, 0)) */

/* POP */

/* DUP1 */
/* op_0 = InstructionRef((20, 0)) */

/* PUSH1 */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((24, 1)) */
const uint256_t v_25_0 = sload_v(c_1);


/* LT */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = InstructionRef((20, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_25_0, v_20_0);
const uint256_t v_26_0 = lt_v(v_25_0, v_20_0);


/* ISZERO */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_27_0 = iszero_v(v_26_0);


/* PUSH2 */
/* val = [1435] */

/* JUMPI */
/* op_0 = Constant((28, 1435)) */
/* op_1 = InstructionRef((27, 0)) */
if ( v_27_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((20, 0))*/
ctxt->s.push(v_20_0);
 
 goto pc_59b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((20, 0))*/
ctxt->s.push(v_20_0);
}pc_59a:
{ /* <============ */ 
on_bb_start(1434);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_59b:
{ /* <============ */ 
on_bb_start(1435);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = Constant((2, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_6_0 = sload_v(c_1);


/* SUB */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_7_0 = sub_v(v_6_0, s_0_0);


/* SWAP3 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((2, 1)) */

/* SSTORE */
/* op_0 = Constant((2, 1)) */
/* op_1 = InstructionRef((7, 0)) */
sstore_v(c_1, v_7_0);


/* POP */

/* CALLER */
const uint256_t v_15_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_17_0 = and_v(g_48, v_15_0);


/* PUSH2 */
/* val = [2300] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((18, 2300)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_22_0 = iszero_v(s_0_0);


/* MUL */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = Constant((18, 2300)) */
const uint256_t v_23_0 = mul_v(v_22_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((25, 64)) */
const uint256_t v_26_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((28, 64)) */
const uint256_t v_29_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((29, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((26, 0)) */

/* SUB */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((29, 0)) */
const uint256_t v_32_0 = sub_v(v_26_0, v_29_0);


/* DUP2 */
/* op_0 = InstructionRef((29, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((17, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((23, 0)) */

/* CALL */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((17, 0)) */
/* op_2 = StackRef((0, 0)) */
/* op_3 = InstructionRef((29, 0)) */
/* op_4 = InstructionRef((32, 0)) */
/* op_5 = InstructionRef((29, 0)) */
/* op_6 = Constant((27, 0)) */
const uint256_t v_37_0 = call_v(v_23_0, v_17_0, s_0_0, v_29_0, v_32_0, v_29_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((17, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((37, 0)) */
const uint256_t v_43_0 = iszero_v(v_37_0);


/* DUP1 */
/* op_0 = InstructionRef((43, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((43, 0)) */
const uint256_t v_45_0 = iszero_v(v_43_0);


/* PUSH2 */
/* val = [1521] */

/* JUMPI */
/* op_0 = Constant((46, 1521)) */
/* op_1 = InstructionRef((45, 0)) */
if ( v_45_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((43, 0))*/
ctxt->s.push(v_43_0);
 
 goto pc_5f1;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((43, 0))*/
ctxt->s.push(v_43_0);
}pc_5e8:
{ /* <============ */ 
on_bb_start(1512);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_5f1:
{ /* <============ */ 
on_bb_start(1521);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [4] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_5_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_48, v_5_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((8, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_9_0 = and_v(g_48, v_7_0);


/* DUP2 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((4, 0)) */
/* op_1 = InstructionRef((9, 0)) */
mstore_v(c_0, v_9_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((4, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((13, 32)) */
/* op_1 = Constant((3, 4)) */

/* DUP2 */
/* op_0 = Constant((13, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((13, 32)) */
/* op_1 = Constant((3, 4)) */
mstore_v(c_20, c_4);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((17, 32)) */
/* op_1 = Constant((13, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((19, 0)) */
/* op_1 = Constant((18, 64)) */
const uint256_t v_20_0 = sha3_v(c_0, c_40);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((20, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = Constant((2, 0)) */
sstore_v(v_20_0, c_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_63a:
{ /* <============ */ 
on_bb_start(1594);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [3] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 3))*/
ctxt->s.push(c_3);

JUMP(s_0_0);


}pc_63f:
{ /* <============ */ 
on_bb_start(1599);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((1, 2)) */
const uint256_t v_2_0 = sload_v(c_2);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);

JUMP(s_0_0);


}pc_645:
{ /* <============ */ 
on_bb_start(1605);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_2_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((3, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_4_0 = and_v(g_48, v_2_0);


/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((6, 0)) */
/* op_1 = Constant((5, 3)) */

/* SLOAD */
/* op_0 = Constant((5, 3)) */
const uint256_t v_8_0 = sload_v(c_3);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((6, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((10, 256)) */
/* op_1 = Constant((6, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((11, 1)) */
/* op_1 = InstructionRef((8, 0)) */

/* DIV */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((11, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((14, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((8, 0)) */
const uint256_t v_15_0 = and_v(g_48, v_8_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_17_0 = and_v(g_48, v_15_0);


/* EQ */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((4, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_17_0, v_4_0);
const uint256_t v_18_0 = eq_v(v_17_0, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((18, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_20_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [1702] */

/* JUMPI */
/* op_0 = Constant((21, 1702)) */
/* op_1 = InstructionRef((20, 0)) */
if ( v_20_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 InstructionRef((18, 0))*/
ctxt->s.push(v_18_0);
 
 goto pc_6a6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 InstructionRef((18, 0))*/
ctxt->s.push(v_18_0);
}pc_69f:
{ /* <============ */ 
on_bb_start(1695);
/* POP */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [5] */

/* SLOAD */
/* op_0 = Constant((2, 5)) */
const uint256_t v_3_0 = sload_v(c_5);


/* EQ */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 1)) */
const uint256_t v_4_0 = eq_v(v_3_0, c_1);


/* BB finalizer */
ctxt->s.set(0, v_4_0);
/* no pops at end */
/* no BB returns */
}pc_6a6:
{ /* <============ */ 
on_bb_start(1702);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_1_0 = iszero_v(s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* SWAP1 */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = StackRef((0, 2)) */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
ctxt->s.set(2, v_1_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_2);


}pc_6ac:
{ /* <============ */ 
on_bb_start(1708);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);

JUMP(s_0_0);


}pc_6b1:
{ /* <============ */ 
on_bb_start(1713);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((1, 3)) */

/* SLOAD */
/* op_0 = Constant((1, 3)) */
const uint256_t v_4_0 = sload_v(c_3);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_48, v_4_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

JUMP(s_0_0);


}pc_6d7:
{ /* <============ */ 
on_bb_start(1751);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 1))*/
ctxt->s.push(c_1);

JUMP(s_0_0);


}pc_6dc:
{ /* <============ */ 
on_bb_start(1756);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [5] */

/* SLOAD */
/* op_0 = Constant((1, 5)) */
const uint256_t v_2_0 = sload_v(c_5);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);

JUMP(s_0_0);


}pc_6e2:
{ /* <============ */ 
on_bb_start(1762);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((1, 2)) */
const uint256_t v_2_0 = sload_v(c_2);


/* TIMESTAMP */
const uint256_t v_3_0 = timestamp_v();


/* LT */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = InstructionRef((2, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_3_0, v_2_0);
const uint256_t v_4_0 = lt_v(v_3_0, v_2_0);


/* PUSH2 */
/* val = [1776] */

/* JUMPI */
/* op_0 = Constant((5, 1776)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_6f0;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6ec:
{ /* <============ */ 
on_bb_start(1772);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6f0:
{ /* <============ */ 
on_bb_start(1776);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [5] */

/* SLOAD */
/* op_0 = Constant((2, 5)) */
const uint256_t v_3_0 = sload_v(c_5);


/* EQ */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */
const uint256_t v_4_0 = eq_v(v_3_0, c_0);


/* DUP1 */
/* op_0 = InstructionRef((4, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [1797] */

/* JUMPI */
/* op_0 = Constant((7, 1797)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((4, 0))*/
ctxt->s.push(v_4_0);
 
 goto pc_705;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((4, 0))*/
ctxt->s.push(v_4_0);
}pc_6fd:
{ /* <============ */ 
on_bb_start(1789);
/* POP */

/* PUSH1 */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_2_0 = sload_v(c_0);


/* PUSH1 */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((3, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = InstructionRef((2, 0)) */
TRACE_COMP(eevm::Opcode::LT, v_4_0, v_2_0);
const uint256_t v_5_0 = lt_v(v_4_0, v_2_0);


/* BB finalizer */
ctxt->s.set(0, v_5_0);
/* no pops at end */
/* no BB returns */
}pc_705:
{ /* <============ */ 
on_bb_start(1797);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH2 */
/* val = [1806] */

/* JUMPI */
/* op_0 = Constant((1, 1806)) */
/* op_1 = StackRef((0, 0)) */
if ( s_0_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
 
 goto pc_70e;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_70a:
{ /* <============ */ 
on_bb_start(1802);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_70e:
{ /* <============ */ 
on_bb_start(1806);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* PUSH1 */
/* val = [4] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_4_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(g_48, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_48, v_6_0);


/* DUP2 */
/* op_0 = Constant((3, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((3, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(c_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((3, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 4)) */

/* DUP2 */
/* op_0 = Constant((12, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 4)) */
mstore_v(c_20, c_4);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((12, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((18, 0)) */
/* op_1 = Constant((17, 64)) */
const uint256_t v_19_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((19, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_23_0 = sload_v(v_19_0);


/* ADD */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_24_0 = add_v(v_23_0, v_1_0);


/* SWAP3 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((24, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((19, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((24, 0)) */
sstore_v(v_19_0, v_24_0);


/* POP */

/* CALLVALUE */
const uint256_t v_32_0 = callvalue_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = InstructionRef((32, 0)) */

/* DUP3 */
/* op_0 = Constant((33, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((33, 1)) */
const uint256_t v_37_0 = sload_v(c_1);


/* ADD */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((32, 0)) */
const uint256_t v_38_0 = add_v(v_37_0, v_32_0);


/* SWAP3 */
/* op_0 = InstructionRef((38, 0)) */
/* op_1 = InstructionRef((32, 0)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((38, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((38, 0)) */
/* op_1 = Constant((33, 1)) */

/* SSTORE */
/* op_0 = Constant((33, 1)) */
/* op_1 = InstructionRef((38, 0)) */
sstore_v(c_1, v_38_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_76d:
{ /* <============ */ 
on_bb_start(1901);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [4] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((2, 32)) */
/* op_1 = Constant((1, 4)) */
mstore_v(c_20, c_4);


/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((5, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(c_0, s_0_0);


/* PUSH1 */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((8, 0)) */
/* op_1 = Constant((7, 64)) */
const uint256_t v_9_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* SWAP2 */
/* op_0 = Constant((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = Constant((10, 0)) */

/* POP */

/* SLOAD */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_15_0 = sload_v(v_9_0);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(0, v_15_0);
/* no pops at end */
/* no BB returns */

JUMP(s_0_1);


}pc_785:
{ /* <============ */ 
on_bb_start(1925);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_786:
{ /* <============ */ 
on_bb_start(1926);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG2 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
log2_v(s_0_0, s_0_1, s_0_2, s_0_3);


/* PUSH5 */
/* val = [452857328472] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x786 (inst offset 2; byte 0x22)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_78e:
{ /* <============ */ 
on_bb_start(1934);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* SLT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::SLT, s_0_0, s_0_1);
const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);


/* SHA3 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x78e (inst offset 2; byte 0xfb)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_791:
{ /* <============ */ 
on_bb_start(1937);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* DUP3 */
/* op_0 = StackRef((0, 2)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x791 (inst offset 1; byte 0xf)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_793:
{ /* <============ */ 
on_bb_start(1939);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x793 (inst offset 0; byte 0x5f)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_794:
{ /* <============ */ 
on_bb_start(1940);
/* CALLDATASIZE */
const uint256_t v_0_0 = calldatasize_v();


/* PUSH12 */
/* val = [41210361110457452654737250531] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x794 (inst offset 2; byte 0xb1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7a3:
{ /* <============ */ 
on_bb_start(1955);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7a4:
{ /* <============ */ 
on_bb_start(1956);
const uint256_t s_0_14 = ctxt->s.peek(14);
/* DUP15 */
/* op_0 = StackRef((0, 14)) */

/* POP */

/* PUSH32 */
/* val = [364045094989377963967259475274170763363400155187] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((2, 364045094989377963967259475274170763363400155187))*/
ctxt->s.push(g_118);
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x69,0x2,0x1e,0x19,0xe0,0xc9,0xba,0xb2,0x40,0x0,0x0,0x60,0x0,0x55,0x60,0x0,0x60,0x1,0x55,0x34,0x80,0x15,0x61,0x0,0x23,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x62,0x27,0x8d,0x0,0x42,0x1,0x60,0x2,0x81,0x90,0x55,0x50,0x33,0x60,0x3,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x60,0x0,0x60,0x5,0x81,0x90,0x55,0x50,0x61,0x7,0xbb,0x80,0x61,0x0,0x88,0x60,0x0,0x39,0x60,0x0,0xf3,0xfe,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0xf3,0x57,0x60,0x0,0x35,0x60,0xe0,0x1c,0x80,0x63,0x62,0x77,0x49,0xe6,0x11,0x61,0x0,0x8a,0x57,0x80,0x63,0xa8,0xbf,0x27,0x89,0x11,0x61,0x0,0x59,0x57,0x80,0x63,0xa8,0xbf,0x27,0x89,0x14,0x61,0x3,0x10,0x57,0x80,0x63,0xb1,0xc9,0xfe,0x6e,0x14,0x61,0x3,0x3b,0x57,0x80,0x63,0xe8,0xb5,0xe5,0x1f,0x14,0x61,0x3,0x66,0x57,0x80,0x63,0xfc,0x7e,0x28,0x6d,0x14,0x61,0x3,0x70,0x57,0x61,0x0,0xf3,0x56,0x5b,0x80,0x63,0x62,0x77,0x49,0xe6,0x14,0x61,0x2,0x4c,0x57,0x80,0x63,0x71,0xe2,0xd8,0x6c,0x14,0x61,0x2,0x77,0x57,0x80,0x63,0x83,0x31,0xca,0xe5,0x14,0x61,0x2,0xa4,0x57,0x80,0x63,0x8d,0xa5,0xcb,0x5b,0x14,0x61,0x2,0xcf,0x57,0x61,0x0,0xf3,0x56,0x5b,0x80,0x63,0x2c,0xc8,0x26,0x55,0x11,0x61,0x0,0xc6,0x57,0x80,0x63,0x2c,0xc8,0x26,0x55,0x14,0x61,0x1,0xb8,0x57,0x80,0x63,0x3c,0xcf,0xd6,0xb,0x14,0x61,0x1,0xf3,0x57,0x80,0x63,0x59,0xe,0x1a,0xe3,0x14,0x61,0x2,0xa,0x57,0x80,0x63,0x61,0xac,0xd,0xd9,0x14,0x61,0x2,0x21,0x57,0x61,0x0,0xf3,0x56,0x5b,0x80,0x63,0x7,0xda,0x68,0xf5,0x14,0x61,0x0,0xf8,0x57,0x80,0x63,0x13,0xaf,0x40,0x35,0x14,0x61,0x1,0xf,0x57,0x80,0x63,0x22,0xf3,0xe2,0xd4,0x14,0x61,0x1,0x60,0x57,0x80,0x63,0x23,0x2d,0xda,0xaf,0x14,0x61,0x1,0x8d,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x1,0x4,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0xd,0x61,0x3,0xd5,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x1b,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x5e,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x1,0x32,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x3,0xfc,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x6c,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x75,0x61,0x4,0x40,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x15,0x15,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x1,0x99,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0xa2,0x61,0x4,0x4c,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x1,0xc4,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0xf1,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x1,0xdb,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x4,0x51,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0xff,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0x8,0x61,0x4,0xba,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x2,0x16,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0x1f,0x61,0x5,0x3c,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x2,0x2d,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0x36,0x61,0x6,0x3a,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x2,0x58,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0x61,0x61,0x6,0x3f,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x2,0x83,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0x8c,0x61,0x6,0x45,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x15,0x15,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x2,0xb0,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0xb9,0x61,0x6,0xac,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x2,0xdb,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x2,0xe4,0x61,0x6,0xb1,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x3,0x1c,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x3,0x25,0x61,0x6,0xd7,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x3,0x47,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x3,0x50,0x61,0x6,0xdc,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x61,0x3,0x6e,0x61,0x6,0xe2,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x3,0x7c,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x3,0xbf,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x3,0x93,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x7,0x6d,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x60,0x2,0x54,0x42,0x10,0x15,0x80,0x15,0x61,0x3,0xe9,0x57,0x50,0x60,0x0,0x60,0x1,0x54,0x14,0x5b,0x61,0x3,0xf2,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x3,0x60,0x5,0x81,0x90,0x55,0x50,0x56,0x5b,0x80,0x60,0x3,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x50,0x56,0x5b,0x60,0x0,0x80,0x60,0x5,0x54,0x14,0x90,0x50,0x90,0x56,0x5b,0x60,0x2,0x81,0x56,0x5b,0x60,0x2,0x54,0x42,0x10,0x15,0x61,0x4,0x60,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x1,0x81,0x14,0x80,0x15,0x61,0x4,0x74,0x57,0x50,0x60,0x0,0x54,0x60,0x1,0x54,0x10,0x15,0x5b,0x80,0x61,0x4,0x8e,0x57,0x50,0x60,0x2,0x81,0x14,0x80,0x15,0x61,0x4,0x8d,0x57,0x50,0x60,0x0,0x54,0x60,0x1,0x54,0x10,0x5b,0x5b,0x80,0x61,0x4,0xa7,0x57,0x50,0x60,0x3,0x81,0x14,0x80,0x15,0x61,0x4,0xa6,0x57,0x50,0x60,0x0,0x60,0x1,0x54,0x14,0x5b,0x5b,0x61,0x4,0xb0,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x60,0x5,0x81,0x90,0x55,0x50,0x50,0x56,0x5b,0x60,0x1,0x60,0x5,0x54,0x14,0x61,0x4,0xc9,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x3,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x47,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x5,0x31,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x60,0x3,0x60,0x5,0x81,0x90,0x55,0x50,0x56,0x5b,0x60,0x2,0x60,0x5,0x54,0x14,0x61,0x5,0x4b,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x60,0x4,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x90,0x50,0x80,0x60,0x1,0x54,0x10,0x15,0x61,0x5,0x9b,0x57,0xfe,0x5b,0x80,0x60,0x1,0x60,0x0,0x82,0x82,0x54,0x3,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x82,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x5,0xf1,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x60,0x0,0x60,0x4,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x81,0x90,0x55,0x50,0x50,0x56,0x5b,0x60,0x3,0x81,0x56,0x5b,0x60,0x2,0x54,0x81,0x56,0x5b,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x60,0x3,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x80,0x15,0x61,0x6,0xa6,0x57,0x50,0x60,0x1,0x60,0x5,0x54,0x14,0x5b,0x15,0x90,0x50,0x90,0x56,0x5b,0x60,0x0,0x81,0x56,0x5b,0x60,0x3,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x56,0x5b,0x60,0x1,0x81,0x56,0x5b,0x60,0x5,0x54,0x81,0x56,0x5b,0x60,0x2,0x54,0x42,0x10,0x61,0x6,0xf0,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x60,0x5,0x54,0x14,0x80,0x15,0x61,0x7,0x5,0x57,0x50,0x60,0x0,0x54,0x60,0x1,0x54,0x10,0x5b,0x61,0x7,0xe,0x57,0x60,0x0,0x80,0xfd,0x5b,0x34,0x60,0x4,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x60,0x0,0x82,0x82,0x54,0x1,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x34,0x60,0x1,0x60,0x0,0x82,0x82,0x54,0x1,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x56,0x5b,0x60,0x4,0x60,0x20,0x52,0x80,0x60,0x0,0x52,0x60,0x40,0x60,0x0,0x20,0x60,0x0,0x91,0x50,0x90,0x50,0x54,0x81,0x56,0xfe,0xa2,0x64,0x69,0x70,0x66,0x73,0x58,0x22,0x12,0x20,0xfb,0x82,0xf,0x5f,0x36,0x6b,0x85,0x28,0x69,0x68,0x3e,0x56,0x64,0xac,0x21,0xc4,0x58,0xe3,0xb1,0x0,0x8e,0x50,0x7f,0x3f,0xc4,0x58,0xbd,0x82,0xed,0xde,0x9b,0xcb,0x64,0x73,0x6f,0x6c,0x63,0x43,0x0,0x7,0x6,0x0,0x33,};


const eevm::Code& eevm::EVM2CPP_crowdsale::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_crowdsale::constructor_args() {
    return _constructor_args;
}
