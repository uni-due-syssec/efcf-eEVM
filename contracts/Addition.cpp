// auto-generated by evm2cpp
#include "eEVM/evm2cpp/contracts/Addition.h"

// this is generated code and we might have emitted some variables/labels that
// are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
  0x60, /* [0'0x0] PUSH1 */
  0x80, /* constant data */
  0x60, /* [2'0x2] PUSH1 */
  0x40, /* constant data */
  0x52, /* [4'0x4] MSTORE */
  0x34, /* [5'0x5] CALLVALUE */
  0x80, /* [6'0x6] DUP1 */
  0x15, /* [7'0x7] ISZERO */
  0x60, /* [8'0x8] PUSH1 */
  0x0f, /* constant data */
  0x57, /* [10'0xa] JUMPI */
  0x60, /* [11'0xb] PUSH1 */
  0x00, /* constant data */
  0x80, /* [13'0xd] DUP1 */
  0xfd, /* [14'0xe] REVERT */
  0x5b, /* [15'0xf] JUMPDEST */
  0x50, /* [16'0x10] POP */
  0x60, /* [17'0x11] PUSH1 */
  0x04, /* constant data */
  0x36, /* [19'0x13] CALLDATASIZE */
  0x10, /* [20'0x14] LT */
  0x60, /* [21'0x15] PUSH1 */
  0x28, /* constant data */
  0x57, /* [23'0x17] JUMPI */
  0x60, /* [24'0x18] PUSH1 */
  0x00, /* constant data */
  0x35, /* [26'0x1a] CALLDATALOAD */
  0x60, /* [27'0x1b] PUSH1 */
  0xe0, /* constant data */
  0x1c, /* [29'0x1d] SHR */
  0x80, /* [30'0x1e] DUP1 */
  0x63, /* [31'0x1f] PUSH4 */
  0x77, 0x16, 0x02, 0xf7, /* constant data */
  0x14, /* [36'0x24] EQ */
  0x60, /* [37'0x25] PUSH1 */
  0x2d, /* constant data */
  0x57, /* [39'0x27] JUMPI */
  0x5b, /* [40'0x28] JUMPDEST */
  0x60, /* [41'0x29] PUSH1 */
  0x00, /* constant data */
  0x80, /* [43'0x2b] DUP1 */
  0xfd, /* [44'0x2c] REVERT */
  0x5b, /* [45'0x2d] JUMPDEST */
  0x60, /* [46'0x2e] PUSH1 */
  0x60, /* constant data */
  0x60, /* [48'0x30] PUSH1 */
  0x04, /* constant data */
  0x80, /* [50'0x32] DUP1 */
  0x36, /* [51'0x33] CALLDATASIZE */
  0x03, /* [52'0x34] SUB */
  0x60, /* [53'0x35] PUSH1 */
  0x40, /* constant data */
  0x81, /* [55'0x37] DUP2 */
  0x10, /* [56'0x38] LT */
  0x15, /* [57'0x39] ISZERO */
  0x60, /* [58'0x3a] PUSH1 */
  0x41, /* constant data */
  0x57, /* [60'0x3c] JUMPI */
  0x60, /* [61'0x3d] PUSH1 */
  0x00, /* constant data */
  0x80, /* [63'0x3f] DUP1 */
  0xfd, /* [64'0x40] REVERT */
  0x5b, /* [65'0x41] JUMPDEST */
  0x81, /* [66'0x42] DUP2 */
  0x01, /* [67'0x43] ADD */
  0x90, /* [68'0x44] SWAP1 */
  0x80, /* [69'0x45] DUP1 */
  0x80, /* [70'0x46] DUP1 */
  0x35, /* [71'0x47] CALLDATALOAD */
  0x90, /* [72'0x48] SWAP1 */
  0x60, /* [73'0x49] PUSH1 */
  0x20, /* constant data */
  0x01, /* [75'0x4b] ADD */
  0x90, /* [76'0x4c] SWAP1 */
  0x92, /* [77'0x4d] SWAP3 */
  0x91, /* [78'0x4e] SWAP2 */
  0x90, /* [79'0x4f] SWAP1 */
  0x80, /* [80'0x50] DUP1 */
  0x35, /* [81'0x51] CALLDATALOAD */
  0x90, /* [82'0x52] SWAP1 */
  0x60, /* [83'0x53] PUSH1 */
  0x20, /* constant data */
  0x01, /* [85'0x55] ADD */
  0x90, /* [86'0x56] SWAP1 */
  0x92, /* [87'0x57] SWAP3 */
  0x91, /* [88'0x58] SWAP2 */
  0x90, /* [89'0x59] SWAP1 */
  0x50, /* [90'0x5a] POP */
  0x50, /* [91'0x5b] POP */
  0x50, /* [92'0x5c] POP */
  0x60, /* [93'0x5d] PUSH1 */
  0x76, /* constant data */
  0x56, /* [95'0x5f] JUMP */
  0x5b, /* [96'0x60] JUMPDEST */
  0x60, /* [97'0x61] PUSH1 */
  0x40, /* constant data */
  0x51, /* [99'0x63] MLOAD */
  0x80, /* [100'0x64] DUP1 */
  0x82, /* [101'0x65] DUP3 */
  0x81, /* [102'0x66] DUP2 */
  0x52, /* [103'0x67] MSTORE */
  0x60, /* [104'0x68] PUSH1 */
  0x20, /* constant data */
  0x01, /* [106'0x6a] ADD */
  0x91, /* [107'0x6b] SWAP2 */
  0x50, /* [108'0x6c] POP */
  0x50, /* [109'0x6d] POP */
  0x60, /* [110'0x6e] PUSH1 */
  0x40, /* constant data */
  0x51, /* [112'0x70] MLOAD */
  0x80, /* [113'0x71] DUP1 */
  0x91, /* [114'0x72] SWAP2 */
  0x03, /* [115'0x73] SUB */
  0x90, /* [116'0x74] SWAP1 */
  0xf3, /* [117'0x75] RETURN */
  0x5b, /* [118'0x76] JUMPDEST */
  0x60, /* [119'0x77] PUSH1 */
  0x00, /* constant data */
  0x80, /* [121'0x79] DUP1 */
  0x82, /* [122'0x7a] DUP3 */
  0x84, /* [123'0x7b] DUP5 */
  0x01, /* [124'0x7c] ADD */
  0x90, /* [125'0x7d] SWAP1 */
  0x50, /* [126'0x7e] POP */
  0x80, /* [127'0x7f] DUP1 */
  0x91, /* [128'0x80] SWAP2 */
  0x50, /* [129'0x81] POP */
  0x50, /* [130'0x82] POP */
  0x92, /* [131'0x83] SWAP3 */
  0x91, /* [132'0x84] SWAP2 */
  0x50, /* [133'0x85] POP */
  0x50, /* [134'0x86] POP */
  0x56, /* [135'0x87] JUMP */
  0xfe, /* [136'0x88] INVALID */
  0xa2, /* [137'0x89] LOG2 */
  0x64, /* [138'0x8a] PUSH5 */
  0x69, 0x70, 0x66, 0x73, 0x58, /* constant data */
  0x22, /* [144'0x90] INVALID' byte */
  0x12, /* [145'0x91] SLT */
  0x20, /* [146'0x92] SHA3 */
  0xe0, /* [147'0x93] INVALID' byte */
  0xab, /* [148'0x94] INVALID' byte */
  0x74, /* [149'0x95] PUSH21 */
  0xb2, 0x89, 0x5b, 0x99, 0xb6, 0x38, 0xa3, 0xcc, 0xda, 0x8a, 0xa1,
  0x46, 0x91, 0xe6, 0x14, 0xc4, 0xfe, 0x5c, 0xc7, 0xc7, 0xf4, /* constant data
                                                               */
  0xeb, /* [171'0xab] INVALID' byte */
  0x04, /* [172'0xac] DIV */
  0xa7, /* [173'0xad] INVALID' byte */
  0x60, /* [174'0xae] PUSH1 */
  0xcd, /* constant data */
  0xbb, /* [176'0xb0] INVALID' byte */
  0x56, /* [177'0xb1] JUMP */
  0xdd, /* [178'0xb2] INVALID' byte */
  0x64, /* [179'0xb3] PUSH5 */
  0x73, 0x6f, 0x6c, 0x63, 0x43, /* constant data */
  0x00, /* [185'0xb9] STOP */
  0x07, /* [186'0xba] SMOD */
  0x06, /* [187'0xbb] MOD */
  0x00, /* [188'0xbc] STOP */
  0x33, /* [189'0xbd] CALLER */
};

const eevm::Code& eevm::EVM2CPP_Addition::bytecode()
{
  return _contract_bytecode;
}

const std::string eevm::EVM2CPP_Addition::_contract_name = "Addition";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_Addition>
  eevm::EVM2CPP_Addition::reg{};
const std::string& eevm::EVM2CPP_Addition::name()
{
  return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_f = 0xf_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_28 = 0x28_u256;
constexpr uint256_t c_2d = 0x2d_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_41 = 0x41_u256;
constexpr uint256_t c_60 = 0x60_u256;
constexpr uint256_t c_76 = 0x76_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_771602f7 = 0x771602f7_u256;
constexpr uint256_t g_13 = 0x736f6c6343_u256;

// code
void eevm::EVM2CPP_Addition::dispatch()
{
  static void* _JUMP_TABLE_ARR[] = {
    &&_evm_start,

    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_f,    &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_28,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_2d,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_41,   &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_60,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_76,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld,

  };

  goto _evm_start;

__invld:
  throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) \
  { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) \
    { \
      goto* _JUMP_TABLE_ARR[_jump_target]; \
    } \
    else \
    { \
      goto __invld; \
    } \
  }

_evm_start:
pc_0 : { /* <============ */
  on_bb_start(0);
  /* PUSH1 */
  /* val = [128] */

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((1, 64)) */
  /* op_1 = Constant((0, 128)) */
  mstore_v(c_40, c_80);

  /* CALLVALUE */
  const uint256_t v_3_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_5_0 = iszero_v(v_3_0);

  /* PUSH1 */
  /* val = [15] */

  /* JUMPI */
  /* op_0 = Constant((6, 15)) */
  /* op_1 = InstructionRef((5, 0)) */
  if (v_5_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_f;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_b : { /* <============ */
  on_bb_start(11);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_f : { /* <============ */
  on_bb_start(15);
  /* JUMPDEST */

  /* POP */

  /* PUSH1 */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_3_0 = calldatasize_v();

  /* LT */
  /* op_0 = InstructionRef((3, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_4_0 = lt_v(v_3_0, c_4);

  /* PUSH1 */
  /* val = [40] */

  /* JUMPI */
  /* op_0 = Constant((5, 40)) */
  /* op_1 = InstructionRef((4, 0)) */
  if (v_4_0)
  {
    /* BB finalizer */
    /* no stack sets */
    ctxt->s.pop_drop_n(1);
    /* no BB returns */

    goto pc_28;
  }

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_18 : { /* <============ */
  on_bb_start(24);
  /* PUSH1 */
  /* val = [0] */

  /* CALLDATALOAD */
  /* op_0 = Constant((0, 0)) */
  const uint256_t v_1_0 = calldataload_v(c_0);

  /* PUSH1 */
  /* val = [224] */

  /* SHR */
  /* op_0 = Constant((2, 224)) */
  /* op_1 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = shr_v(c_e0, v_1_0);

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* PUSH4 */
  /* val = [1997931255] */

  /* EQ */
  /* op_0 = Constant((5, 1997931255)) */
  /* op_1 = InstructionRef((3, 0)) */
  const uint256_t v_6_0 = eq_v(c_771602f7, v_3_0);

  /* PUSH1 */
  /* val = [45] */

  /* JUMPI */
  /* op_0 = Constant((7, 45)) */
  /* op_1 = InstructionRef((6, 0)) */
  if (v_6_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_2d;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_28 : { /* <============ */
  on_bb_start(40);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = Constant((1, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_2d : { /* <============ */
  on_bb_start(45);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [96] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((2, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_4_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_5_0 = sub_v(v_4_0, c_4);

  /* PUSH1 */
  /* val = [64] */

  /* DUP2 */
  /* op_0 = InstructionRef((5, 0)) */

  /* LT */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((6, 64)) */
  const uint256_t v_8_0 = lt_v(v_5_0, c_40);

  /* ISZERO */
  /* op_0 = InstructionRef((8, 0)) */
  const uint256_t v_9_0 = iszero_v(v_8_0);

  /* PUSH1 */
  /* val = [65] */

  /* JUMPI */
  /* op_0 = Constant((10, 65)) */
  /* op_1 = InstructionRef((9, 0)) */
  if (v_9_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 96))*/
    ctxt->s.push(c_60);
    /* BB return 1 Constant((2, 4))*/
    ctxt->s.push(c_4);
    /* BB return 2 InstructionRef((5, 0))*/
    ctxt->s.push(v_5_0);

    goto pc_41;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 96))*/
  ctxt->s.push(c_60);
  /* BB return 1 Constant((2, 4))*/
  ctxt->s.push(c_4);
  /* BB return 2 InstructionRef((5, 0))*/
  ctxt->s.push(v_5_0);
}
pc_3d : { /* <============ */
  on_bb_start(61);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_41 : { /* <============ */
  on_bb_start(65);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((8, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_9_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((9, 0)) */
  /* op_1 = InstructionRef((6, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((9, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((9, 0)) */

  /* CALLDATALOAD */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_15_0 = calldataload_v(v_9_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((9, 0)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((17, 32)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_18_0 = add_v(c_20, v_9_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((18, 0)) */
  /* op_1 = InstructionRef((15, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((18, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [118] */

  /* JUMP */
  /* op_0 = Constant((26, 118)) */
  /* BB finalizer */
  ctxt->s.set(0, v_15_0);

  ctxt->s.set(1, v_6_0);
  /* no pops at end */
  /* no BB returns */

  goto pc_76;
}
pc_60 : { /* <============ */
  on_bb_start(96);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((1, 64)) */
  const uint256_t v_2_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((2, 0)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP2 */
  /* op_0 = InstructionRef((2, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(v_2_0, s_0_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((7, 32)) */
  /* op_1 = InstructionRef((2, 0)) */
  const uint256_t v_8_0 = add_v(c_20, v_2_0);

  /* SWAP2 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((12, 64)) */
  const uint256_t v_13_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((13, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = InstructionRef((13, 0)) */

  /* RETURN */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((16, 0)) */
  return_v(v_13_0, v_16_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_76 : { /* <============ */
  on_bb_start(118);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP5 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_5_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* POP */

  /* DUP1 */
  /* op_0 = InstructionRef((5, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* POP */

  /* POP */

  /* SWAP3 */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = StackRef((0, 2)) */

  /* SWAP2 */
  /* op_0 = StackRef((0, 2)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 2)) */
  /* BB finalizer */
  ctxt->s.set(2, v_5_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */

  JUMP(s_0_2);
}
pc_88 : { /* <============ */
  on_bb_start(136);
  /* INVALID */
  invalid_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_89 : { /* <============ */
  on_bb_start(137);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  /* LOG2 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  /* op_3 = StackRef((0, 3)) */
  log2_v(s_0_0, s_0_1, s_0_2, s_0_3);

  /* PUSH5 */
  /* val = [452857328472] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x89 (inst offset 2; byte 0x22)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_91 : { /* <============ */
  on_bb_start(145);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SLT */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);

  /* SHA3 */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x91 (inst offset 2; byte 0xe0)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_94 : { /* <============ */
  on_bb_start(148);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x94 (inst offset 0; byte 0xab)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_95 : { /* <============ */
  on_bb_start(149);
  /* PUSH21 */
  /* val = [260931465938503077347788356909416084380448320899060] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x95 (inst offset 1; byte 0xeb)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_ac : { /* <============ */
  on_bb_start(172);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* DIV */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = div_v(s_0_0, s_0_1);

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0xac (inst offset 1; byte 0xa7)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_ae : { /* <============ */
  on_bb_start(174);
  /* PUSH1 */
  /* val = [205] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0xae (inst offset 1; byte 0xbb)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_b1 : { /* <============ */
  on_bb_start(177);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMP */
  /* op_0 = StackRef((0, 0)) */
  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  JUMP(s_0_0);
}
pc_b2 : { /* <============ */
  on_bb_start(178);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0xb2 (inst offset 0; byte 0xdd)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_b3 : { /* <============ */
  on_bb_start(179);
  /* PUSH5 */
  /* val = [495790613315] */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((0, 495790613315))*/
  ctxt->s.push(g_13);
}
pc_ba : { /* <============ */
  on_bb_start(186);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SMOD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = smod_v(s_0_0, s_0_1);

  /* MOD */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = mod_v(v_0_0, s_0_2);

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(2, v_1_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_bd : { /* <============ */
  on_bb_start(189);
  /* CALLER */
  const uint256_t v_0_0 = caller_v();

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((0, 0))*/
  ctxt->s.push(v_0_0);
}
exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
  0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15, 0x61, 0x0,  0x10, 0x57, 0x60,
  0x0,  0x80, 0xfd, 0x5b, 0x50, 0x60, 0xbe, 0x80, 0x61, 0x0,  0x1f, 0x60, 0x0,
  0x39, 0x60, 0x0,  0xf3, 0xfe, 0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15,
  0x60, 0xf,  0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50, 0x60, 0x4,  0x36, 0x10,
  0x60, 0x28, 0x57, 0x60, 0x0,  0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0x77, 0x16,
  0x2,  0xf7, 0x14, 0x60, 0x2d, 0x57, 0x5b, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x60,
  0x60, 0x60, 0x4,  0x80, 0x36, 0x3,  0x60, 0x40, 0x81, 0x10, 0x15, 0x60, 0x41,
  0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x35, 0x90,
  0x60, 0x20, 0x1,  0x90, 0x92, 0x91, 0x90, 0x80, 0x35, 0x90, 0x60, 0x20, 0x1,
  0x90, 0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x60, 0x76, 0x56, 0x5b, 0x60, 0x40,
  0x51, 0x80, 0x82, 0x81, 0x52, 0x60, 0x20, 0x1,  0x91, 0x50, 0x50, 0x60, 0x40,
  0x51, 0x80, 0x91, 0x3,  0x90, 0xf3, 0x5b, 0x60, 0x0,  0x80, 0x82, 0x84, 0x1,
  0x90, 0x50, 0x80, 0x91, 0x50, 0x50, 0x92, 0x91, 0x50, 0x50, 0x56, 0xfe, 0xa2,
  0x64, 0x69, 0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20, 0xe0, 0xab, 0x74, 0xb2,
  0x89, 0x5b, 0x99, 0xb6, 0x38, 0xa3, 0xcc, 0xda, 0x8a, 0xa1, 0x46, 0x91, 0xe6,
  0x14, 0xc4, 0xfe, 0x5c, 0xc7, 0xc7, 0xf4, 0xeb, 0x4,  0xa7, 0x60, 0xcd, 0xbb,
  0x56, 0xdd, 0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x0,  0x7,  0x6,  0x0,  0x33,
};

const eevm::Code& eevm::EVM2CPP_Addition::constructor_bytecode()
{
  return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_Addition::constructor_args()
{
  return _constructor_args;
}
