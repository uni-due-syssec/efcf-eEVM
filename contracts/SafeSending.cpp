// auto-generated by evm2cpp

#include "eEVM/evm2cpp/contracts/SafeSending.h"

#include "eEVM/fuzz/tracecomp.hpp"

// this is generated code and we might have emitted some variables/labels that
// are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
  0x60, /* [0'0x0] PUSH1 */
  0x80, /* constant data */
  0x60, /* [2'0x2] PUSH1 */
  0x40, /* constant data */
  0x52, /* [4'0x4] MSTORE */
  0x34, /* [5'0x5] CALLVALUE */
  0x80, /* [6'0x6] DUP1 */
  0x15, /* [7'0x7] ISZERO */
  0x60, /* [8'0x8] PUSH1 */
  0x0f, /* constant data */
  0x57, /* [10'0xa] JUMPI */
  0x60, /* [11'0xb] PUSH1 */
  0x00, /* constant data */
  0x80, /* [13'0xd] DUP1 */
  0xfd, /* [14'0xe] REVERT */
  0x5b, /* [15'0xf] JUMPDEST */
  0x50, /* [16'0x10] POP */
  0x60, /* [17'0x11] PUSH1 */
  0x04, /* constant data */
  0x36, /* [19'0x13] CALLDATASIZE */
  0x10, /* [20'0x14] LT */
  0x60, /* [21'0x15] PUSH1 */
  0x28, /* constant data */
  0x57, /* [23'0x17] JUMPI */
  0x60, /* [24'0x18] PUSH1 */
  0x00, /* constant data */
  0x35, /* [26'0x1a] CALLDATALOAD */
  0x60, /* [27'0x1b] PUSH1 */
  0xe0, /* constant data */
  0x1c, /* [29'0x1d] SHR */
  0x80, /* [30'0x1e] DUP1 */
  0x63, /* [31'0x1f] PUSH4 */
  0xd0, 0x67, 0x9d, 0x34, /* constant data */
  0x14, /* [36'0x24] EQ */
  0x60, /* [37'0x25] PUSH1 */
  0x2d, /* constant data */
  0x57, /* [39'0x27] JUMPI */
  0x5b, /* [40'0x28] JUMPDEST */
  0x60, /* [41'0x29] PUSH1 */
  0x00, /* constant data */
  0x80, /* [43'0x2b] DUP1 */
  0xfd, /* [44'0x2c] REVERT */
  0x5b, /* [45'0x2d] JUMPDEST */
  0x60, /* [46'0x2e] PUSH1 */
  0x76, /* constant data */
  0x60, /* [48'0x30] PUSH1 */
  0x04, /* constant data */
  0x80, /* [50'0x32] DUP1 */
  0x36, /* [51'0x33] CALLDATASIZE */
  0x03, /* [52'0x34] SUB */
  0x60, /* [53'0x35] PUSH1 */
  0x40, /* constant data */
  0x81, /* [55'0x37] DUP2 */
  0x10, /* [56'0x38] LT */
  0x15, /* [57'0x39] ISZERO */
  0x60, /* [58'0x3a] PUSH1 */
  0x41, /* constant data */
  0x57, /* [60'0x3c] JUMPI */
  0x60, /* [61'0x3d] PUSH1 */
  0x00, /* constant data */
  0x80, /* [63'0x3f] DUP1 */
  0xfd, /* [64'0x40] REVERT */
  0x5b, /* [65'0x41] JUMPDEST */
  0x81, /* [66'0x42] DUP2 */
  0x01, /* [67'0x43] ADD */
  0x90, /* [68'0x44] SWAP1 */
  0x80, /* [69'0x45] DUP1 */
  0x80, /* [70'0x46] DUP1 */
  0x35, /* [71'0x47] CALLDATALOAD */
  0x73, /* [72'0x48] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [93'0x5d] AND */
  0x90, /* [94'0x5e] SWAP1 */
  0x60, /* [95'0x5f] PUSH1 */
  0x20, /* constant data */
  0x01, /* [97'0x61] ADD */
  0x90, /* [98'0x62] SWAP1 */
  0x92, /* [99'0x63] SWAP3 */
  0x91, /* [100'0x64] SWAP2 */
  0x90, /* [101'0x65] SWAP1 */
  0x80, /* [102'0x66] DUP1 */
  0x35, /* [103'0x67] CALLDATALOAD */
  0x90, /* [104'0x68] SWAP1 */
  0x60, /* [105'0x69] PUSH1 */
  0x20, /* constant data */
  0x01, /* [107'0x6b] ADD */
  0x90, /* [108'0x6c] SWAP1 */
  0x92, /* [109'0x6d] SWAP3 */
  0x91, /* [110'0x6e] SWAP2 */
  0x90, /* [111'0x6f] SWAP1 */
  0x50, /* [112'0x70] POP */
  0x50, /* [113'0x71] POP */
  0x50, /* [114'0x72] POP */
  0x60, /* [115'0x73] PUSH1 */
  0x78, /* constant data */
  0x56, /* [117'0x75] JUMP */
  0x5b, /* [118'0x76] JUMPDEST */
  0x00, /* [119'0x77] STOP */
  0x5b, /* [120'0x78] JUMPDEST */
  0x81, /* [121'0x79] DUP2 */
  0x73, /* [122'0x7a] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [143'0x8f] AND */
  0x81, /* [144'0x90] DUP2 */
  0x60, /* [145'0x91] PUSH1 */
  0x40, /* constant data */
  0x51, /* [147'0x93] MLOAD */
  0x80, /* [148'0x94] DUP1 */
  0x60, /* [149'0x95] PUSH1 */
  0x00, /* constant data */
  0x01, /* [151'0x97] ADD */
  0x90, /* [152'0x98] SWAP1 */
  0x50, /* [153'0x99] POP */
  0x60, /* [154'0x9a] PUSH1 */
  0x00, /* constant data */
  0x60, /* [156'0x9c] PUSH1 */
  0x40, /* constant data */
  0x51, /* [158'0x9e] MLOAD */
  0x80, /* [159'0x9f] DUP1 */
  0x83, /* [160'0xa0] DUP4 */
  0x03, /* [161'0xa1] SUB */
  0x81, /* [162'0xa2] DUP2 */
  0x85, /* [163'0xa3] DUP6 */
  0x87, /* [164'0xa4] DUP8 */
  0x5a, /* [165'0xa5] GAS */
  0xf1, /* [166'0xa6] CALL */
  0x92, /* [167'0xa7] SWAP3 */
  0x50, /* [168'0xa8] POP */
  0x50, /* [169'0xa9] POP */
  0x50, /* [170'0xaa] POP */
  0x3d, /* [171'0xab] RETURNDATASIZE */
  0x80, /* [172'0xac] DUP1 */
  0x60, /* [173'0xad] PUSH1 */
  0x00, /* constant data */
  0x81, /* [175'0xaf] DUP2 */
  0x14, /* [176'0xb0] EQ */
  0x60, /* [177'0xb1] PUSH1 */
  0xd4, /* constant data */
  0x57, /* [179'0xb3] JUMPI */
  0x60, /* [180'0xb4] PUSH1 */
  0x40, /* constant data */
  0x51, /* [182'0xb6] MLOAD */
  0x91, /* [183'0xb7] SWAP2 */
  0x50, /* [184'0xb8] POP */
  0x60, /* [185'0xb9] PUSH1 */
  0x1f, /* constant data */
  0x19, /* [187'0xbb] NOT */
  0x60, /* [188'0xbc] PUSH1 */
  0x3f, /* constant data */
  0x3d, /* [190'0xbe] RETURNDATASIZE */
  0x01, /* [191'0xbf] ADD */
  0x16, /* [192'0xc0] AND */
  0x82, /* [193'0xc1] DUP3 */
  0x01, /* [194'0xc2] ADD */
  0x60, /* [195'0xc3] PUSH1 */
  0x40, /* constant data */
  0x52, /* [197'0xc5] MSTORE */
  0x3d, /* [198'0xc6] RETURNDATASIZE */
  0x82, /* [199'0xc7] DUP3 */
  0x52, /* [200'0xc8] MSTORE */
  0x3d, /* [201'0xc9] RETURNDATASIZE */
  0x60, /* [202'0xca] PUSH1 */
  0x00, /* constant data */
  0x60, /* [204'0xcc] PUSH1 */
  0x20, /* constant data */
  0x84, /* [206'0xce] DUP5 */
  0x01, /* [207'0xcf] ADD */
  0x3e, /* [208'0xd0] RETURNDATACOPY */
  0x60, /* [209'0xd1] PUSH1 */
  0xd9, /* constant data */
  0x56, /* [211'0xd3] JUMP */
  0x5b, /* [212'0xd4] JUMPDEST */
  0x60, /* [213'0xd5] PUSH1 */
  0x60, /* constant data */
  0x91, /* [215'0xd7] SWAP2 */
  0x50, /* [216'0xd8] POP */
  0x5b, /* [217'0xd9] JUMPDEST */
  0x50, /* [218'0xda] POP */
  0x50, /* [219'0xdb] POP */
  0x50, /* [220'0xdc] POP */
  0x50, /* [221'0xdd] POP */
  0x50, /* [222'0xde] POP */
  0x56, /* [223'0xdf] JUMP */
  0xfe, /* [224'0xe0] INVALID */
  0xa2, /* [225'0xe1] LOG2 */
  0x64, /* [226'0xe2] PUSH5 */
  0x69, 0x70, 0x66, 0x73, 0x58, /* constant data */
  0x22, /* [232'0xe8] INVALID' byte */
  0x12, /* [233'0xe9] SLT */
  0x20, /* [234'0xea] SHA3 */
  0x7d, /* [235'0xeb] PUSH30 */
  0x0c, 0xd0, 0xcc, 0xf4, 0x40, 0xd1, 0xc1, 0xab, 0x0b, 0x4a, 0xd3,
  0xb9, 0x75, 0xd8, 0xba, 0x1c, 0x28, 0x04, 0x5c, 0xd9, 0x1b, 0xac,
  0xc1, 0xfc, 0x44, 0x59, 0x84, 0xcb, 0xaa, 0x38, /* constant data */
  0xfc, /* [266'0x10a] INVALID' byte */
  0x64, /* [267'0x10b] PUSH5 */
  0x73, 0x6f, 0x6c, 0x63, 0x43, /* constant data */
  0x00, /* [273'0x111] STOP */
  0x07, /* [274'0x112] SMOD */
  0x06, /* [275'0x113] MOD */
  0x00, /* [276'0x114] STOP */
  0x33, /* [277'0x115] CALLER */
};

const eevm::Code& eevm::EVM2CPP_SafeSending::bytecode()
{
  return _contract_bytecode;
}

const std::string eevm::EVM2CPP_SafeSending::_contract_name = "SafeSending";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_SafeSending>
  eevm::EVM2CPP_SafeSending::reg{};
const std::string& eevm::EVM2CPP_SafeSending::name()
{
  return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_f = 0xf_u256;
constexpr uint256_t c_1f = 0x1f_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_28 = 0x28_u256;
constexpr uint256_t c_2d = 0x2d_u256;
constexpr uint256_t c_3f = 0x3f_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_41 = 0x41_u256;
constexpr uint256_t c_60 = 0x60_u256;
constexpr uint256_t c_76 = 0x76_u256;
constexpr uint256_t c_78 = 0x78_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_d4 = 0xd4_u256;
constexpr uint256_t c_d9 = 0xd9_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_d0679d34 = 0xd0679d34_u256;
constexpr uint256_t g_20 = 0x736f6c6343_u256;
constexpr uint256_t g_11 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_17 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0_u256;

// code
void eevm::EVM2CPP_SafeSending::dispatch()
{
  static void* _JUMP_TABLE_ARR[] = {
    &&_evm_start,

    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_f,    &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_28,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_2d,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_41,   &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_76,   &&__invld, &&pc_78,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_d4,   &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_d9,      &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,

  };

  goto _evm_start;

__invld:
  throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) \
  { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) \
    { \
      goto* _JUMP_TABLE_ARR[_jump_target]; \
    } \
    else \
    { \
      goto __invld; \
    } \
  }

_evm_start:
pc_0 : { /* <============ */
  on_bb_start(0);
  /* PUSH1 */
  /* val = [128] */

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((1, 64)) */
  /* op_1 = Constant((0, 128)) */
  mstore_v(c_40, c_80);

  /* CALLVALUE */
  const uint256_t v_3_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_5_0 = iszero_v(v_3_0);

  /* PUSH1 */
  /* val = [15] */

  /* JUMPI */
  /* op_0 = Constant((6, 15)) */
  /* op_1 = InstructionRef((5, 0)) */
  if (v_5_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_f;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_b : { /* <============ */
  on_bb_start(11);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_f : { /* <============ */
  on_bb_start(15);
  /* JUMPDEST */

  /* POP */

  /* PUSH1 */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_3_0 = calldatasize_v();

  /* LT */
  /* op_0 = InstructionRef((3, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_4_0 = lt_v(v_3_0, c_4);

  /* PUSH1 */
  /* val = [40] */

  /* JUMPI */
  /* op_0 = Constant((5, 40)) */
  /* op_1 = InstructionRef((4, 0)) */
  if (v_4_0)
  {
    /* BB finalizer */
    /* no stack sets */
    ctxt->s.pop_drop_n(1);
    /* no BB returns */

    goto pc_28;
  }

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_18 : { /* <============ */
  on_bb_start(24);
  /* PUSH1 */
  /* val = [0] */

  /* CALLDATALOAD */
  /* op_0 = Constant((0, 0)) */
  const uint256_t v_1_0 = calldataload_v(c_0);

  /* PUSH1 */
  /* val = [224] */

  /* SHR */
  /* op_0 = Constant((2, 224)) */
  /* op_1 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = shr_v(c_e0, v_1_0);

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* PUSH4 */
  /* val = [3496451380] */

  /* EQ */
  /* op_0 = Constant((5, 3496451380)) */
  /* op_1 = InstructionRef((3, 0)) */
  const uint256_t v_6_0 = eq_v(c_d0679d34, v_3_0);

  /* PUSH1 */
  /* val = [45] */

  /* JUMPI */
  /* op_0 = Constant((7, 45)) */
  /* op_1 = InstructionRef((6, 0)) */
  if (v_6_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_2d;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_28 : { /* <============ */
  on_bb_start(40);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = Constant((1, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_2d : { /* <============ */
  on_bb_start(45);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [118] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((2, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_4_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_5_0 = sub_v(v_4_0, c_4);

  /* PUSH1 */
  /* val = [64] */

  /* DUP2 */
  /* op_0 = InstructionRef((5, 0)) */

  /* LT */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((6, 64)) */
  const uint256_t v_8_0 = lt_v(v_5_0, c_40);

  /* ISZERO */
  /* op_0 = InstructionRef((8, 0)) */
  const uint256_t v_9_0 = iszero_v(v_8_0);

  /* PUSH1 */
  /* val = [65] */

  /* JUMPI */
  /* op_0 = Constant((10, 65)) */
  /* op_1 = InstructionRef((9, 0)) */
  if (v_9_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 118))*/
    ctxt->s.push(c_76);
    /* BB return 1 Constant((2, 4))*/
    ctxt->s.push(c_4);
    /* BB return 2 InstructionRef((5, 0))*/
    ctxt->s.push(v_5_0);

    goto pc_41;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 118))*/
  ctxt->s.push(c_76);
  /* BB return 1 Constant((2, 4))*/
  ctxt->s.push(c_4);
  /* BB return 2 InstructionRef((5, 0))*/
  ctxt->s.push(v_5_0);
}
pc_3d : { /* <============ */
  on_bb_start(61);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_41 : { /* <============ */
  on_bb_start(65);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_11, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((10, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_11_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((11, 0)) */

  /* CALLDATALOAD */
  /* op_0 = InstructionRef((11, 0)) */
  const uint256_t v_17_0 = calldataload_v(v_11_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((19, 32)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_20_0 = add_v(c_20, v_11_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((20, 0)) */
  /* op_1 = InstructionRef((17, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((20, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [120] */

  /* JUMP */
  /* op_0 = Constant((28, 120)) */
  /* BB finalizer */
  ctxt->s.set(0, v_17_0);

  ctxt->s.set(1, v_8_0);
  /* no pops at end */
  /* no BB returns */

  goto pc_78;
}
pc_76 : { /* <============ */
  on_bb_start(118);
  /* JUMPDEST */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_78 : { /* <============ */
  on_bb_start(120);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_3_0 = and_v(g_11, s_0_1);

  /* DUP2 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((5, 64)) */
  const uint256_t v_6_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((6, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* ADD */
  /* op_0 = Constant((8, 0)) */
  /* op_1 = InstructionRef((6, 0)) */
  /* val = [] */

  /* SWAP1 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = InstructionRef((6, 0)) */

  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((13, 64)) */
  const uint256_t v_14_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((14, 0)) */

  /* DUP4 */
  /* op_0 = InstructionRef((6, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = InstructionRef((14, 0)) */
  const uint256_t v_17_0 = sub_v(v_6_0, v_14_0);

  /* DUP2 */
  /* op_0 = InstructionRef((14, 0)) */

  /* DUP6 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP8 */
  /* op_0 = InstructionRef((3, 0)) */

  /* GAS */
  const uint256_t v_21_0 = gas_v();

  /* CALL */
  /* op_0 = InstructionRef((21, 0)) */
  /* op_1 = InstructionRef((3, 0)) */
  /* op_2 = StackRef((0, 0)) */
  /* op_3 = InstructionRef((14, 0)) */
  /* op_4 = InstructionRef((17, 0)) */
  /* op_5 = InstructionRef((14, 0)) */
  /* op_6 = Constant((12, 0)) */
  const uint256_t v_22_0 =
    call_v(v_21_0, v_3_0, s_0_0, v_14_0, v_17_0, v_14_0, c_0);
  if (ctxt->error)
    goto exit_label;

  /* SWAP3 */
  /* op_0 = InstructionRef((22, 0)) */
  /* op_1 = InstructionRef((3, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* RETURNDATASIZE */
  const uint256_t v_27_0 = returndatasize_v();

  /* DUP1 */
  /* op_0 = InstructionRef((27, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* DUP2 */
  /* op_0 = InstructionRef((27, 0)) */

  /* EQ */
  /* op_0 = InstructionRef((27, 0)) */
  /* op_1 = Constant((29, 0)) */
  const uint256_t v_31_0 = eq_v(v_27_0, c_0);

  /* PUSH1 */
  /* val = [212] */

  /* JUMPI */
  /* op_0 = Constant((32, 212)) */
  /* op_1 = InstructionRef((31, 0)) */
  if (v_31_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((22, 0))*/
    ctxt->s.push(v_22_0);
    /* BB return 1 InstructionRef((27, 0))*/
    ctxt->s.push(v_27_0);
    /* BB return 2 InstructionRef((27, 0))*/
    ctxt->s.push(v_27_0);

    goto pc_d4;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((22, 0))*/
  ctxt->s.push(v_22_0);
  /* BB return 1 InstructionRef((27, 0))*/
  ctxt->s.push(v_27_0);
  /* BB return 2 InstructionRef((27, 0))*/
  ctxt->s.push(v_27_0);
}
pc_b4 : { /* <============ */
  on_bb_start(180);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((0, 64)) */
  const uint256_t v_1_0 = mload_v(c_40);

  /* SWAP2 */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* PUSH1 */
  /* val = [31] */

  /* NOT */
  /* op_0 = Constant((4, 31)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584007913129639904]
   */

  /* PUSH1 */
  /* val = [63] */

  /* RETURNDATASIZE */
  const uint256_t v_7_0 = returndatasize_v();

  /* ADD */
  /* op_0 = InstructionRef((7, 0)) */
  /* op_1 = Constant((6, 63)) */
  const uint256_t v_8_0 = add_v(v_7_0, c_3f);

  /* AND */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = Constant((5,
   * 115792089237316195423570985008687907853269984665640564039457584007913129639904))
   */
  const uint256_t v_9_0 = and_v(v_8_0, g_17);

  /* DUP3 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ADD */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_11_0 = add_v(v_1_0, v_9_0);

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((12, 64)) */
  /* op_1 = InstructionRef((11, 0)) */
  mstore_v(c_40, v_11_0);

  /* RETURNDATASIZE */
  const uint256_t v_14_0 = returndatasize_v();

  /* DUP3 */
  /* op_0 = InstructionRef((1, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = InstructionRef((14, 0)) */
  mstore_v(v_1_0, v_14_0);

  /* RETURNDATASIZE */
  const uint256_t v_17_0 = returndatasize_v();

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [32] */

  /* DUP5 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ADD */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = Constant((19, 32)) */
  const uint256_t v_21_0 = add_v(v_1_0, c_20);

  /* RETURNDATACOPY */
  /* op_0 = InstructionRef((21, 0)) */
  /* op_1 = Constant((18, 0)) */
  /* op_2 = InstructionRef((17, 0)) */
  returndatacopy_v(v_21_0, c_0, v_17_0);

  /* PUSH1 */
  /* val = [217] */

  /* JUMP */
  /* op_0 = Constant((23, 217)) */
  /* BB finalizer */
  ctxt->s.set(1, v_1_0);
  /* no pops at end */
  /* no BB returns */

  goto pc_d9;
}
pc_d4 : { /* <============ */
  on_bb_start(212);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [96] */

  /* SWAP2 */
  /* op_0 = Constant((1, 96)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* BB finalizer */
  ctxt->s.set(1, c_60);
  /* no pops at end */
  /* no BB returns */
}
pc_d9 : { /* <============ */
  on_bb_start(217);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  /* JUMPDEST */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 5)) */
  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(6);
  /* no BB returns */

  JUMP(s_0_5);
}
pc_e0 : { /* <============ */
  on_bb_start(224);
  /* INVALID */
  invalid_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_e1 : { /* <============ */
  on_bb_start(225);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  /* LOG2 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  /* op_3 = StackRef((0, 3)) */
  log2_v(s_0_0, s_0_1, s_0_2, s_0_3);

  /* PUSH5 */
  /* val = [452857328472] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0xe1 (inst offset 2; byte 0x22)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_e9 : { /* <============ */
  on_bb_start(233);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SLT */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  TRACE_COMP(eevm::Opcode::SLT, s_0_0, s_0_1);
  const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);

  /* SHA3 */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);

  /* PUSH30 */
  /* val =
   * [88450209255693178610435185464343732375629779093348785498948875758316088]
   */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0xe9 (inst offset 3; byte 0xfc)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_10b : { /* <============ */
  on_bb_start(267);
  /* PUSH5 */
  /* val = [495790613315] */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((0, 495790613315))*/
  ctxt->s.push(g_20);
}
pc_112 : { /* <============ */
  on_bb_start(274);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SMOD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = smod_v(s_0_0, s_0_1);

  /* MOD */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = mod_v(v_0_0, s_0_2);

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(2, v_1_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_115 : { /* <============ */
  on_bb_start(277);
  /* CALLER */
  const uint256_t v_0_0 = caller_v();

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((0, 0))*/
  ctxt->s.push(v_0_0);
}
exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
  0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15, 0x61, 0x0,  0x10, 0x57, 0x60,
  0x0,  0x80, 0xfd, 0x5b, 0x50, 0x61, 0x1,  0x16, 0x80, 0x61, 0x0,  0x20, 0x60,
  0x0,  0x39, 0x60, 0x0,  0xf3, 0xfe, 0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80,
  0x15, 0x60, 0xf,  0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50, 0x60, 0x4,  0x36,
  0x10, 0x60, 0x28, 0x57, 0x60, 0x0,  0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0xd0,
  0x67, 0x9d, 0x34, 0x14, 0x60, 0x2d, 0x57, 0x5b, 0x60, 0x0,  0x80, 0xfd, 0x5b,
  0x60, 0x76, 0x60, 0x4,  0x80, 0x36, 0x3,  0x60, 0x40, 0x81, 0x10, 0x15, 0x60,
  0x41, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x35,
  0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x90, 0x60, 0x20, 0x1,
  0x90, 0x92, 0x91, 0x90, 0x80, 0x35, 0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91,
  0x90, 0x50, 0x50, 0x50, 0x60, 0x78, 0x56, 0x5b, 0x0,  0x5b, 0x81, 0x73, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x60, 0x40, 0x51, 0x80, 0x60,
  0x0,  0x1,  0x90, 0x50, 0x60, 0x0,  0x60, 0x40, 0x51, 0x80, 0x83, 0x3,  0x81,
  0x85, 0x87, 0x5a, 0xf1, 0x92, 0x50, 0x50, 0x50, 0x3d, 0x80, 0x60, 0x0,  0x81,
  0x14, 0x60, 0xd4, 0x57, 0x60, 0x40, 0x51, 0x91, 0x50, 0x60, 0x1f, 0x19, 0x60,
  0x3f, 0x3d, 0x1,  0x16, 0x82, 0x1,  0x60, 0x40, 0x52, 0x3d, 0x82, 0x52, 0x3d,
  0x60, 0x0,  0x60, 0x20, 0x84, 0x1,  0x3e, 0x60, 0xd9, 0x56, 0x5b, 0x60, 0x60,
  0x91, 0x50, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0xfe, 0xa2, 0x64, 0x69,
  0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20, 0x7d, 0xc,  0xd0, 0xcc, 0xf4, 0x40,
  0xd1, 0xc1, 0xab, 0xb,  0x4a, 0xd3, 0xb9, 0x75, 0xd8, 0xba, 0x1c, 0x28, 0x4,
  0x5c, 0xd9, 0x1b, 0xac, 0xc1, 0xfc, 0x44, 0x59, 0x84, 0xcb, 0xaa, 0x38, 0xfc,
  0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x0,  0x7,  0x6,  0x0,  0x33,
};

const eevm::Code& eevm::EVM2CPP_SafeSending::constructor_bytecode()
{
  return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_SafeSending::constructor_args()
{
  return _constructor_args;
}
