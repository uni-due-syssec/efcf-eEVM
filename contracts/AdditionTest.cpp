// auto-generated by evm2cpp
#include "eEVM/evm2cpp/contracts/AdditionTest.h"

// this is generated code and we might have emitted some variables/labels that
// are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
  0x60, /* [0'0x0] PUSH1 */
  0x80, /* constant data */
  0x60, /* [2'0x2] PUSH1 */
  0x40, /* constant data */
  0x52, /* [4'0x4] MSTORE */
  0x34, /* [5'0x5] CALLVALUE */
  0x80, /* [6'0x6] DUP1 */
  0x15, /* [7'0x7] ISZERO */
  0x61, /* [8'0x8] PUSH2 */
  0x00, 0x10, /* constant data */
  0x57, /* [11'0xb] JUMPI */
  0x60, /* [12'0xc] PUSH1 */
  0x00, /* constant data */
  0x80, /* [14'0xe] DUP1 */
  0xfd, /* [15'0xf] REVERT */
  0x5b, /* [16'0x10] JUMPDEST */
  0x50, /* [17'0x11] POP */
  0x60, /* [18'0x12] PUSH1 */
  0x04, /* constant data */
  0x36, /* [20'0x14] CALLDATASIZE */
  0x10, /* [21'0x15] LT */
  0x61, /* [22'0x16] PUSH2 */
  0x00, 0x2b, /* constant data */
  0x57, /* [25'0x19] JUMPI */
  0x60, /* [26'0x1a] PUSH1 */
  0x00, /* constant data */
  0x35, /* [28'0x1c] CALLDATALOAD */
  0x60, /* [29'0x1d] PUSH1 */
  0xe0, /* constant data */
  0x1c, /* [31'0x1f] SHR */
  0x80, /* [32'0x20] DUP1 */
  0x63, /* [33'0x21] PUSH4 */
  0x8e, 0x02, 0x73, 0xbb, /* constant data */
  0x14, /* [38'0x26] EQ */
  0x61, /* [39'0x27] PUSH2 */
  0x00, 0x30, /* constant data */
  0x57, /* [42'0x2a] JUMPI */
  0x5b, /* [43'0x2b] JUMPDEST */
  0x60, /* [44'0x2c] PUSH1 */
  0x00, /* constant data */
  0x80, /* [46'0x2e] DUP1 */
  0xfd, /* [47'0x2f] REVERT */
  0x5b, /* [48'0x30] JUMPDEST */
  0x61, /* [49'0x31] PUSH2 */
  0x00, 0x72, /* constant data */
  0x60, /* [52'0x34] PUSH1 */
  0x04, /* constant data */
  0x80, /* [54'0x36] DUP1 */
  0x36, /* [55'0x37] CALLDATASIZE */
  0x03, /* [56'0x38] SUB */
  0x60, /* [57'0x39] PUSH1 */
  0x20, /* constant data */
  0x81, /* [59'0x3b] DUP2 */
  0x10, /* [60'0x3c] LT */
  0x15, /* [61'0x3d] ISZERO */
  0x61, /* [62'0x3e] PUSH2 */
  0x00, 0x46, /* constant data */
  0x57, /* [65'0x41] JUMPI */
  0x60, /* [66'0x42] PUSH1 */
  0x00, /* constant data */
  0x80, /* [68'0x44] DUP1 */
  0xfd, /* [69'0x45] REVERT */
  0x5b, /* [70'0x46] JUMPDEST */
  0x81, /* [71'0x47] DUP2 */
  0x01, /* [72'0x48] ADD */
  0x90, /* [73'0x49] SWAP1 */
  0x80, /* [74'0x4a] DUP1 */
  0x80, /* [75'0x4b] DUP1 */
  0x35, /* [76'0x4c] CALLDATALOAD */
  0x73, /* [77'0x4d] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [98'0x62] AND */
  0x90, /* [99'0x63] SWAP1 */
  0x60, /* [100'0x64] PUSH1 */
  0x20, /* constant data */
  0x01, /* [102'0x66] ADD */
  0x90, /* [103'0x67] SWAP1 */
  0x92, /* [104'0x68] SWAP3 */
  0x91, /* [105'0x69] SWAP2 */
  0x90, /* [106'0x6a] SWAP1 */
  0x50, /* [107'0x6b] POP */
  0x50, /* [108'0x6c] POP */
  0x50, /* [109'0x6d] POP */
  0x61, /* [110'0x6e] PUSH2 */
  0x00, 0x88, /* constant data */
  0x56, /* [113'0x71] JUMP */
  0x5b, /* [114'0x72] JUMPDEST */
  0x60, /* [115'0x73] PUSH1 */
  0x40, /* constant data */
  0x51, /* [117'0x75] MLOAD */
  0x80, /* [118'0x76] DUP1 */
  0x82, /* [119'0x77] DUP3 */
  0x81, /* [120'0x78] DUP2 */
  0x52, /* [121'0x79] MSTORE */
  0x60, /* [122'0x7a] PUSH1 */
  0x20, /* constant data */
  0x01, /* [124'0x7c] ADD */
  0x91, /* [125'0x7d] SWAP2 */
  0x50, /* [126'0x7e] POP */
  0x50, /* [127'0x7f] POP */
  0x60, /* [128'0x80] PUSH1 */
  0x40, /* constant data */
  0x51, /* [130'0x82] MLOAD */
  0x80, /* [131'0x83] DUP1 */
  0x91, /* [132'0x84] SWAP2 */
  0x03, /* [133'0x85] SUB */
  0x90, /* [134'0x86] SWAP1 */
  0xf3, /* [135'0x87] RETURN */
  0x5b, /* [136'0x88] JUMPDEST */
  0x60, /* [137'0x89] PUSH1 */
  0x00, /* constant data */
  0x81, /* [139'0x8b] DUP2 */
  0x60, /* [140'0x8c] PUSH1 */
  0x00, /* constant data */
  0x80, /* [142'0x8e] DUP1 */
  0x61, /* [143'0x8f] PUSH2 */
  0x01, 0x00, /* constant data */
  0x0a, /* [146'0x92] EXP */
  0x81, /* [147'0x93] DUP2 */
  0x54, /* [148'0x94] SLOAD */
  0x81, /* [149'0x95] DUP2 */
  0x73, /* [150'0x96] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x02, /* [171'0xab] MUL */
  0x19, /* [172'0xac] NOT */
  0x16, /* [173'0xad] AND */
  0x90, /* [174'0xae] SWAP1 */
  0x83, /* [175'0xaf] DUP4 */
  0x73, /* [176'0xb0] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [197'0xc5] AND */
  0x02, /* [198'0xc6] MUL */
  0x17, /* [199'0xc7] OR */
  0x90, /* [200'0xc8] SWAP1 */
  0x55, /* [201'0xc9] SSTORE */
  0x50, /* [202'0xca] POP */
  0x60, /* [203'0xcb] PUSH1 */
  0x00, /* constant data */
  0x80, /* [205'0xcd] DUP1 */
  0x54, /* [206'0xce] SLOAD */
  0x90, /* [207'0xcf] SWAP1 */
  0x61, /* [208'0xd0] PUSH2 */
  0x01, 0x00, /* constant data */
  0x0a, /* [211'0xd3] EXP */
  0x90, /* [212'0xd4] SWAP1 */
  0x04, /* [213'0xd5] DIV */
  0x73, /* [214'0xd6] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [235'0xeb] AND */
  0x73, /* [236'0xec] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [257'0x101] AND */
  0x63, /* [258'0x102] PUSH4 */
  0x77, 0x16, 0x02, 0xf7, /* constant data */
  0x60, /* [263'0x107] PUSH1 */
  0x0a, /* constant data */
  0x60, /* [265'0x109] PUSH1 */
  0x05, /* constant data */
  0x60, /* [267'0x10b] PUSH1 */
  0x40, /* constant data */
  0x51, /* [269'0x10d] MLOAD */
  0x83, /* [270'0x10e] DUP4 */
  0x63, /* [271'0x10f] PUSH4 */
  0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [276'0x114] AND */
  0x60, /* [277'0x115] PUSH1 */
  0xe0, /* constant data */
  0x1b, /* [279'0x117] SHL */
  0x81, /* [280'0x118] DUP2 */
  0x52, /* [281'0x119] MSTORE */
  0x60, /* [282'0x11a] PUSH1 */
  0x04, /* constant data */
  0x01, /* [284'0x11c] ADD */
  0x80, /* [285'0x11d] DUP1 */
  0x83, /* [286'0x11e] DUP4 */
  0x81, /* [287'0x11f] DUP2 */
  0x52, /* [288'0x120] MSTORE */
  0x60, /* [289'0x121] PUSH1 */
  0x20, /* constant data */
  0x01, /* [291'0x123] ADD */
  0x82, /* [292'0x124] DUP3 */
  0x81, /* [293'0x125] DUP2 */
  0x52, /* [294'0x126] MSTORE */
  0x60, /* [295'0x127] PUSH1 */
  0x20, /* constant data */
  0x01, /* [297'0x129] ADD */
  0x92, /* [298'0x12a] SWAP3 */
  0x50, /* [299'0x12b] POP */
  0x50, /* [300'0x12c] POP */
  0x50, /* [301'0x12d] POP */
  0x60, /* [302'0x12e] PUSH1 */
  0x20, /* constant data */
  0x60, /* [304'0x130] PUSH1 */
  0x40, /* constant data */
  0x51, /* [306'0x132] MLOAD */
  0x80, /* [307'0x133] DUP1 */
  0x83, /* [308'0x134] DUP4 */
  0x03, /* [309'0x135] SUB */
  0x81, /* [310'0x136] DUP2 */
  0x86, /* [311'0x137] DUP7 */
  0x80, /* [312'0x138] DUP1 */
  0x3b, /* [313'0x139] EXTCODESIZE */
  0x15, /* [314'0x13a] ISZERO */
  0x80, /* [315'0x13b] DUP1 */
  0x15, /* [316'0x13c] ISZERO */
  0x61, /* [317'0x13d] PUSH2 */
  0x01, 0x45, /* constant data */
  0x57, /* [320'0x140] JUMPI */
  0x60, /* [321'0x141] PUSH1 */
  0x00, /* constant data */
  0x80, /* [323'0x143] DUP1 */
  0xfd, /* [324'0x144] REVERT */
  0x5b, /* [325'0x145] JUMPDEST */
  0x50, /* [326'0x146] POP */
  0x5a, /* [327'0x147] GAS */
  0xfa, /* [328'0x148] STATICCALL */
  0x15, /* [329'0x149] ISZERO */
  0x80, /* [330'0x14a] DUP1 */
  0x15, /* [331'0x14b] ISZERO */
  0x61, /* [332'0x14c] PUSH2 */
  0x01, 0x59, /* constant data */
  0x57, /* [335'0x14f] JUMPI */
  0x3d, /* [336'0x150] RETURNDATASIZE */
  0x60, /* [337'0x151] PUSH1 */
  0x00, /* constant data */
  0x80, /* [339'0x153] DUP1 */
  0x3e, /* [340'0x154] RETURNDATACOPY */
  0x3d, /* [341'0x155] RETURNDATASIZE */
  0x60, /* [342'0x156] PUSH1 */
  0x00, /* constant data */
  0xfd, /* [344'0x158] REVERT */
  0x5b, /* [345'0x159] JUMPDEST */
  0x50, /* [346'0x15a] POP */
  0x50, /* [347'0x15b] POP */
  0x50, /* [348'0x15c] POP */
  0x50, /* [349'0x15d] POP */
  0x60, /* [350'0x15e] PUSH1 */
  0x40, /* constant data */
  0x51, /* [352'0x160] MLOAD */
  0x3d, /* [353'0x161] RETURNDATASIZE */
  0x60, /* [354'0x162] PUSH1 */
  0x20, /* constant data */
  0x81, /* [356'0x164] DUP2 */
  0x10, /* [357'0x165] LT */
  0x15, /* [358'0x166] ISZERO */
  0x61, /* [359'0x167] PUSH2 */
  0x01, 0x6f, /* constant data */
  0x57, /* [362'0x16a] JUMPI */
  0x60, /* [363'0x16b] PUSH1 */
  0x00, /* constant data */
  0x80, /* [365'0x16d] DUP1 */
  0xfd, /* [366'0x16e] REVERT */
  0x5b, /* [367'0x16f] JUMPDEST */
  0x81, /* [368'0x170] DUP2 */
  0x01, /* [369'0x171] ADD */
  0x90, /* [370'0x172] SWAP1 */
  0x80, /* [371'0x173] DUP1 */
  0x80, /* [372'0x174] DUP1 */
  0x51, /* [373'0x175] MLOAD */
  0x90, /* [374'0x176] SWAP1 */
  0x60, /* [375'0x177] PUSH1 */
  0x20, /* constant data */
  0x01, /* [377'0x179] ADD */
  0x90, /* [378'0x17a] SWAP1 */
  0x92, /* [379'0x17b] SWAP3 */
  0x91, /* [380'0x17c] SWAP2 */
  0x90, /* [381'0x17d] SWAP1 */
  0x50, /* [382'0x17e] POP */
  0x50, /* [383'0x17f] POP */
  0x50, /* [384'0x180] POP */
  0x90, /* [385'0x181] SWAP1 */
  0x50, /* [386'0x182] POP */
  0x91, /* [387'0x183] SWAP2 */
  0x90, /* [388'0x184] SWAP1 */
  0x50, /* [389'0x185] POP */
  0x56, /* [390'0x186] JUMP */
  0xfe, /* [391'0x187] INVALID */
  0xa2, /* [392'0x188] LOG2 */
  0x64, /* [393'0x189] PUSH5 */
  0x69, 0x70, 0x66, 0x73, 0x58, /* constant data */
  0x22, /* [399'0x18f] INVALID' byte */
  0x12, /* [400'0x190] SLT */
  0x20, /* [401'0x191] SHA3 */
  0xfc, /* [402'0x192] INVALID' byte */
  0xd3, /* [403'0x193] INVALID' byte */
  0x99, /* [404'0x194] SWAP10 */
  0x89, /* [405'0x195] DUP10 */
  0x5b, /* [406'0x196] JUMPDEST */
  0xfd, /* [407'0x197] REVERT */
  0x09, /* [408'0x198] MULMOD */
  0xf4, /* [409'0x199] DELEGATECALL */
  0x97, /* [410'0x19a] SWAP8 */
  0x3a, /* [411'0x19b] GASPRICE */
  0x68, /* [412'0x19c] PUSH9 */
  0xfc, 0x00, 0x2b, 0xc6, 0x05, 0x75, 0x3a, 0x71, 0xf0, /* constant data */
  0xa0, /* [422'0x1a6] LOG0 */
  0xe1, /* [423'0x1a7] INVALID' byte */
  0x5a, /* [424'0x1a8] GAS */
  0xb2, /* [425'0x1a9] INVALID' byte */
  0xb7, /* [426'0x1aa] INVALID' byte */
  0x8b, /* [427'0x1ab] DUP12 */
  0x47, /* [428'0x1ac] SELFBALANCE */
  0x2e, /* [429'0x1ad] INVALID' byte */
  0x86, /* [430'0x1ae] DUP7 */
  0x26, /* [431'0x1af] INVALID' byte */
  0xd1, /* [432'0x1b0] INVALID' byte */
  0xec, /* [433'0x1b1] INVALID' byte */
  0x64, /* [434'0x1b2] PUSH5 */
  0x73, 0x6f, 0x6c, 0x63, 0x43, /* constant data */
  0x00, /* [440'0x1b8] STOP */
  0x07, /* [441'0x1b9] SMOD */
  0x06, /* [442'0x1ba] MOD */
  0x00, /* [443'0x1bb] STOP */
  0x33, /* [444'0x1bc] CALLER */
};

const eevm::Code& eevm::EVM2CPP_AdditionTest::bytecode()
{
  return _contract_bytecode;
}

const std::string eevm::EVM2CPP_AdditionTest::_contract_name = "AdditionTest";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_AdditionTest> eevm::EVM2CPP_AdditionTest::reg{};

const std::string& eevm::EVM2CPP_AdditionTest::name()
{
  return _contract_name;
}

// interned globals
constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_5 = 0x5_u256;
constexpr uint256_t c_a = 0xa_u256;
constexpr uint256_t c_10 = 0x10_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_2b = 0x2b_u256;
constexpr uint256_t c_30 = 0x30_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_46 = 0x46_u256;
constexpr uint256_t c_72 = 0x72_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_88 = 0x88_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_145 = 0x145_u256;
constexpr uint256_t c_159 = 0x159_u256;
constexpr uint256_t c_16f = 0x16f_u256;
constexpr uint256_t c_771602f7 = 0x771602f7_u256;
constexpr uint256_t c_8e0273bb = 0x8e0273bb_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_26 = 0x736f6c6343_u256;
constexpr uint256_t g_25 = 0xfc002bc605753a71f0_u256;
constexpr uint256_t g_12 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_19 =
  0x771602f700000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_17 =
  0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_AdditionTest::dispatch()
{
  static void* _JUMP_TABLE_ARR[] = {
    &&_evm_start,

    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_10,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_2b,      &&__invld, &&__invld, &&__invld, &&__invld, &&pc_30,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_46,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_72,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_88,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_145,     &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_159,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_16f,     &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_196,  &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,

  };

  goto _evm_start;

__invld:
  throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) \
  { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) \
    { \
      goto* _JUMP_TABLE_ARR[_jump_target]; \
    } \
    else \
    { \
      goto __invld; \
    } \
  }

_evm_start:

  std::cout << "running AdditionTest " << std::endl;

pc_0 : { /* <============ */
  on_bb_start(0);
  /* PUSH1 */
  /* val = [128] */

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((1, 64)) */
  /* op_1 = Constant((0, 128)) */
  mstore_v(c_40, c_80);

  /* CALLVALUE */
  const uint256_t v_3_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_5_0 = iszero_v(v_3_0);

  /* PUSH2 */
  /* val = [16] */

  /* JUMPI */
  /* op_0 = Constant((6, 16)) */
  /* op_1 = InstructionRef((5, 0)) */

  if (v_5_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_10;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_c : { /* <============ */
  on_bb_start(12);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_10 : { /* <============ */
  on_bb_start(16);
  /* JUMPDEST */

  /* POP */

  /* PUSH1 */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_3_0 = calldatasize_v();

  /* LT */
  /* op_0 = InstructionRef((3, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_4_0 = lt_v(v_3_0, c_4);

  /* PUSH2 */
  /* val = [43] */

  /* JUMPI */
  /* op_0 = Constant((5, 43)) */
  /* op_1 = InstructionRef((4, 0)) */
  if (v_4_0)
  {
    /* BB finalizer */
    /* no stack sets */
    ctxt->s.pop_drop_n(1);
    /* no BB returns */

    goto pc_2b;
  }

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_1a : { /* <============ */
  on_bb_start(26);
  /* PUSH1 */
  /* val = [0] */

  /* CALLDATALOAD */
  /* op_0 = Constant((0, 0)) */
  const uint256_t v_1_0 = calldataload_v(c_0);

  /* PUSH1 */
  /* val = [224] */

  /* SHR */
  /* op_0 = Constant((2, 224)) */
  /* op_1 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = shr_v(c_e0, v_1_0);

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* PUSH4 */
  /* val = [2382525371] */

  /* EQ */
  /* op_0 = Constant((5, 2382525371)) */
  /* op_1 = InstructionRef((3, 0)) */
  const uint256_t v_6_0 = eq_v(c_8e0273bb, v_3_0);

  /* PUSH2 */
  /* val = [48] */

  /* JUMPI */
  /* op_0 = Constant((7, 48)) */
  /* op_1 = InstructionRef((6, 0)) */
  if (v_6_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_30;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_2b : { /* <============ */
  on_bb_start(43);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = Constant((1, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_30 : { /* <============ */
  on_bb_start(48);
  /* JUMPDEST */

  /* PUSH2 */
  /* val = [114] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((2, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_4_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_5_0 = sub_v(v_4_0, c_4);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((5, 0)) */

  /* LT */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((6, 32)) */
  const uint256_t v_8_0 = lt_v(v_5_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((8, 0)) */
  const uint256_t v_9_0 = iszero_v(v_8_0);

  /* PUSH2 */
  /* val = [70] */

  /* JUMPI */
  /* op_0 = Constant((10, 70)) */
  /* op_1 = InstructionRef((9, 0)) */
  if (v_9_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 114))*/
    ctxt->s.push(c_72);
    /* BB return 1 Constant((2, 4))*/
    ctxt->s.push(c_4);
    /* BB return 2 InstructionRef((5, 0))*/
    ctxt->s.push(v_5_0);

    goto pc_46;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 114))*/
  ctxt->s.push(c_72);
  /* BB return 1 Constant((2, 4))*/
  ctxt->s.push(c_4);
  /* BB return 2 InstructionRef((5, 0))*/
  ctxt->s.push(v_5_0);
}
pc_42 : { /* <============ */
  on_bb_start(66);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_46 : { /* <============ */
  on_bb_start(70);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_12, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((10, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_11_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [136] */

  /* JUMP */
  /* op_0 = Constant((19, 136)) */
  /* BB finalizer */
  ctxt->s.set(1, v_8_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_88;
}
pc_72 : { /* <============ */
  on_bb_start(114);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((1, 64)) */
  const uint256_t v_2_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((2, 0)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP2 */
  /* op_0 = InstructionRef((2, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(v_2_0, s_0_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((7, 32)) */
  /* op_1 = InstructionRef((2, 0)) */
  const uint256_t v_8_0 = add_v(c_20, v_2_0);

  /* SWAP2 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((12, 64)) */
  const uint256_t v_13_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((13, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = InstructionRef((13, 0)) */

  /* RETURN */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((16, 0)) */
  return_v(v_13_0, v_16_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_88 : { /* <============ */
  on_bb_start(136);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP2 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((3, 0)) */
  /* val = [0] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((5, 256)) */
  /* op_1 = Constant((3, 0)) */
  /* val = [1] */

  /* DUP2 */
  /* op_0 = Constant((3, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((3, 0)) */
  const uint256_t v_8_0 = sload_v(c_0);

  /* DUP2 */
  /* op_0 = Constant((6, 1)) */
  /* val = [1] */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* MUL */
  /* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = Constant((6, 1)) */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* NOT */
  /* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
  /* val =
   * [115792089237316195423570985007226406215939081747436879206741300988257197096960]
   */

  /* AND */
  /* op_0 = Constant((12,
   * 115792089237316195423570985007226406215939081747436879206741300988257197096960))
   */
  /* op_1 = InstructionRef((8, 0)) */
  const uint256_t v_13_0 = and_v(g_17, v_8_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = Constant((6, 1)) */

  /* DUP4 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_17_0 = and_v(g_12, s_0_0);

  /* MUL */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = Constant((6, 1)) */
  /* val = [] */

  /* OR */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  const uint256_t v_19_0 = or_v(v_17_0, v_13_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((19, 0)) */
  /* op_1 = Constant((3, 0)) */

  /* SSTORE */
  /* op_0 = Constant((3, 0)) */
  /* op_1 = InstructionRef((19, 0)) */
  sstore_v(c_0, v_19_0);

  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((23, 0)) */
  /* val = [0] */

  /* SLOAD */
  /* op_0 = Constant((23, 0)) */
  const uint256_t v_25_0 = sload_v(c_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((25, 0)) */
  /* op_1 = Constant((23, 0)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((27, 256)) */
  /* op_1 = Constant((23, 0)) */
  /* val = [1] */

  /* SWAP1 */
  /* op_0 = Constant((28, 1)) */
  /* op_1 = InstructionRef((25, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((25, 0)) */
  /* op_1 = Constant((28, 1)) */
  /* val = [] */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((31, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((25, 0)) */
  const uint256_t v_32_0 = and_v(g_12, v_25_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((33, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((32, 0)) */
  const uint256_t v_34_0 = and_v(g_12, v_32_0);

  /* PUSH4 */
  /* val = [1997931255] */

  /* PUSH1 */
  /* val = [10] */

  /* PUSH1 */
  /* val = [5] */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((38, 64)) */
  const uint256_t v_39_0 = mload_v(c_40);

  /* DUP4 */
  /* op_0 = Constant((35, 1997931255)) */
  /* val = [1997931255] */

  /* PUSH4 */
  /* val = [4294967295] */

  /* AND */
  /* op_0 = Constant((41, 4294967295)) */
  /* op_1 = Constant((35, 1997931255)) */
  /* val = [1997931255] */

  /* PUSH1 */
  /* val = [224] */

  /* SHL */
  /* op_0 = Constant((43, 224)) */
  /* op_1 = Constant((42, 1997931255)) */
  /* val =
   * [53864120079433345039012011759913064921416355370742736265589799810246985646080]
   */

  /* DUP2 */
  /* op_0 = InstructionRef((39, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((39, 0)) */
  /* op_1 = Constant((44,
   * 53864120079433345039012011759913064921416355370742736265589799810246985646080))
   */
  mstore_v(v_39_0, g_19);

  /* PUSH1 */
  /* val = [4] */

  /* ADD */
  /* op_0 = Constant((47, 4)) */
  /* op_1 = InstructionRef((39, 0)) */
  const uint256_t v_48_0 = add_v(c_4, v_39_0);

  /* DUP1 */
  /* op_0 = InstructionRef((48, 0)) */

  /* DUP4 */
  /* op_0 = Constant((36, 10)) */
  /* val = [10] */

  /* DUP2 */
  /* op_0 = InstructionRef((48, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((48, 0)) */
  /* op_1 = Constant((36, 10)) */
  mstore_v(v_48_0, c_a);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((53, 32)) */
  /* op_1 = InstructionRef((48, 0)) */
  const uint256_t v_54_0 = add_v(c_20, v_48_0);

  /* DUP3 */
  /* op_0 = Constant((37, 5)) */
  /* val = [5] */

  /* DUP2 */
  /* op_0 = InstructionRef((54, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((54, 0)) */
  /* op_1 = Constant((37, 5)) */
  mstore_v(v_54_0, c_5);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((58, 32)) */
  /* op_1 = InstructionRef((54, 0)) */
  const uint256_t v_59_0 = add_v(c_20, v_54_0);

  /* SWAP3 */
  /* op_0 = InstructionRef((59, 0)) */
  /* op_1 = Constant((36, 10)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [32] */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((65, 64)) */
  const uint256_t v_66_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((66, 0)) */

  /* DUP4 */
  /* op_0 = InstructionRef((59, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((59, 0)) */
  /* op_1 = InstructionRef((66, 0)) */
  const uint256_t v_69_0 = sub_v(v_59_0, v_66_0);

  /* DUP2 */
  /* op_0 = InstructionRef((66, 0)) */

  /* DUP7 */
  /* op_0 = InstructionRef((34, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((34, 0)) */

  /* EXTCODESIZE */
  /* op_0 = InstructionRef((34, 0)) */
  const uint256_t v_73_0 = extcodesize_v(v_34_0);

  /* ISZERO */
  /* op_0 = InstructionRef((73, 0)) */
  const uint256_t v_74_0 = iszero_v(v_73_0);

  /* DUP1 */
  /* op_0 = InstructionRef((74, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((74, 0)) */
  const uint256_t v_76_0 = iszero_v(v_74_0);

  /* PUSH2 */
  /* val = [325] */

  /* JUMPI */
  /* op_0 = Constant((77, 325)) */
  /* op_1 = InstructionRef((76, 0)) */
  if (v_76_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 0))*/
    ctxt->s.push(c_0);
    /* BB return 1 InstructionRef((34, 0))*/
    ctxt->s.push(v_34_0);
    /* BB return 2 Constant((35, 1997931255))*/
    ctxt->s.push(c_771602f7);
    /* BB return 3 InstructionRef((59, 0))*/
    ctxt->s.push(v_59_0);
    /* BB return 4 Constant((64, 32))*/
    ctxt->s.push(c_20);
    /* BB return 5 InstructionRef((66, 0))*/
    ctxt->s.push(v_66_0);
    /* BB return 6 InstructionRef((69, 0))*/
    ctxt->s.push(v_69_0);
    /* BB return 7 InstructionRef((66, 0))*/
    ctxt->s.push(v_66_0);
    /* BB return 8 InstructionRef((34, 0))*/
    ctxt->s.push(v_34_0);
    /* BB return 9 InstructionRef((74, 0))*/
    ctxt->s.push(v_74_0);

    goto pc_145;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 0))*/
  ctxt->s.push(c_0);
  /* BB return 1 InstructionRef((34, 0))*/
  ctxt->s.push(v_34_0);
  /* BB return 2 Constant((35, 1997931255))*/
  ctxt->s.push(c_771602f7);
  /* BB return 3 InstructionRef((59, 0))*/
  ctxt->s.push(v_59_0);
  /* BB return 4 Constant((64, 32))*/
  ctxt->s.push(c_20);
  /* BB return 5 InstructionRef((66, 0))*/
  ctxt->s.push(v_66_0);
  /* BB return 6 InstructionRef((69, 0))*/
  ctxt->s.push(v_69_0);
  /* BB return 7 InstructionRef((66, 0))*/
  ctxt->s.push(v_66_0);
  /* BB return 8 InstructionRef((34, 0))*/
  ctxt->s.push(v_34_0);
  /* BB return 9 InstructionRef((74, 0))*/
  ctxt->s.push(v_74_0);
}
pc_141 : { /* <============ */
  on_bb_start(321);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_145 : { /* <============ */
  on_bb_start(325);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  /* JUMPDEST */

  /* POP */

  /* GAS */
  const uint256_t v_2_0 = gas_v();

  /* STATICCALL */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  /* op_3 = StackRef((0, 3)) */
  /* op_4 = StackRef((0, 4)) */
  /* op_5 = StackRef((0, 5)) */
  const uint256_t v_3_0 =
    staticcall_v(v_2_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5);

  /* ISZERO */
  /* op_0 = InstructionRef((3, 0)) */
  const uint256_t v_4_0 = iszero_v(v_3_0);

  /* DUP1 */
  /* op_0 = InstructionRef((4, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((4, 0)) */
  const uint256_t v_6_0 = iszero_v(v_4_0);

  /* PUSH2 */
  /* val = [345] */

  /* JUMPI */
  /* op_0 = Constant((7, 345)) */
  /* op_1 = InstructionRef((6, 0)) */
  if (v_6_0)
  {
    /* BB finalizer */
    ctxt->s.set(5, v_4_0);
    ctxt->s.pop_drop_n(5);
    /* no BB returns */

    goto pc_159;
  }

  /* BB finalizer */
  ctxt->s.set(5, v_4_0);
  ctxt->s.pop_drop_n(5);
  /* no BB returns */
}
pc_150 : { /* <============ */
  on_bb_start(336);
  /* RETURNDATASIZE */
  const uint256_t v_0_0 = returndatasize_v();

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* RETURNDATACOPY */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = Constant((1, 0)) */
  /* op_2 = InstructionRef((0, 0)) */
  returndatacopy_v(c_0, c_0, v_0_0);

  /* RETURNDATASIZE */
  const uint256_t v_4_0 = returndatasize_v();

  /* PUSH1 */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((5, 0)) */
  /* op_1 = InstructionRef((4, 0)) */
  revert_v(c_0, v_4_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_159 : { /* <============ */
  on_bb_start(345);
  /* JUMPDEST */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((5, 64)) */
  const uint256_t v_6_0 = mload_v(c_40);

  /* RETURNDATASIZE */
  const uint256_t v_7_0 = returndatasize_v();

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((7, 0)) */

  /* LT */
  /* op_0 = InstructionRef((7, 0)) */
  /* op_1 = Constant((8, 32)) */
  const uint256_t v_10_0 = lt_v(v_7_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((10, 0)) */
  const uint256_t v_11_0 = iszero_v(v_10_0);

  /* PUSH2 */
  /* val = [367] */

  /* JUMPI */
  /* op_0 = Constant((12, 367)) */
  /* op_1 = InstructionRef((11, 0)) */
  if (v_11_0)
  {
    /* BB finalizer */
    ctxt->s.set(2, v_7_0);

    ctxt->s.set(3, v_6_0);
    ctxt->s.pop_drop_n(2);
    /* no BB returns */

    goto pc_16f;
  }

  /* BB finalizer */
  ctxt->s.set(2, v_7_0);

  ctxt->s.set(3, v_6_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_16b : { /* <============ */
  on_bb_start(363);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_16f : { /* <============ */
  on_bb_start(367);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* MLOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = mload_v(s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((8, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_9_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((9, 0)) */
  /* op_1 = InstructionRef((6, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((9, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* SWAP1 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 2)) */

  /* POP */

  /* SWAP2 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 4)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 4)) */
  /* op_1 = StackRef((0, 3)) */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 4)) */
  /* BB finalizer */
  ctxt->s.set(4, v_6_0);
  ctxt->s.pop_drop_n(4);
  /* no BB returns */

  JUMP(s_0_4);
}
pc_187 : { /* <============ */
  on_bb_start(391);
  /* INVALID */
  invalid_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_188 : { /* <============ */
  on_bb_start(392);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  /* LOG2 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  /* op_3 = StackRef((0, 3)) */
  log2_v(s_0_0, s_0_1, s_0_2, s_0_3);

  /* PUSH5 */
  /* val = [452857328472] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x188 (inst offset 2; byte 0x22)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_190 : { /* <============ */
  on_bb_start(400);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SLT */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);

  /* SHA3 */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x190 (inst offset 2; byte 0xfc)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_193 : { /* <============ */
  on_bb_start(403);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x193 (inst offset 0; byte 0xd3)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_194 : { /* <============ */
  on_bb_start(404);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_9 = ctxt->s.peek(9);
  const uint256_t s_0_10 = ctxt->s.peek(10);
  /* SWAP10 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 10)) */

  /* DUP10 */
  /* op_0 = StackRef((0, 9)) */

  /* BB finalizer */
  ctxt->s.set(0, s_0_10);

  ctxt->s.set(10, s_0_0);
  /* no pops at end */
  /* BB return 0 StackRef((0, 9))*/
  ctxt->s.push(s_0_9);
}
pc_196 : { /* <============ */
  on_bb_start(406);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* REVERT */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  revert_v(s_0_0, s_0_1);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_198 : { /* <============ */
  on_bb_start(408);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  const uint256_t s_0_6 = ctxt->s.peek(6);
  const uint256_t s_0_7 = ctxt->s.peek(7);
  const uint256_t s_0_15 = ctxt->s.peek(15);
  /* MULMOD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  const uint256_t v_0_0 = mulmod_v(s_0_0, s_0_1, s_0_2);

  /* DELEGATECALL */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 3)) */
  /* op_2 = StackRef((0, 4)) */
  /* op_3 = StackRef((0, 5)) */
  /* op_4 = StackRef((0, 6)) */
  /* op_5 = StackRef((0, 7)) */
  const uint256_t v_1_0 =
    delegatecall_v(v_0_0, s_0_3, s_0_4, s_0_5, s_0_6, s_0_7);

  /* SWAP8 */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = StackRef((0, 15)) */

  /* GASPRICE */
  const uint256_t v_3_0 = gasprice_v();

  /* PUSH9 */
  /* val = [4648591827725549466096] */

  /* LOG0 */
  /* op_0 = Constant((4, 4648591827725549466096)) */
  /* op_1 = InstructionRef((3, 0)) */
  log0_v(g_25, v_3_0);

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x198 (inst offset 6; byte 0xe1)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1a8 : { /* <============ */
  on_bb_start(424);
  /* GAS */
  const uint256_t v_0_0 = gas_v();

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x1a8 (inst offset 1; byte 0xb2)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1aa : { /* <============ */
  on_bb_start(426);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x1aa (inst offset 0; byte 0xb7)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1ab : { /* <============ */
  on_bb_start(427);
  const uint256_t s_0_11 = ctxt->s.peek(11);
  /* DUP12 */
  /* op_0 = StackRef((0, 11)) */

  /* SELFBALANCE */
  const uint256_t v_1_0 = selfbalance_v();

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x1ab (inst offset 2; byte 0x2e)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1ae : { /* <============ */
  on_bb_start(430);
  const uint256_t s_0_6 = ctxt->s.peek(6);
  /* DUP7 */
  /* op_0 = StackRef((0, 6)) */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x1ae (inst offset 1; byte 0x26)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1b0 : { /* <============ */
  on_bb_start(432);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x1b0 (inst offset 0; byte 0xd1)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1b1 : { /* <============ */
  on_bb_start(433);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x1b1 (inst offset 0; byte 0xec)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1b2 : { /* <============ */
  on_bb_start(434);
  /* PUSH5 */
  /* val = [495790613315] */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((0, 495790613315))*/
  ctxt->s.push(g_26);
}
pc_1b9 : { /* <============ */
  on_bb_start(441);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SMOD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = smod_v(s_0_0, s_0_1);

  /* MOD */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = mod_v(v_0_0, s_0_2);

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(2, v_1_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_1bc : { /* <============ */
  on_bb_start(444);
  /* CALLER */
  const uint256_t v_0_0 = caller_v();

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((0, 0))*/
  ctxt->s.push(v_0_0);
}
exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
  0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x0,  0x60, 0x1,  0x55, 0x34, 0x80, 0x15,
  0x61, 0x0,  0x15, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50, 0x61, 0x1,  0xbd,
  0x80, 0x61, 0x0,  0x25, 0x60, 0x0,  0x39, 0x60, 0x0,  0xf3, 0xfe, 0x60, 0x80,
  0x60, 0x40, 0x52, 0x34, 0x80, 0x15, 0x61, 0x0,  0x10, 0x57, 0x60, 0x0,  0x80,
  0xfd, 0x5b, 0x50, 0x60, 0x4,  0x36, 0x10, 0x61, 0x0,  0x2b, 0x57, 0x60, 0x0,
  0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0x8e, 0x2,  0x73, 0xbb, 0x14, 0x61, 0x0,
  0x30, 0x57, 0x5b, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x61, 0x0,  0x72, 0x60, 0x4,
  0x80, 0x36, 0x3,  0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x0,  0x46, 0x57, 0x60,
  0x0,  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x35, 0x73, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91,
  0x90, 0x50, 0x50, 0x50, 0x61, 0x0,  0x88, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80,
  0x82, 0x81, 0x52, 0x60, 0x20, 0x1,  0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80,
  0x91, 0x3,  0x90, 0xf3, 0x5b, 0x60, 0x0,  0x81, 0x60, 0x0,  0x80, 0x61, 0x1,
  0x0,  0xa,  0x81, 0x54, 0x81, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x2,  0x19, 0x16, 0x90, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x16, 0x2,  0x17, 0x90, 0x55, 0x50, 0x60, 0x0,  0x80, 0x54, 0x90, 0x61, 0x1,
  0x0,  0xa,  0x90, 0x4,  0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16,
  0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x63, 0x77, 0x16, 0x2,
  0xf7, 0x60, 0xa,  0x60, 0x5,  0x60, 0x40, 0x51, 0x83, 0x63, 0xff, 0xff, 0xff,
  0xff, 0x16, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x4,  0x1,  0x80, 0x83, 0x81,
  0x52, 0x60, 0x20, 0x1,  0x82, 0x81, 0x52, 0x60, 0x20, 0x1,  0x92, 0x50, 0x50,
  0x50, 0x60, 0x20, 0x60, 0x40, 0x51, 0x80, 0x83, 0x3,  0x81, 0x86, 0x80, 0x3b,
  0x15, 0x80, 0x15, 0x61, 0x1,  0x45, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50,
  0x5a, 0xfa, 0x15, 0x80, 0x15, 0x61, 0x1,  0x59, 0x57, 0x3d, 0x60, 0x0,  0x80,
  0x3e, 0x3d, 0x60, 0x0,  0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x60, 0x40, 0x51,
  0x3d, 0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x1,  0x6f, 0x57, 0x60, 0x0,  0x80,
  0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x51, 0x90, 0x60, 0x20, 0x1,  0x90,
  0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x90, 0x50, 0x91, 0x90, 0x50, 0x56, 0xfe,
  0xa2, 0x64, 0x69, 0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20, 0xfc, 0xd3, 0x99,
  0x89, 0x5b, 0xfd, 0x9,  0xf4, 0x97, 0x3a, 0x68, 0xfc, 0x0,  0x2b, 0xc6, 0x5,
  0x75, 0x3a, 0x71, 0xf0, 0xa0, 0xe1, 0x5a, 0xb2, 0xb7, 0x8b, 0x47, 0x2e, 0x86,
  0x26, 0xd1, 0xec, 0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x0,  0x7,  0x6,  0x0,
  0x33,
};

const eevm::Code& eevm::EVM2CPP_AdditionTest::constructor_bytecode()
{
  return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_AdditionTest::constructor_args()
{
  return _constructor_args;
}
