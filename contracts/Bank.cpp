// auto-generated by evm2cpp

#include "eEVM/evm2cpp/contracts/Bank.h"

#include "eEVM/fuzz/tracecomp.hpp"

// this is generated code and we might have emitted some variables/labels that
// are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
  0x60, /* [0'0x0] PUSH1 */
  0x80, /* constant data */
  0x60, /* [2'0x2] PUSH1 */
  0x40, /* constant data */
  0x52, /* [4'0x4] MSTORE */
  0x60, /* [5'0x5] PUSH1 */
  0x04, /* constant data */
  0x36, /* [7'0x7] CALLDATASIZE */
  0x10, /* [8'0x8] LT */
  0x61, /* [9'0x9] PUSH2 */
  0x00, 0x49, /* constant data */
  0x57, /* [12'0xc] JUMPI */
  0x60, /* [13'0xd] PUSH1 */
  0x00, /* constant data */
  0x35, /* [15'0xf] CALLDATALOAD */
  0x60, /* [16'0x10] PUSH1 */
  0xe0, /* constant data */
  0x1c, /* [18'0x12] SHR */
  0x80, /* [19'0x13] DUP1 */
  0x62, /* [20'0x14] PUSH3 */
  0x36, 0x2a, 0x95, /* constant data */
  0x14, /* [24'0x18] EQ */
  0x61, /* [25'0x19] PUSH2 */
  0x00, 0x4e, /* constant data */
  0x57, /* [28'0x1c] JUMPI */
  0x80, /* [29'0x1d] DUP1 */
  0x63, /* [30'0x1e] PUSH4 */
  0x27, 0xe2, 0x35, 0xe3, /* constant data */
  0x14, /* [35'0x23] EQ */
  0x61, /* [36'0x24] PUSH2 */
  0x00, 0x92, /* constant data */
  0x57, /* [39'0x27] JUMPI */
  0x80, /* [40'0x28] DUP1 */
  0x63, /* [41'0x29] PUSH4 */
  0x2e, 0x1a, 0x7d, 0x4d, /* constant data */
  0x14, /* [46'0x2e] EQ */
  0x61, /* [47'0x2f] PUSH2 */
  0x00, 0xf7, /* constant data */
  0x57, /* [50'0x32] JUMPI */
  0x80, /* [51'0x33] DUP1 */
  0x63, /* [52'0x34] PUSH4 */
  0xdb, 0x0f, 0xb1, 0x07, /* constant data */
  0x14, /* [57'0x39] EQ */
  0x61, /* [58'0x3a] PUSH2 */
  0x01, 0x32, /* constant data */
  0x57, /* [61'0x3d] JUMPI */
  0x80, /* [62'0x3e] DUP1 */
  0x63, /* [63'0x3f] PUSH4 */
  0xf8, 0xb2, 0xcb, 0x4f, /* constant data */
  0x14, /* [68'0x44] EQ */
  0x61, /* [69'0x45] PUSH2 */
  0x01, 0x83, /* constant data */
  0x57, /* [72'0x48] JUMPI */
  0x5b, /* [73'0x49] JUMPDEST */
  0x60, /* [74'0x4a] PUSH1 */
  0x00, /* constant data */
  0x80, /* [76'0x4c] DUP1 */
  0xfd, /* [77'0x4d] REVERT */
  0x5b, /* [78'0x4e] JUMPDEST */
  0x61, /* [79'0x4f] PUSH2 */
  0x00, 0x90, /* constant data */
  0x60, /* [82'0x52] PUSH1 */
  0x04, /* constant data */
  0x80, /* [84'0x54] DUP1 */
  0x36, /* [85'0x55] CALLDATASIZE */
  0x03, /* [86'0x56] SUB */
  0x60, /* [87'0x57] PUSH1 */
  0x20, /* constant data */
  0x81, /* [89'0x59] DUP2 */
  0x10, /* [90'0x5a] LT */
  0x15, /* [91'0x5b] ISZERO */
  0x61, /* [92'0x5c] PUSH2 */
  0x00, 0x64, /* constant data */
  0x57, /* [95'0x5f] JUMPI */
  0x60, /* [96'0x60] PUSH1 */
  0x00, /* constant data */
  0x80, /* [98'0x62] DUP1 */
  0xfd, /* [99'0x63] REVERT */
  0x5b, /* [100'0x64] JUMPDEST */
  0x81, /* [101'0x65] DUP2 */
  0x01, /* [102'0x66] ADD */
  0x90, /* [103'0x67] SWAP1 */
  0x80, /* [104'0x68] DUP1 */
  0x80, /* [105'0x69] DUP1 */
  0x35, /* [106'0x6a] CALLDATALOAD */
  0x73, /* [107'0x6b] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [128'0x80] AND */
  0x90, /* [129'0x81] SWAP1 */
  0x60, /* [130'0x82] PUSH1 */
  0x20, /* constant data */
  0x01, /* [132'0x84] ADD */
  0x90, /* [133'0x85] SWAP1 */
  0x92, /* [134'0x86] SWAP3 */
  0x91, /* [135'0x87] SWAP2 */
  0x90, /* [136'0x88] SWAP1 */
  0x50, /* [137'0x89] POP */
  0x50, /* [138'0x8a] POP */
  0x50, /* [139'0x8b] POP */
  0x61, /* [140'0x8c] PUSH2 */
  0x01, 0xe8, /* constant data */
  0x56, /* [143'0x8f] JUMP */
  0x5b, /* [144'0x90] JUMPDEST */
  0x00, /* [145'0x91] STOP */
  0x5b, /* [146'0x92] JUMPDEST */
  0x34, /* [147'0x93] CALLVALUE */
  0x80, /* [148'0x94] DUP1 */
  0x15, /* [149'0x95] ISZERO */
  0x61, /* [150'0x96] PUSH2 */
  0x00, 0x9e, /* constant data */
  0x57, /* [153'0x99] JUMPI */
  0x60, /* [154'0x9a] PUSH1 */
  0x00, /* constant data */
  0x80, /* [156'0x9c] DUP1 */
  0xfd, /* [157'0x9d] REVERT */
  0x5b, /* [158'0x9e] JUMPDEST */
  0x50, /* [159'0x9f] POP */
  0x61, /* [160'0xa0] PUSH2 */
  0x00, 0xe1, /* constant data */
  0x60, /* [163'0xa3] PUSH1 */
  0x04, /* constant data */
  0x80, /* [165'0xa5] DUP1 */
  0x36, /* [166'0xa6] CALLDATASIZE */
  0x03, /* [167'0xa7] SUB */
  0x60, /* [168'0xa8] PUSH1 */
  0x20, /* constant data */
  0x81, /* [170'0xaa] DUP2 */
  0x10, /* [171'0xab] LT */
  0x15, /* [172'0xac] ISZERO */
  0x61, /* [173'0xad] PUSH2 */
  0x00, 0xb5, /* constant data */
  0x57, /* [176'0xb0] JUMPI */
  0x60, /* [177'0xb1] PUSH1 */
  0x00, /* constant data */
  0x80, /* [179'0xb3] DUP1 */
  0xfd, /* [180'0xb4] REVERT */
  0x5b, /* [181'0xb5] JUMPDEST */
  0x81, /* [182'0xb6] DUP2 */
  0x01, /* [183'0xb7] ADD */
  0x90, /* [184'0xb8] SWAP1 */
  0x80, /* [185'0xb9] DUP1 */
  0x80, /* [186'0xba] DUP1 */
  0x35, /* [187'0xbb] CALLDATALOAD */
  0x73, /* [188'0xbc] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [209'0xd1] AND */
  0x90, /* [210'0xd2] SWAP1 */
  0x60, /* [211'0xd3] PUSH1 */
  0x20, /* constant data */
  0x01, /* [213'0xd5] ADD */
  0x90, /* [214'0xd6] SWAP1 */
  0x92, /* [215'0xd7] SWAP3 */
  0x91, /* [216'0xd8] SWAP2 */
  0x90, /* [217'0xd9] SWAP1 */
  0x50, /* [218'0xda] POP */
  0x50, /* [219'0xdb] POP */
  0x50, /* [220'0xdc] POP */
  0x61, /* [221'0xdd] PUSH2 */
  0x02, 0x37, /* constant data */
  0x56, /* [224'0xe0] JUMP */
  0x5b, /* [225'0xe1] JUMPDEST */
  0x60, /* [226'0xe2] PUSH1 */
  0x40, /* constant data */
  0x51, /* [228'0xe4] MLOAD */
  0x80, /* [229'0xe5] DUP1 */
  0x82, /* [230'0xe6] DUP3 */
  0x81, /* [231'0xe7] DUP2 */
  0x52, /* [232'0xe8] MSTORE */
  0x60, /* [233'0xe9] PUSH1 */
  0x20, /* constant data */
  0x01, /* [235'0xeb] ADD */
  0x91, /* [236'0xec] SWAP2 */
  0x50, /* [237'0xed] POP */
  0x50, /* [238'0xee] POP */
  0x60, /* [239'0xef] PUSH1 */
  0x40, /* constant data */
  0x51, /* [241'0xf1] MLOAD */
  0x80, /* [242'0xf2] DUP1 */
  0x91, /* [243'0xf3] SWAP2 */
  0x03, /* [244'0xf4] SUB */
  0x90, /* [245'0xf5] SWAP1 */
  0xf3, /* [246'0xf6] RETURN */
  0x5b, /* [247'0xf7] JUMPDEST */
  0x34, /* [248'0xf8] CALLVALUE */
  0x80, /* [249'0xf9] DUP1 */
  0x15, /* [250'0xfa] ISZERO */
  0x61, /* [251'0xfb] PUSH2 */
  0x01, 0x03, /* constant data */
  0x57, /* [254'0xfe] JUMPI */
  0x60, /* [255'0xff] PUSH1 */
  0x00, /* constant data */
  0x80, /* [257'0x101] DUP1 */
  0xfd, /* [258'0x102] REVERT */
  0x5b, /* [259'0x103] JUMPDEST */
  0x50, /* [260'0x104] POP */
  0x61, /* [261'0x105] PUSH2 */
  0x01, 0x30, /* constant data */
  0x60, /* [264'0x108] PUSH1 */
  0x04, /* constant data */
  0x80, /* [266'0x10a] DUP1 */
  0x36, /* [267'0x10b] CALLDATASIZE */
  0x03, /* [268'0x10c] SUB */
  0x60, /* [269'0x10d] PUSH1 */
  0x20, /* constant data */
  0x81, /* [271'0x10f] DUP2 */
  0x10, /* [272'0x110] LT */
  0x15, /* [273'0x111] ISZERO */
  0x61, /* [274'0x112] PUSH2 */
  0x01, 0x1a, /* constant data */
  0x57, /* [277'0x115] JUMPI */
  0x60, /* [278'0x116] PUSH1 */
  0x00, /* constant data */
  0x80, /* [280'0x118] DUP1 */
  0xfd, /* [281'0x119] REVERT */
  0x5b, /* [282'0x11a] JUMPDEST */
  0x81, /* [283'0x11b] DUP2 */
  0x01, /* [284'0x11c] ADD */
  0x90, /* [285'0x11d] SWAP1 */
  0x80, /* [286'0x11e] DUP1 */
  0x80, /* [287'0x11f] DUP1 */
  0x35, /* [288'0x120] CALLDATALOAD */
  0x90, /* [289'0x121] SWAP1 */
  0x60, /* [290'0x122] PUSH1 */
  0x20, /* constant data */
  0x01, /* [292'0x124] ADD */
  0x90, /* [293'0x125] SWAP1 */
  0x92, /* [294'0x126] SWAP3 */
  0x91, /* [295'0x127] SWAP2 */
  0x90, /* [296'0x128] SWAP1 */
  0x50, /* [297'0x129] POP */
  0x50, /* [298'0x12a] POP */
  0x50, /* [299'0x12b] POP */
  0x61, /* [300'0x12c] PUSH2 */
  0x02, 0x4f, /* constant data */
  0x56, /* [303'0x12f] JUMP */
  0x5b, /* [304'0x130] JUMPDEST */
  0x00, /* [305'0x131] STOP */
  0x5b, /* [306'0x132] JUMPDEST */
  0x34, /* [307'0x133] CALLVALUE */
  0x80, /* [308'0x134] DUP1 */
  0x15, /* [309'0x135] ISZERO */
  0x61, /* [310'0x136] PUSH2 */
  0x01, 0x3e, /* constant data */
  0x57, /* [313'0x139] JUMPI */
  0x60, /* [314'0x13a] PUSH1 */
  0x00, /* constant data */
  0x80, /* [316'0x13c] DUP1 */
  0xfd, /* [317'0x13d] REVERT */
  0x5b, /* [318'0x13e] JUMPDEST */
  0x50, /* [319'0x13f] POP */
  0x61, /* [320'0x140] PUSH2 */
  0x01, 0x81, /* constant data */
  0x60, /* [323'0x143] PUSH1 */
  0x04, /* constant data */
  0x80, /* [325'0x145] DUP1 */
  0x36, /* [326'0x146] CALLDATASIZE */
  0x03, /* [327'0x147] SUB */
  0x60, /* [328'0x148] PUSH1 */
  0x20, /* constant data */
  0x81, /* [330'0x14a] DUP2 */
  0x10, /* [331'0x14b] LT */
  0x15, /* [332'0x14c] ISZERO */
  0x61, /* [333'0x14d] PUSH2 */
  0x01, 0x55, /* constant data */
  0x57, /* [336'0x150] JUMPI */
  0x60, /* [337'0x151] PUSH1 */
  0x00, /* constant data */
  0x80, /* [339'0x153] DUP1 */
  0xfd, /* [340'0x154] REVERT */
  0x5b, /* [341'0x155] JUMPDEST */
  0x81, /* [342'0x156] DUP2 */
  0x01, /* [343'0x157] ADD */
  0x90, /* [344'0x158] SWAP1 */
  0x80, /* [345'0x159] DUP1 */
  0x80, /* [346'0x15a] DUP1 */
  0x35, /* [347'0x15b] CALLDATALOAD */
  0x73, /* [348'0x15c] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [369'0x171] AND */
  0x90, /* [370'0x172] SWAP1 */
  0x60, /* [371'0x173] PUSH1 */
  0x20, /* constant data */
  0x01, /* [373'0x175] ADD */
  0x90, /* [374'0x176] SWAP1 */
  0x92, /* [375'0x177] SWAP3 */
  0x91, /* [376'0x178] SWAP2 */
  0x90, /* [377'0x179] SWAP1 */
  0x50, /* [378'0x17a] POP */
  0x50, /* [379'0x17b] POP */
  0x50, /* [380'0x17c] POP */
  0x61, /* [381'0x17d] PUSH2 */
  0x02, 0xee, /* constant data */
  0x56, /* [384'0x180] JUMP */
  0x5b, /* [385'0x181] JUMPDEST */
  0x00, /* [386'0x182] STOP */
  0x5b, /* [387'0x183] JUMPDEST */
  0x34, /* [388'0x184] CALLVALUE */
  0x80, /* [389'0x185] DUP1 */
  0x15, /* [390'0x186] ISZERO */
  0x61, /* [391'0x187] PUSH2 */
  0x01, 0x8f, /* constant data */
  0x57, /* [394'0x18a] JUMPI */
  0x60, /* [395'0x18b] PUSH1 */
  0x00, /* constant data */
  0x80, /* [397'0x18d] DUP1 */
  0xfd, /* [398'0x18e] REVERT */
  0x5b, /* [399'0x18f] JUMPDEST */
  0x50, /* [400'0x190] POP */
  0x61, /* [401'0x191] PUSH2 */
  0x01, 0xd2, /* constant data */
  0x60, /* [404'0x194] PUSH1 */
  0x04, /* constant data */
  0x80, /* [406'0x196] DUP1 */
  0x36, /* [407'0x197] CALLDATASIZE */
  0x03, /* [408'0x198] SUB */
  0x60, /* [409'0x199] PUSH1 */
  0x20, /* constant data */
  0x81, /* [411'0x19b] DUP2 */
  0x10, /* [412'0x19c] LT */
  0x15, /* [413'0x19d] ISZERO */
  0x61, /* [414'0x19e] PUSH2 */
  0x01, 0xa6, /* constant data */
  0x57, /* [417'0x1a1] JUMPI */
  0x60, /* [418'0x1a2] PUSH1 */
  0x00, /* constant data */
  0x80, /* [420'0x1a4] DUP1 */
  0xfd, /* [421'0x1a5] REVERT */
  0x5b, /* [422'0x1a6] JUMPDEST */
  0x81, /* [423'0x1a7] DUP2 */
  0x01, /* [424'0x1a8] ADD */
  0x90, /* [425'0x1a9] SWAP1 */
  0x80, /* [426'0x1aa] DUP1 */
  0x80, /* [427'0x1ab] DUP1 */
  0x35, /* [428'0x1ac] CALLDATALOAD */
  0x73, /* [429'0x1ad] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [450'0x1c2] AND */
  0x90, /* [451'0x1c3] SWAP1 */
  0x60, /* [452'0x1c4] PUSH1 */
  0x20, /* constant data */
  0x01, /* [454'0x1c6] ADD */
  0x90, /* [455'0x1c7] SWAP1 */
  0x92, /* [456'0x1c8] SWAP3 */
  0x91, /* [457'0x1c9] SWAP2 */
  0x90, /* [458'0x1ca] SWAP1 */
  0x50, /* [459'0x1cb] POP */
  0x50, /* [460'0x1cc] POP */
  0x50, /* [461'0x1cd] POP */
  0x61, /* [462'0x1ce] PUSH2 */
  0x03, 0x89, /* constant data */
  0x56, /* [465'0x1d1] JUMP */
  0x5b, /* [466'0x1d2] JUMPDEST */
  0x60, /* [467'0x1d3] PUSH1 */
  0x40, /* constant data */
  0x51, /* [469'0x1d5] MLOAD */
  0x80, /* [470'0x1d6] DUP1 */
  0x82, /* [471'0x1d7] DUP3 */
  0x81, /* [472'0x1d8] DUP2 */
  0x52, /* [473'0x1d9] MSTORE */
  0x60, /* [474'0x1da] PUSH1 */
  0x20, /* constant data */
  0x01, /* [476'0x1dc] ADD */
  0x91, /* [477'0x1dd] SWAP2 */
  0x50, /* [478'0x1de] POP */
  0x50, /* [479'0x1df] POP */
  0x60, /* [480'0x1e0] PUSH1 */
  0x40, /* constant data */
  0x51, /* [482'0x1e2] MLOAD */
  0x80, /* [483'0x1e3] DUP1 */
  0x91, /* [484'0x1e4] SWAP2 */
  0x03, /* [485'0x1e5] SUB */
  0x90, /* [486'0x1e6] SWAP1 */
  0xf3, /* [487'0x1e7] RETURN */
  0x5b, /* [488'0x1e8] JUMPDEST */
  0x34, /* [489'0x1e9] CALLVALUE */
  0x60, /* [490'0x1ea] PUSH1 */
  0x00, /* constant data */
  0x80, /* [492'0x1ec] DUP1 */
  0x83, /* [493'0x1ed] DUP4 */
  0x73, /* [494'0x1ee] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [515'0x203] AND */
  0x73, /* [516'0x204] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [537'0x219] AND */
  0x81, /* [538'0x21a] DUP2 */
  0x52, /* [539'0x21b] MSTORE */
  0x60, /* [540'0x21c] PUSH1 */
  0x20, /* constant data */
  0x01, /* [542'0x21e] ADD */
  0x90, /* [543'0x21f] SWAP1 */
  0x81, /* [544'0x220] DUP2 */
  0x52, /* [545'0x221] MSTORE */
  0x60, /* [546'0x222] PUSH1 */
  0x20, /* constant data */
  0x01, /* [548'0x224] ADD */
  0x60, /* [549'0x225] PUSH1 */
  0x00, /* constant data */
  0x20, /* [551'0x227] SHA3 */
  0x60, /* [552'0x228] PUSH1 */
  0x00, /* constant data */
  0x82, /* [554'0x22a] DUP3 */
  0x82, /* [555'0x22b] DUP3 */
  0x54, /* [556'0x22c] SLOAD */
  0x01, /* [557'0x22d] ADD */
  0x92, /* [558'0x22e] SWAP3 */
  0x50, /* [559'0x22f] POP */
  0x50, /* [560'0x230] POP */
  0x81, /* [561'0x231] DUP2 */
  0x90, /* [562'0x232] SWAP1 */
  0x55, /* [563'0x233] SSTORE */
  0x50, /* [564'0x234] POP */
  0x50, /* [565'0x235] POP */
  0x56, /* [566'0x236] JUMP */
  0x5b, /* [567'0x237] JUMPDEST */
  0x60, /* [568'0x238] PUSH1 */
  0x00, /* constant data */
  0x60, /* [570'0x23a] PUSH1 */
  0x20, /* constant data */
  0x52, /* [572'0x23c] MSTORE */
  0x80, /* [573'0x23d] DUP1 */
  0x60, /* [574'0x23e] PUSH1 */
  0x00, /* constant data */
  0x52, /* [576'0x240] MSTORE */
  0x60, /* [577'0x241] PUSH1 */
  0x40, /* constant data */
  0x60, /* [579'0x243] PUSH1 */
  0x00, /* constant data */
  0x20, /* [581'0x245] SHA3 */
  0x60, /* [582'0x246] PUSH1 */
  0x00, /* constant data */
  0x91, /* [584'0x248] SWAP2 */
  0x50, /* [585'0x249] POP */
  0x90, /* [586'0x24a] SWAP1 */
  0x50, /* [587'0x24b] POP */
  0x54, /* [588'0x24c] SLOAD */
  0x81, /* [589'0x24d] DUP2 */
  0x56, /* [590'0x24e] JUMP */
  0x5b, /* [591'0x24f] JUMPDEST */
  0x80, /* [592'0x250] DUP1 */
  0x60, /* [593'0x251] PUSH1 */
  0x00, /* constant data */
  0x80, /* [595'0x253] DUP1 */
  0x33, /* [596'0x254] CALLER */
  0x73, /* [597'0x255] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [618'0x26a] AND */
  0x73, /* [619'0x26b] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [640'0x280] AND */
  0x81, /* [641'0x281] DUP2 */
  0x52, /* [642'0x282] MSTORE */
  0x60, /* [643'0x283] PUSH1 */
  0x20, /* constant data */
  0x01, /* [645'0x285] ADD */
  0x90, /* [646'0x286] SWAP1 */
  0x81, /* [647'0x287] DUP2 */
  0x52, /* [648'0x288] MSTORE */
  0x60, /* [649'0x289] PUSH1 */
  0x20, /* constant data */
  0x01, /* [651'0x28b] ADD */
  0x60, /* [652'0x28c] PUSH1 */
  0x00, /* constant data */
  0x20, /* [654'0x28e] SHA3 */
  0x54, /* [655'0x28f] SLOAD */
  0x10, /* [656'0x290] LT */
  0x61, /* [657'0x291] PUSH2 */
  0x02, 0xeb, /* constant data */
  0x57, /* [660'0x294] JUMPI */
  0x61, /* [661'0x295] PUSH2 */
  0x02, 0x9e, /* constant data */
  0x33, /* [664'0x298] CALLER */
  0x82, /* [665'0x299] DUP3 */
  0x61, /* [666'0x29a] PUSH2 */
  0x03, 0xd1, /* constant data */
  0x56, /* [669'0x29d] JUMP */
  0x5b, /* [670'0x29e] JUMPDEST */
  0x80, /* [671'0x29f] DUP1 */
  0x60, /* [672'0x2a0] PUSH1 */
  0x00, /* constant data */
  0x80, /* [674'0x2a2] DUP1 */
  0x33, /* [675'0x2a3] CALLER */
  0x73, /* [676'0x2a4] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [697'0x2b9] AND */
  0x73, /* [698'0x2ba] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [719'0x2cf] AND */
  0x81, /* [720'0x2d0] DUP2 */
  0x52, /* [721'0x2d1] MSTORE */
  0x60, /* [722'0x2d2] PUSH1 */
  0x20, /* constant data */
  0x01, /* [724'0x2d4] ADD */
  0x90, /* [725'0x2d5] SWAP1 */
  0x81, /* [726'0x2d6] DUP2 */
  0x52, /* [727'0x2d7] MSTORE */
  0x60, /* [728'0x2d8] PUSH1 */
  0x20, /* constant data */
  0x01, /* [730'0x2da] ADD */
  0x60, /* [731'0x2db] PUSH1 */
  0x00, /* constant data */
  0x20, /* [733'0x2dd] SHA3 */
  0x60, /* [734'0x2de] PUSH1 */
  0x00, /* constant data */
  0x82, /* [736'0x2e0] DUP3 */
  0x82, /* [737'0x2e1] DUP3 */
  0x54, /* [738'0x2e2] SLOAD */
  0x03, /* [739'0x2e3] SUB */
  0x92, /* [740'0x2e4] SWAP3 */
  0x50, /* [741'0x2e5] POP */
  0x50, /* [742'0x2e6] POP */
  0x81, /* [743'0x2e7] DUP2 */
  0x90, /* [744'0x2e8] SWAP1 */
  0x55, /* [745'0x2e9] SSTORE */
  0x50, /* [746'0x2ea] POP */
  0x5b, /* [747'0x2eb] JUMPDEST */
  0x50, /* [748'0x2ec] POP */
  0x56, /* [749'0x2ed] JUMP */
  0x5b, /* [750'0x2ee] JUMPDEST */
  0x60, /* [751'0x2ef] PUSH1 */
  0x01, /* constant data */
  0x60, /* [753'0x2f1] PUSH1 */
  0x00, /* constant data */
  0x90, /* [755'0x2f3] SWAP1 */
  0x54, /* [756'0x2f4] SLOAD */
  0x90, /* [757'0x2f5] SWAP1 */
  0x61, /* [758'0x2f6] PUSH2 */
  0x01, 0x00, /* constant data */
  0x0a, /* [761'0x2f9] EXP */
  0x90, /* [762'0x2fa] SWAP1 */
  0x04, /* [763'0x2fb] DIV */
  0x73, /* [764'0x2fc] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [785'0x311] AND */
  0x73, /* [786'0x312] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [807'0x327] AND */
  0x33, /* [808'0x328] CALLER */
  0x73, /* [809'0x329] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [830'0x33e] AND */
  0x14, /* [831'0x33f] EQ */
  0x15, /* [832'0x340] ISZERO */
  0x61, /* [833'0x341] PUSH2 */
  0x03, 0x86, /* constant data */
  0x57, /* [836'0x344] JUMPI */
  0x80, /* [837'0x345] DUP1 */
  0x60, /* [838'0x346] PUSH1 */
  0x02, /* constant data */
  0x60, /* [840'0x348] PUSH1 */
  0x00, /* constant data */
  0x61, /* [842'0x34a] PUSH2 */
  0x01, 0x00, /* constant data */
  0x0a, /* [845'0x34d] EXP */
  0x81, /* [846'0x34e] DUP2 */
  0x54, /* [847'0x34f] SLOAD */
  0x81, /* [848'0x350] DUP2 */
  0x73, /* [849'0x351] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x02, /* [870'0x366] MUL */
  0x19, /* [871'0x367] NOT */
  0x16, /* [872'0x368] AND */
  0x90, /* [873'0x369] SWAP1 */
  0x83, /* [874'0x36a] DUP4 */
  0x73, /* [875'0x36b] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [896'0x380] AND */
  0x02, /* [897'0x381] MUL */
  0x17, /* [898'0x382] OR */
  0x90, /* [899'0x383] SWAP1 */
  0x55, /* [900'0x384] SSTORE */
  0x50, /* [901'0x385] POP */
  0x5b, /* [902'0x386] JUMPDEST */
  0x50, /* [903'0x387] POP */
  0x56, /* [904'0x388] JUMP */
  0x5b, /* [905'0x389] JUMPDEST */
  0x60, /* [906'0x38a] PUSH1 */
  0x00, /* constant data */
  0x80, /* [908'0x38c] DUP1 */
  0x60, /* [909'0x38d] PUSH1 */
  0x00, /* constant data */
  0x83, /* [911'0x38f] DUP4 */
  0x73, /* [912'0x390] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [933'0x3a5] AND */
  0x73, /* [934'0x3a6] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [955'0x3bb] AND */
  0x81, /* [956'0x3bc] DUP2 */
  0x52, /* [957'0x3bd] MSTORE */
  0x60, /* [958'0x3be] PUSH1 */
  0x20, /* constant data */
  0x01, /* [960'0x3c0] ADD */
  0x90, /* [961'0x3c1] SWAP1 */
  0x81, /* [962'0x3c2] DUP2 */
  0x52, /* [963'0x3c3] MSTORE */
  0x60, /* [964'0x3c4] PUSH1 */
  0x20, /* constant data */
  0x01, /* [966'0x3c6] ADD */
  0x60, /* [967'0x3c7] PUSH1 */
  0x00, /* constant data */
  0x20, /* [969'0x3c9] SHA3 */
  0x54, /* [970'0x3ca] SLOAD */
  0x90, /* [971'0x3cb] SWAP1 */
  0x50, /* [972'0x3cc] POP */
  0x91, /* [973'0x3cd] SWAP2 */
  0x90, /* [974'0x3ce] SWAP1 */
  0x50, /* [975'0x3cf] POP */
  0x56, /* [976'0x3d0] JUMP */
  0x5b, /* [977'0x3d1] JUMPDEST */
  0x60, /* [978'0x3d2] PUSH1 */
  0x02, /* constant data */
  0x60, /* [980'0x3d4] PUSH1 */
  0x00, /* constant data */
  0x90, /* [982'0x3d6] SWAP1 */
  0x54, /* [983'0x3d7] SLOAD */
  0x90, /* [984'0x3d8] SWAP1 */
  0x61, /* [985'0x3d9] PUSH2 */
  0x01, 0x00, /* constant data */
  0x0a, /* [988'0x3dc] EXP */
  0x90, /* [989'0x3dd] SWAP1 */
  0x04, /* [990'0x3de] DIV */
  0x73, /* [991'0x3df] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [1012'0x3f4] AND */
  0x73, /* [1013'0x3f5] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [1034'0x40a] AND */
  0x82, /* [1035'0x40b] DUP3 */
  0x82, /* [1036'0x40c] DUP3 */
  0x60, /* [1037'0x40d] PUSH1 */
  0x40, /* constant data */
  0x51, /* [1039'0x40f] MLOAD */
  0x60, /* [1040'0x410] PUSH1 */
  0x24, /* constant data */
  0x01, /* [1042'0x412] ADD */
  0x80, /* [1043'0x413] DUP1 */
  0x83, /* [1044'0x414] DUP4 */
  0x73, /* [1045'0x415] PUSH20 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x16, /* [1066'0x42a] AND */
  0x81, /* [1067'0x42b] DUP2 */
  0x52, /* [1068'0x42c] MSTORE */
  0x60, /* [1069'0x42d] PUSH1 */
  0x20, /* constant data */
  0x01, /* [1071'0x42f] ADD */
  0x82, /* [1072'0x430] DUP3 */
  0x81, /* [1073'0x431] DUP2 */
  0x52, /* [1074'0x432] MSTORE */
  0x60, /* [1075'0x433] PUSH1 */
  0x20, /* constant data */
  0x01, /* [1077'0x435] ADD */
  0x92, /* [1078'0x436] SWAP3 */
  0x50, /* [1079'0x437] POP */
  0x50, /* [1080'0x438] POP */
  0x50, /* [1081'0x439] POP */
  0x60, /* [1082'0x43a] PUSH1 */
  0x40, /* constant data */
  0x51, /* [1084'0x43c] MLOAD */
  0x60, /* [1085'0x43d] PUSH1 */
  0x20, /* constant data */
  0x81, /* [1087'0x43f] DUP2 */
  0x83, /* [1088'0x440] DUP4 */
  0x03, /* [1089'0x441] SUB */
  0x03, /* [1090'0x442] SUB */
  0x81, /* [1091'0x443] DUP2 */
  0x52, /* [1092'0x444] MSTORE */
  0x90, /* [1093'0x445] SWAP1 */
  0x60, /* [1094'0x446] PUSH1 */
  0x40, /* constant data */
  0x52, /* [1096'0x448] MSTORE */
  0x7f, /* [1097'0x449] PUSH32 */
  0xd0, 0x67, 0x9d, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* constant data
                                                               */
  0x7b, /* [1130'0x46a] PUSH28 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x19, /* [1159'0x487] NOT */
  0x16, /* [1160'0x488] AND */
  0x60, /* [1161'0x489] PUSH1 */
  0x20, /* constant data */
  0x82, /* [1163'0x48b] DUP3 */
  0x01, /* [1164'0x48c] ADD */
  0x80, /* [1165'0x48d] DUP1 */
  0x51, /* [1166'0x48e] MLOAD */
  0x7b, /* [1167'0x48f] PUSH28 */
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* constant data */
  0x83, /* [1196'0x4ac] DUP4 */
  0x81, /* [1197'0x4ad] DUP2 */
  0x83, /* [1198'0x4ae] DUP4 */
  0x16, /* [1199'0x4af] AND */
  0x17, /* [1200'0x4b0] OR */
  0x83, /* [1201'0x4b1] DUP4 */
  0x52, /* [1202'0x4b2] MSTORE */
  0x50, /* [1203'0x4b3] POP */
  0x50, /* [1204'0x4b4] POP */
  0x50, /* [1205'0x4b5] POP */
  0x50, /* [1206'0x4b6] POP */
  0x60, /* [1207'0x4b7] PUSH1 */
  0x40, /* constant data */
  0x51, /* [1209'0x4b9] MLOAD */
  0x80, /* [1210'0x4ba] DUP1 */
  0x82, /* [1211'0x4bb] DUP3 */
  0x80, /* [1212'0x4bc] DUP1 */
  0x51, /* [1213'0x4bd] MLOAD */
  0x90, /* [1214'0x4be] SWAP1 */
  0x60, /* [1215'0x4bf] PUSH1 */
  0x20, /* constant data */
  0x01, /* [1217'0x4c1] ADD */
  0x90, /* [1218'0x4c2] SWAP1 */
  0x80, /* [1219'0x4c3] DUP1 */
  0x83, /* [1220'0x4c4] DUP4 */
  0x83, /* [1221'0x4c5] DUP4 */
  0x5b, /* [1222'0x4c6] JUMPDEST */
  0x60, /* [1223'0x4c7] PUSH1 */
  0x20, /* constant data */
  0x83, /* [1225'0x4c9] DUP4 */
  0x10, /* [1226'0x4ca] LT */
  0x61, /* [1227'0x4cb] PUSH2 */
  0x04, 0xe9, /* constant data */
  0x57, /* [1230'0x4ce] JUMPI */
  0x80, /* [1231'0x4cf] DUP1 */
  0x51, /* [1232'0x4d0] MLOAD */
  0x82, /* [1233'0x4d1] DUP3 */
  0x52, /* [1234'0x4d2] MSTORE */
  0x60, /* [1235'0x4d3] PUSH1 */
  0x20, /* constant data */
  0x82, /* [1237'0x4d5] DUP3 */
  0x01, /* [1238'0x4d6] ADD */
  0x91, /* [1239'0x4d7] SWAP2 */
  0x50, /* [1240'0x4d8] POP */
  0x60, /* [1241'0x4d9] PUSH1 */
  0x20, /* constant data */
  0x81, /* [1243'0x4db] DUP2 */
  0x01, /* [1244'0x4dc] ADD */
  0x90, /* [1245'0x4dd] SWAP1 */
  0x50, /* [1246'0x4de] POP */
  0x60, /* [1247'0x4df] PUSH1 */
  0x20, /* constant data */
  0x83, /* [1249'0x4e1] DUP4 */
  0x03, /* [1250'0x4e2] SUB */
  0x92, /* [1251'0x4e3] SWAP3 */
  0x50, /* [1252'0x4e4] POP */
  0x61, /* [1253'0x4e5] PUSH2 */
  0x04, 0xc6, /* constant data */
  0x56, /* [1256'0x4e8] JUMP */
  0x5b, /* [1257'0x4e9] JUMPDEST */
  0x60, /* [1258'0x4ea] PUSH1 */
  0x01, /* constant data */
  0x83, /* [1260'0x4ec] DUP4 */
  0x60, /* [1261'0x4ed] PUSH1 */
  0x20, /* constant data */
  0x03, /* [1263'0x4ef] SUB */
  0x61, /* [1264'0x4f0] PUSH2 */
  0x01, 0x00, /* constant data */
  0x0a, /* [1267'0x4f3] EXP */
  0x03, /* [1268'0x4f4] SUB */
  0x80, /* [1269'0x4f5] DUP1 */
  0x19, /* [1270'0x4f6] NOT */
  0x82, /* [1271'0x4f7] DUP3 */
  0x51, /* [1272'0x4f8] MLOAD */
  0x16, /* [1273'0x4f9] AND */
  0x81, /* [1274'0x4fa] DUP2 */
  0x84, /* [1275'0x4fb] DUP5 */
  0x51, /* [1276'0x4fc] MLOAD */
  0x16, /* [1277'0x4fd] AND */
  0x80, /* [1278'0x4fe] DUP1 */
  0x82, /* [1279'0x4ff] DUP3 */
  0x17, /* [1280'0x500] OR */
  0x85, /* [1281'0x501] DUP6 */
  0x52, /* [1282'0x502] MSTORE */
  0x50, /* [1283'0x503] POP */
  0x50, /* [1284'0x504] POP */
  0x50, /* [1285'0x505] POP */
  0x50, /* [1286'0x506] POP */
  0x50, /* [1287'0x507] POP */
  0x50, /* [1288'0x508] POP */
  0x90, /* [1289'0x509] SWAP1 */
  0x50, /* [1290'0x50a] POP */
  0x01, /* [1291'0x50b] ADD */
  0x91, /* [1292'0x50c] SWAP2 */
  0x50, /* [1293'0x50d] POP */
  0x50, /* [1294'0x50e] POP */
  0x60, /* [1295'0x50f] PUSH1 */
  0x00, /* constant data */
  0x60, /* [1297'0x511] PUSH1 */
  0x40, /* constant data */
  0x51, /* [1299'0x513] MLOAD */
  0x80, /* [1300'0x514] DUP1 */
  0x83, /* [1301'0x515] DUP4 */
  0x03, /* [1302'0x516] SUB */
  0x81, /* [1303'0x517] DUP2 */
  0x85, /* [1304'0x518] DUP6 */
  0x5a, /* [1305'0x519] GAS */
  0xf4, /* [1306'0x51a] DELEGATECALL */
  0x91, /* [1307'0x51b] SWAP2 */
  0x50, /* [1308'0x51c] POP */
  0x50, /* [1309'0x51d] POP */
  0x3d, /* [1310'0x51e] RETURNDATASIZE */
  0x80, /* [1311'0x51f] DUP1 */
  0x60, /* [1312'0x520] PUSH1 */
  0x00, /* constant data */
  0x81, /* [1314'0x522] DUP2 */
  0x14, /* [1315'0x523] EQ */
  0x61, /* [1316'0x524] PUSH2 */
  0x05, 0x49, /* constant data */
  0x57, /* [1319'0x527] JUMPI */
  0x60, /* [1320'0x528] PUSH1 */
  0x40, /* constant data */
  0x51, /* [1322'0x52a] MLOAD */
  0x91, /* [1323'0x52b] SWAP2 */
  0x50, /* [1324'0x52c] POP */
  0x60, /* [1325'0x52d] PUSH1 */
  0x1f, /* constant data */
  0x19, /* [1327'0x52f] NOT */
  0x60, /* [1328'0x530] PUSH1 */
  0x3f, /* constant data */
  0x3d, /* [1330'0x532] RETURNDATASIZE */
  0x01, /* [1331'0x533] ADD */
  0x16, /* [1332'0x534] AND */
  0x82, /* [1333'0x535] DUP3 */
  0x01, /* [1334'0x536] ADD */
  0x60, /* [1335'0x537] PUSH1 */
  0x40, /* constant data */
  0x52, /* [1337'0x539] MSTORE */
  0x3d, /* [1338'0x53a] RETURNDATASIZE */
  0x82, /* [1339'0x53b] DUP3 */
  0x52, /* [1340'0x53c] MSTORE */
  0x3d, /* [1341'0x53d] RETURNDATASIZE */
  0x60, /* [1342'0x53e] PUSH1 */
  0x00, /* constant data */
  0x60, /* [1344'0x540] PUSH1 */
  0x20, /* constant data */
  0x84, /* [1346'0x542] DUP5 */
  0x01, /* [1347'0x543] ADD */
  0x3e, /* [1348'0x544] RETURNDATACOPY */
  0x61, /* [1349'0x545] PUSH2 */
  0x05, 0x4e, /* constant data */
  0x56, /* [1352'0x548] JUMP */
  0x5b, /* [1353'0x549] JUMPDEST */
  0x60, /* [1354'0x54a] PUSH1 */
  0x60, /* constant data */
  0x91, /* [1356'0x54c] SWAP2 */
  0x50, /* [1357'0x54d] POP */
  0x5b, /* [1358'0x54e] JUMPDEST */
  0x50, /* [1359'0x54f] POP */
  0x50, /* [1360'0x550] POP */
  0x50, /* [1361'0x551] POP */
  0x50, /* [1362'0x552] POP */
  0x50, /* [1363'0x553] POP */
  0x56, /* [1364'0x554] JUMP */
  0xfe, /* [1365'0x555] INVALID */
  0xa2, /* [1366'0x556] LOG2 */
  0x64, /* [1367'0x557] PUSH5 */
  0x69, 0x70, 0x66, 0x73, 0x58, /* constant data */
  0x22, /* [1373'0x55d] INVALID' byte */
  0x12, /* [1374'0x55e] SLT */
  0x20, /* [1375'0x55f] SHA3 */
  0x55, /* [1376'0x560] SSTORE */
  0x0a, /* [1377'0x561] EXP */
  0x1e, /* [1378'0x562] INVALID' byte */
  0x8e, /* [1379'0x563] DUP15 */
  0x0f, /* [1380'0x564] INVALID' byte */
  0xf0, /* [1381'0x565] CREATE */
  0x70, /* [1382'0x566] PUSH17 */
  0x20, 0x60, 0xe3, 0x35, 0x95, 0xa9, 0xc7, 0x85, 0xa6, 0xdf, 0x70,
  0x8f, 0x1d, 0x47, 0xf9, 0x1e, 0x2f, /* constant data */
  0x9c, /* [1400'0x578] SWAP13 */
  0xef, /* [1401'0x579] INVALID' byte */
  0xe4, /* [1402'0x57a] INVALID' byte */
  0x16, /* [1403'0x57b] AND */
  0x93, /* [1404'0x57c] SWAP4 */
  0x1b, /* [1405'0x57d] SHL */
  0x88, /* [1406'0x57e] DUP9 */
  0x55, /* [1407'0x57f] SSTORE */
  0x64, /* [1408'0x580] PUSH5 */
  0x73, 0x6f, 0x6c, 0x63, 0x43, /* constant data */
  0x00, /* [1414'0x586] STOP */
  0x07, /* [1415'0x587] SMOD */
  0x06, /* [1416'0x588] MOD */
  0x00, /* [1417'0x589] STOP */
  0x33, /* [1418'0x58a] CALLER */
};

const eevm::Code& eevm::EVM2CPP_Bank::bytecode()
{
  return _contract_bytecode;
}

const std::string eevm::EVM2CPP_Bank::_contract_name = "Bank";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_Bank>
  eevm::EVM2CPP_Bank::reg{};
const std::string& eevm::EVM2CPP_Bank::name()
{
  return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_1f = 0x1f_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_3f = 0x3f_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_49 = 0x49_u256;
constexpr uint256_t c_4e = 0x4e_u256;
constexpr uint256_t c_60 = 0x60_u256;
constexpr uint256_t c_64 = 0x64_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_90 = 0x90_u256;
constexpr uint256_t c_92 = 0x92_u256;
constexpr uint256_t c_9e = 0x9e_u256;
constexpr uint256_t c_b5 = 0xb5_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_e1 = 0xe1_u256;
constexpr uint256_t c_f7 = 0xf7_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_103 = 0x103_u256;
constexpr uint256_t c_11a = 0x11a_u256;
constexpr uint256_t c_130 = 0x130_u256;
constexpr uint256_t c_132 = 0x132_u256;
constexpr uint256_t c_13e = 0x13e_u256;
constexpr uint256_t c_155 = 0x155_u256;
constexpr uint256_t c_181 = 0x181_u256;
constexpr uint256_t c_183 = 0x183_u256;
constexpr uint256_t c_18f = 0x18f_u256;
constexpr uint256_t c_1a6 = 0x1a6_u256;
constexpr uint256_t c_1d2 = 0x1d2_u256;
constexpr uint256_t c_1e8 = 0x1e8_u256;
constexpr uint256_t c_237 = 0x237_u256;
constexpr uint256_t c_24f = 0x24f_u256;
constexpr uint256_t c_29e = 0x29e_u256;
constexpr uint256_t c_2eb = 0x2eb_u256;
constexpr uint256_t c_2ee = 0x2ee_u256;
constexpr uint256_t c_386 = 0x386_u256;
constexpr uint256_t c_389 = 0x389_u256;
constexpr uint256_t c_3d1 = 0x3d1_u256;
constexpr uint256_t c_4c6 = 0x4c6_u256;
constexpr uint256_t c_4e9 = 0x4e9_u256;
constexpr uint256_t c_549 = 0x549_u256;
constexpr uint256_t c_54e = 0x54e_u256;
constexpr uint256_t c_362a95 = 0x362a95_u256;
constexpr uint256_t c_27e235e3 = 0x27e235e3_u256;
constexpr uint256_t c_2e1a7d4d = 0x2e1a7d4d_u256;
constexpr uint256_t c_db0fb107 = 0xdb0fb107_u256;
constexpr uint256_t c_f8b2cb4f = 0xf8b2cb4f_u256;
constexpr uint256_t g_58 = 0x736f6c6343_u256;
constexpr uint256_t g_57 = 0x2060e33595a9c785a6df708f1d47f91e2f_u256;
constexpr uint256_t g_19 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_46 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_48 =
  0xd0679d3400000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_47 =
  0xffffffff00000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_44 =
  0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;
constexpr uint256_t g_54 =
  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0_u256;

// code
void eevm::EVM2CPP_Bank::dispatch()
{
  static void* _JUMP_TABLE_ARR[] = {
    &&_evm_start,

    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_49,      &&__invld, &&__invld, &&__invld, &&__invld, &&pc_4e,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_64,   &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_90,
    &&__invld,    &&pc_92,   &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_9e,   &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_b5,      &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_e1,   &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_f7,      &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_103,     &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_11a,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_130,  &&__invld, &&pc_132,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&pc_13e,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_155,  &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&pc_181,     &&__invld, &&pc_183,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_18f,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_1a6,  &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_1d2,  &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_1e8,  &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_237,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_24f,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_29e,  &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_2eb,  &&__invld, &&__invld, &&pc_2ee,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_386,  &&__invld, &&__invld, &&pc_389,  &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&pc_3d1,  &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&pc_4c6,  &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_4e9,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&pc_549,  &&__invld, &&__invld, &&__invld,
    &&__invld,    &&pc_54e,  &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld, &&__invld, &&__invld, &&__invld, &&__invld,
    &&__invld,    &&__invld,

  };

  goto _evm_start;

__invld:
  throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) \
  { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) \
    { \
      goto* _JUMP_TABLE_ARR[_jump_target]; \
    } \
    else \
    { \
      goto __invld; \
    } \
  }

_evm_start:
pc_0 : { /* <============ */
  on_bb_start(0);
  /* PUSH1 */
  /* val = [128] */

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((1, 64)) */
  /* op_1 = Constant((0, 128)) */
  mstore_v(c_40, c_80);

  /* PUSH1 */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_4_0 = calldatasize_v();

  /* LT */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((3, 4)) */
  const uint256_t v_5_0 = lt_v(v_4_0, c_4);

  /* PUSH2 */
  /* val = [73] */

  /* JUMPI */
  /* op_0 = Constant((6, 73)) */
  /* op_1 = InstructionRef((5, 0)) */
  if (v_5_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_49;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_d : { /* <============ */
  on_bb_start(13);
  /* PUSH1 */
  /* val = [0] */

  /* CALLDATALOAD */
  /* op_0 = Constant((0, 0)) */
  const uint256_t v_1_0 = calldataload_v(c_0);

  /* PUSH1 */
  /* val = [224] */

  /* SHR */
  /* op_0 = Constant((2, 224)) */
  /* op_1 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = shr_v(c_e0, v_1_0);

  /* DUP1 */
  /* op_0 = InstructionRef((3, 0)) */

  /* PUSH3 */
  /* val = [3549845] */

  /* EQ */
  /* op_0 = Constant((5, 3549845)) */
  /* op_1 = InstructionRef((3, 0)) */
  const uint256_t v_6_0 = eq_v(c_362a95, v_3_0);

  /* PUSH2 */
  /* val = [78] */

  /* JUMPI */
  /* op_0 = Constant((7, 78)) */
  /* op_1 = InstructionRef((6, 0)) */
  if (v_6_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((3, 0))*/
    ctxt->s.push(v_3_0);

    goto pc_4e;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((3, 0))*/
  ctxt->s.push(v_3_0);
}
pc_1d : { /* <============ */
  on_bb_start(29);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH4 */
  /* val = [669136355] */

  /* EQ */
  /* op_0 = Constant((1, 669136355)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = eq_v(c_27e235e3, s_0_0);

  /* PUSH2 */
  /* val = [146] */

  /* JUMPI */
  /* op_0 = Constant((3, 146)) */
  /* op_1 = InstructionRef((2, 0)) */
  if (v_2_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_92;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_28 : { /* <============ */
  on_bb_start(40);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH4 */
  /* val = [773487949] */

  /* EQ */
  /* op_0 = Constant((1, 773487949)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = eq_v(c_2e1a7d4d, s_0_0);

  /* PUSH2 */
  /* val = [247] */

  /* JUMPI */
  /* op_0 = Constant((3, 247)) */
  /* op_1 = InstructionRef((2, 0)) */
  if (v_2_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_f7;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_33 : { /* <============ */
  on_bb_start(51);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH4 */
  /* val = [3675238663] */

  /* EQ */
  /* op_0 = Constant((1, 3675238663)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = eq_v(c_db0fb107, s_0_0);

  /* PUSH2 */
  /* val = [306] */

  /* JUMPI */
  /* op_0 = Constant((3, 306)) */
  /* op_1 = InstructionRef((2, 0)) */
  if (v_2_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_132;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_3e : { /* <============ */
  on_bb_start(62);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH4 */
  /* val = [4172467023] */

  /* EQ */
  /* op_0 = Constant((1, 4172467023)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = eq_v(c_f8b2cb4f, s_0_0);

  /* PUSH2 */
  /* val = [387] */

  /* JUMPI */
  /* op_0 = Constant((3, 387)) */
  /* op_1 = InstructionRef((2, 0)) */
  if (v_2_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_183;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_49 : { /* <============ */
  on_bb_start(73);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((1, 0)) */
  /* op_1 = Constant((1, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_4e : { /* <============ */
  on_bb_start(78);
  /* JUMPDEST */

  /* PUSH2 */
  /* val = [144] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((2, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_4_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 4)) */
  const uint256_t v_5_0 = sub_v(v_4_0, c_4);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((5, 0)) */

  /* LT */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((6, 32)) */
  const uint256_t v_8_0 = lt_v(v_5_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((8, 0)) */
  const uint256_t v_9_0 = iszero_v(v_8_0);

  /* PUSH2 */
  /* val = [100] */

  /* JUMPI */
  /* op_0 = Constant((10, 100)) */
  /* op_1 = InstructionRef((9, 0)) */
  if (v_9_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 Constant((1, 144))*/
    ctxt->s.push(c_90);
    /* BB return 1 Constant((2, 4))*/
    ctxt->s.push(c_4);
    /* BB return 2 InstructionRef((5, 0))*/
    ctxt->s.push(v_5_0);

    goto pc_64;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((1, 144))*/
  ctxt->s.push(c_90);
  /* BB return 1 Constant((2, 4))*/
  ctxt->s.push(c_4);
  /* BB return 2 InstructionRef((5, 0))*/
  ctxt->s.push(v_5_0);
}
pc_60 : { /* <============ */
  on_bb_start(96);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_64 : { /* <============ */
  on_bb_start(100);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((10, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_11_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [488] */

  /* JUMP */
  /* op_0 = Constant((19, 488)) */
  /* BB finalizer */
  ctxt->s.set(1, v_8_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_1e8;
}
pc_90 : { /* <============ */
  on_bb_start(144);
  /* JUMPDEST */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_92 : { /* <============ */
  on_bb_start(146);
  /* JUMPDEST */

  /* CALLVALUE */
  const uint256_t v_1_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = iszero_v(v_1_0);

  /* PUSH2 */
  /* val = [158] */

  /* JUMPI */
  /* op_0 = Constant((4, 158)) */
  /* op_1 = InstructionRef((3, 0)) */
  if (v_3_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((1, 0))*/
    ctxt->s.push(v_1_0);

    goto pc_9e;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((1, 0))*/
  ctxt->s.push(v_1_0);
}
pc_9a : { /* <============ */
  on_bb_start(154);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_9e : { /* <============ */
  on_bb_start(158);
  /* JUMPDEST */

  /* POP */

  /* PUSH2 */
  /* val = [225] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((3, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_5_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((3, 4)) */
  const uint256_t v_6_0 = sub_v(v_5_0, c_4);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((6, 0)) */

  /* LT */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = Constant((7, 32)) */
  const uint256_t v_9_0 = lt_v(v_6_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_10_0 = iszero_v(v_9_0);

  /* PUSH2 */
  /* val = [181] */

  /* JUMPI */
  /* op_0 = Constant((11, 181)) */
  /* op_1 = InstructionRef((10, 0)) */
  if (v_10_0)
  {
    /* BB finalizer */
    ctxt->s.set(0, c_e1);
    /* no pops at end */
    /* BB return 0 Constant((3, 4))*/
    ctxt->s.push(c_4);
    /* BB return 1 InstructionRef((6, 0))*/
    ctxt->s.push(v_6_0);

    goto pc_b5;
  }

  /* BB finalizer */
  ctxt->s.set(0, c_e1);
  /* no pops at end */
  /* BB return 0 Constant((3, 4))*/
  ctxt->s.push(c_4);
  /* BB return 1 InstructionRef((6, 0))*/
  ctxt->s.push(v_6_0);
}
pc_b1 : { /* <============ */
  on_bb_start(177);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_b5 : { /* <============ */
  on_bb_start(181);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((10, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_11_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [567] */

  /* JUMP */
  /* op_0 = Constant((19, 567)) */
  /* BB finalizer */
  ctxt->s.set(1, v_8_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_237;
}
pc_e1 : { /* <============ */
  on_bb_start(225);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((1, 64)) */
  const uint256_t v_2_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((2, 0)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP2 */
  /* op_0 = InstructionRef((2, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(v_2_0, s_0_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((7, 32)) */
  /* op_1 = InstructionRef((2, 0)) */
  const uint256_t v_8_0 = add_v(c_20, v_2_0);

  /* SWAP2 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((12, 64)) */
  const uint256_t v_13_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((13, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = InstructionRef((13, 0)) */

  /* RETURN */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((16, 0)) */
  return_v(v_13_0, v_16_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_f7 : { /* <============ */
  on_bb_start(247);
  /* JUMPDEST */

  /* CALLVALUE */
  const uint256_t v_1_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = iszero_v(v_1_0);

  /* PUSH2 */
  /* val = [259] */

  /* JUMPI */
  /* op_0 = Constant((4, 259)) */
  /* op_1 = InstructionRef((3, 0)) */
  if (v_3_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((1, 0))*/
    ctxt->s.push(v_1_0);

    goto pc_103;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((1, 0))*/
  ctxt->s.push(v_1_0);
}
pc_ff : { /* <============ */
  on_bb_start(255);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_103 : { /* <============ */
  on_bb_start(259);
  /* JUMPDEST */

  /* POP */

  /* PUSH2 */
  /* val = [304] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((3, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_5_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((3, 4)) */
  const uint256_t v_6_0 = sub_v(v_5_0, c_4);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((6, 0)) */

  /* LT */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = Constant((7, 32)) */
  const uint256_t v_9_0 = lt_v(v_6_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_10_0 = iszero_v(v_9_0);

  /* PUSH2 */
  /* val = [282] */

  /* JUMPI */
  /* op_0 = Constant((11, 282)) */
  /* op_1 = InstructionRef((10, 0)) */
  if (v_10_0)
  {
    /* BB finalizer */
    ctxt->s.set(0, c_130);
    /* no pops at end */
    /* BB return 0 Constant((3, 4))*/
    ctxt->s.push(c_4);
    /* BB return 1 InstructionRef((6, 0))*/
    ctxt->s.push(v_6_0);

    goto pc_11a;
  }

  /* BB finalizer */
  ctxt->s.set(0, c_130);
  /* no pops at end */
  /* BB return 0 Constant((3, 4))*/
  ctxt->s.push(c_4);
  /* BB return 1 InstructionRef((6, 0))*/
  ctxt->s.push(v_6_0);
}
pc_116 : { /* <============ */
  on_bb_start(278);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_11a : { /* <============ */
  on_bb_start(282);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((8, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_9_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((9, 0)) */
  /* op_1 = InstructionRef((6, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((9, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [591] */

  /* JUMP */
  /* op_0 = Constant((17, 591)) */
  /* BB finalizer */
  ctxt->s.set(1, v_6_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_24f;
}
pc_130 : { /* <============ */
  on_bb_start(304);
  /* JUMPDEST */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_132 : { /* <============ */
  on_bb_start(306);
  /* JUMPDEST */

  /* CALLVALUE */
  const uint256_t v_1_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = iszero_v(v_1_0);

  /* PUSH2 */
  /* val = [318] */

  /* JUMPI */
  /* op_0 = Constant((4, 318)) */
  /* op_1 = InstructionRef((3, 0)) */
  if (v_3_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((1, 0))*/
    ctxt->s.push(v_1_0);

    goto pc_13e;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((1, 0))*/
  ctxt->s.push(v_1_0);
}
pc_13a : { /* <============ */
  on_bb_start(314);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_13e : { /* <============ */
  on_bb_start(318);
  /* JUMPDEST */

  /* POP */

  /* PUSH2 */
  /* val = [385] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((3, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_5_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((3, 4)) */
  const uint256_t v_6_0 = sub_v(v_5_0, c_4);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((6, 0)) */

  /* LT */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = Constant((7, 32)) */
  const uint256_t v_9_0 = lt_v(v_6_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_10_0 = iszero_v(v_9_0);

  /* PUSH2 */
  /* val = [341] */

  /* JUMPI */
  /* op_0 = Constant((11, 341)) */
  /* op_1 = InstructionRef((10, 0)) */
  if (v_10_0)
  {
    /* BB finalizer */
    ctxt->s.set(0, c_181);
    /* no pops at end */
    /* BB return 0 Constant((3, 4))*/
    ctxt->s.push(c_4);
    /* BB return 1 InstructionRef((6, 0))*/
    ctxt->s.push(v_6_0);

    goto pc_155;
  }

  /* BB finalizer */
  ctxt->s.set(0, c_181);
  /* no pops at end */
  /* BB return 0 Constant((3, 4))*/
  ctxt->s.push(c_4);
  /* BB return 1 InstructionRef((6, 0))*/
  ctxt->s.push(v_6_0);
}
pc_151 : { /* <============ */
  on_bb_start(337);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_155 : { /* <============ */
  on_bb_start(341);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((10, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_11_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [750] */

  /* JUMP */
  /* op_0 = Constant((19, 750)) */
  /* BB finalizer */
  ctxt->s.set(1, v_8_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_2ee;
}
pc_181 : { /* <============ */
  on_bb_start(385);
  /* JUMPDEST */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_183 : { /* <============ */
  on_bb_start(387);
  /* JUMPDEST */

  /* CALLVALUE */
  const uint256_t v_1_0 = callvalue_v();

  /* DUP1 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ISZERO */
  /* op_0 = InstructionRef((1, 0)) */
  const uint256_t v_3_0 = iszero_v(v_1_0);

  /* PUSH2 */
  /* val = [399] */

  /* JUMPI */
  /* op_0 = Constant((4, 399)) */
  /* op_1 = InstructionRef((3, 0)) */
  if (v_3_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* BB return 0 InstructionRef((1, 0))*/
    ctxt->s.push(v_1_0);

    goto pc_18f;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((1, 0))*/
  ctxt->s.push(v_1_0);
}
pc_18b : { /* <============ */
  on_bb_start(395);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_18f : { /* <============ */
  on_bb_start(399);
  /* JUMPDEST */

  /* POP */

  /* PUSH2 */
  /* val = [466] */

  /* PUSH1 */
  /* val = [4] */

  /* DUP1 */
  /* op_0 = Constant((3, 4)) */
  /* val = [4] */

  /* CALLDATASIZE */
  const uint256_t v_5_0 = calldatasize_v();

  /* SUB */
  /* op_0 = InstructionRef((5, 0)) */
  /* op_1 = Constant((3, 4)) */
  const uint256_t v_6_0 = sub_v(v_5_0, c_4);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((6, 0)) */

  /* LT */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = Constant((7, 32)) */
  const uint256_t v_9_0 = lt_v(v_6_0, c_20);

  /* ISZERO */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_10_0 = iszero_v(v_9_0);

  /* PUSH2 */
  /* val = [422] */

  /* JUMPI */
  /* op_0 = Constant((11, 422)) */
  /* op_1 = InstructionRef((10, 0)) */
  if (v_10_0)
  {
    /* BB finalizer */
    ctxt->s.set(0, c_1d2);
    /* no pops at end */
    /* BB return 0 Constant((3, 4))*/
    ctxt->s.push(c_4);
    /* BB return 1 InstructionRef((6, 0))*/
    ctxt->s.push(v_6_0);

    goto pc_1a6;
  }

  /* BB finalizer */
  ctxt->s.set(0, c_1d2);
  /* no pops at end */
  /* BB return 0 Constant((3, 4))*/
  ctxt->s.push(c_4);
  /* BB return 1 InstructionRef((6, 0))*/
  ctxt->s.push(v_6_0);
}
pc_1a2 : { /* <============ */
  on_bb_start(418);
  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((0, 0)) */
  /* val = [0] */

  /* REVERT */
  /* op_0 = Constant((0, 0)) */
  /* op_1 = Constant((0, 0)) */
  revert_v(c_0, c_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_1a6 : { /* <============ */
  on_bb_start(422);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_2_0 = add_v(s_0_1, s_0_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP1 */
  /* op_0 = StackRef((0, 1)) */

  /* CALLDATALOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_6_0 = calldataload_v(s_0_1);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((10, 32)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_11_0 = add_v(c_20, s_0_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SWAP3 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((2, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((11, 0)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH2 */
  /* val = [905] */

  /* JUMP */
  /* op_0 = Constant((19, 905)) */
  /* BB finalizer */
  ctxt->s.set(1, v_8_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  goto pc_389;
}
pc_1d2 : { /* <============ */
  on_bb_start(466);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((1, 64)) */
  const uint256_t v_2_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((2, 0)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP2 */
  /* op_0 = InstructionRef((2, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((2, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(v_2_0, s_0_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((7, 32)) */
  /* op_1 = InstructionRef((2, 0)) */
  const uint256_t v_8_0 = add_v(c_20, v_2_0);

  /* SWAP2 */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((12, 64)) */
  const uint256_t v_13_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((13, 0)) */

  /* SWAP2 */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((8, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = InstructionRef((13, 0)) */

  /* RETURN */
  /* op_0 = InstructionRef((13, 0)) */
  /* op_1 = InstructionRef((16, 0)) */
  return_v(v_13_0, v_16_0);
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(1);
  /* no BB returns */
}
pc_1e8 : { /* <============ */
  on_bb_start(488);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* CALLVALUE */
  const uint256_t v_1_0 = callvalue_v();

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* DUP4 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_6_0 = and_v(g_19, s_0_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* DUP2 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* MSTORE */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = InstructionRef((8, 0)) */
  mstore_v(c_0, v_8_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((11, 32)) */
  /* op_1 = Constant((2, 0)) */
  /* val = [32] */

  /* SWAP1 */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((2, 0)) */

  /* DUP2 */
  /* op_0 = Constant((12, 32)) */
  /* val = [32] */

  /* MSTORE */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((2, 0)) */
  mstore_v(c_20, c_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((16, 32)) */
  /* op_1 = Constant((12, 32)) */
  /* val = [64] */

  /* PUSH1 */
  /* val = [0] */

  /* SHA3 */
  /* op_0 = Constant((18, 0)) */
  /* op_1 = Constant((17, 64)) */
  const uint256_t v_19_0 = sha3_v(c_0, c_40);

  /* PUSH1 */
  /* val = [0] */

  /* DUP3 */
  /* op_0 = InstructionRef((1, 0)) */

  /* DUP3 */
  /* op_0 = InstructionRef((19, 0)) */

  /* SLOAD */
  /* op_0 = InstructionRef((19, 0)) */
  const uint256_t v_23_0 = sload_v(v_19_0);

  /* ADD */
  /* op_0 = InstructionRef((23, 0)) */
  /* op_1 = InstructionRef((1, 0)) */
  const uint256_t v_24_0 = add_v(v_23_0, v_1_0);

  /* SWAP3 */
  /* op_0 = InstructionRef((24, 0)) */
  /* op_1 = InstructionRef((1, 0)) */

  /* POP */

  /* POP */

  /* DUP2 */
  /* op_0 = InstructionRef((24, 0)) */

  /* SWAP1 */
  /* op_0 = InstructionRef((24, 0)) */
  /* op_1 = InstructionRef((19, 0)) */

  /* SSTORE */
  /* op_0 = InstructionRef((19, 0)) */
  /* op_1 = InstructionRef((24, 0)) */
  sstore_v(v_19_0, v_24_0);

  /* POP */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 1)) */
  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(2);
  /* no BB returns */

  JUMP(s_0_1);
}
pc_237 : { /* <============ */
  on_bb_start(567);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [32] */

  /* MSTORE */
  /* op_0 = Constant((2, 32)) */
  /* op_1 = Constant((1, 0)) */
  mstore_v(c_20, c_0);

  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* MSTORE */
  /* op_0 = Constant((5, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(c_0, s_0_0);

  /* PUSH1 */
  /* val = [64] */

  /* PUSH1 */
  /* val = [0] */

  /* SHA3 */
  /* op_0 = Constant((8, 0)) */
  /* op_1 = Constant((7, 64)) */
  const uint256_t v_9_0 = sha3_v(c_0, c_40);

  /* PUSH1 */
  /* val = [0] */

  /* SWAP2 */
  /* op_0 = Constant((10, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* SWAP1 */
  /* op_0 = InstructionRef((9, 0)) */
  /* op_1 = Constant((10, 0)) */

  /* POP */

  /* SLOAD */
  /* op_0 = InstructionRef((9, 0)) */
  const uint256_t v_15_0 = sload_v(v_9_0);

  /* DUP2 */
  /* op_0 = StackRef((0, 1)) */

  /* JUMP */
  /* op_0 = StackRef((0, 1)) */
  /* BB finalizer */
  ctxt->s.set(0, v_15_0);
  /* no pops at end */
  /* no BB returns */

  JUMP(s_0_1);
}
pc_24f : { /* <============ */
  on_bb_start(591);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* CALLER */
  const uint256_t v_4_0 = caller_v();

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((4, 0)) */
  const uint256_t v_6_0 = and_v(g_19, v_4_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* DUP2 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* MSTORE */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = InstructionRef((8, 0)) */
  mstore_v(c_0, v_8_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((11, 32)) */
  /* op_1 = Constant((2, 0)) */
  /* val = [32] */

  /* SWAP1 */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((2, 0)) */

  /* DUP2 */
  /* op_0 = Constant((12, 32)) */
  /* val = [32] */

  /* MSTORE */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((2, 0)) */
  mstore_v(c_20, c_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((16, 32)) */
  /* op_1 = Constant((12, 32)) */
  /* val = [64] */

  /* PUSH1 */
  /* val = [0] */

  /* SHA3 */
  /* op_0 = Constant((18, 0)) */
  /* op_1 = Constant((17, 64)) */
  const uint256_t v_19_0 = sha3_v(c_0, c_40);

  /* SLOAD */
  /* op_0 = InstructionRef((19, 0)) */
  const uint256_t v_20_0 = sload_v(v_19_0);

  /* LT */
  /* op_0 = InstructionRef((20, 0)) */
  /* op_1 = StackRef((0, 0)) */
  TRACE_COMP(eevm::Opcode::LT, v_20_0, s_0_0);
  const uint256_t v_21_0 = lt_v(v_20_0, s_0_0);

  /* PUSH2 */
  /* val = [747] */

  /* JUMPI */
  /* op_0 = Constant((22, 747)) */
  /* op_1 = InstructionRef((21, 0)) */
  if (v_21_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_2eb;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_295 : { /* <============ */
  on_bb_start(661);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* PUSH2 */
  /* val = [670] */

  /* CALLER */
  const uint256_t v_1_0 = caller_v();

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH2 */
  /* val = [977] */

  /* JUMP */
  /* op_0 = Constant((3, 977)) */
  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 Constant((0, 670))*/
  ctxt->s.push(c_29e);
  /* BB return 1 InstructionRef((1, 0))*/
  ctxt->s.push(v_1_0);
  /* BB return 2 StackRef((0, 0))*/
  ctxt->s.push(s_0_0);

  goto pc_3d1;
}
pc_29e : { /* <============ */
  on_bb_start(670);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* JUMPDEST */

  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* CALLER */
  const uint256_t v_4_0 = caller_v();

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((4, 0)) */
  const uint256_t v_6_0 = and_v(g_19, v_4_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* DUP2 */
  /* op_0 = Constant((2, 0)) */
  /* val = [0] */

  /* MSTORE */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = InstructionRef((8, 0)) */
  mstore_v(c_0, v_8_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((11, 32)) */
  /* op_1 = Constant((2, 0)) */
  /* val = [32] */

  /* SWAP1 */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((2, 0)) */

  /* DUP2 */
  /* op_0 = Constant((12, 32)) */
  /* val = [32] */

  /* MSTORE */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((2, 0)) */
  mstore_v(c_20, c_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((16, 32)) */
  /* op_1 = Constant((12, 32)) */
  /* val = [64] */

  /* PUSH1 */
  /* val = [0] */

  /* SHA3 */
  /* op_0 = Constant((18, 0)) */
  /* op_1 = Constant((17, 64)) */
  const uint256_t v_19_0 = sha3_v(c_0, c_40);

  /* PUSH1 */
  /* val = [0] */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP3 */
  /* op_0 = InstructionRef((19, 0)) */

  /* SLOAD */
  /* op_0 = InstructionRef((19, 0)) */
  const uint256_t v_23_0 = sload_v(v_19_0);

  /* SUB */
  /* op_0 = InstructionRef((23, 0)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_24_0 = sub_v(v_23_0, s_0_0);

  /* SWAP3 */
  /* op_0 = InstructionRef((24, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* POP */

  /* DUP2 */
  /* op_0 = InstructionRef((24, 0)) */

  /* SWAP1 */
  /* op_0 = InstructionRef((24, 0)) */
  /* op_1 = InstructionRef((19, 0)) */

  /* SSTORE */
  /* op_0 = InstructionRef((19, 0)) */
  /* op_1 = InstructionRef((24, 0)) */
  sstore_v(v_19_0, v_24_0);

  /* POP */

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_2eb : { /* <============ */
  on_bb_start(747);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 1)) */
  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(2);
  /* no BB returns */

  JUMP(s_0_1);
}
pc_2ee : { /* <============ */
  on_bb_start(750);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [1] */

  /* PUSH1 */
  /* val = [0] */

  /* SWAP1 */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = Constant((1, 1)) */

  /* SLOAD */
  /* op_0 = Constant((1, 1)) */
  const uint256_t v_4_0 = sload_v(c_1);

  /* SWAP1 */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 0)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((6, 256)) */
  /* op_1 = Constant((2, 0)) */
  /* val = [1] */

  /* SWAP1 */
  /* op_0 = Constant((7, 1)) */
  /* op_1 = InstructionRef((4, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((7, 1)) */
  /* val = [] */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((4, 0)) */
  const uint256_t v_11_0 = and_v(g_19, v_4_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_13_0 = and_v(g_19, v_11_0);

  /* CALLER */
  const uint256_t v_14_0 = caller_v();

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((14, 0)) */
  const uint256_t v_16_0 = and_v(g_19, v_14_0);

  /* EQ */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = InstructionRef((13, 0)) */
  TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
  const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);

  /* ISZERO */
  /* op_0 = InstructionRef((17, 0)) */
  const uint256_t v_18_0 = iszero_v(v_17_0);

  /* PUSH2 */
  /* val = [902] */

  /* JUMPI */
  /* op_0 = Constant((19, 902)) */
  /* op_1 = InstructionRef((18, 0)) */
  if (v_18_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_386;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_345 : { /* <============ */
  on_bb_start(837);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [2] */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((3, 256)) */
  /* op_1 = Constant((2, 0)) */
  /* val = [1] */

  /* DUP2 */
  /* op_0 = Constant((1, 2)) */
  /* val = [2] */

  /* SLOAD */
  /* op_0 = Constant((1, 2)) */
  const uint256_t v_6_0 = sload_v(c_2);

  /* DUP2 */
  /* op_0 = Constant((4, 1)) */
  /* val = [1] */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* MUL */
  /* op_0 = Constant((8, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = Constant((4, 1)) */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* NOT */
  /* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
  /* val =
   * [115792089237316195423570985007226406215939081747436879206741300988257197096960]
   */

  /* AND */
  /* op_0 = Constant((10,
   * 115792089237316195423570985007226406215939081747436879206741300988257197096960))
   */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_11_0 = and_v(g_44, v_6_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = Constant((4, 1)) */

  /* DUP4 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((14, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_15_0 = and_v(g_19, s_0_0);

  /* MUL */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = Constant((4, 1)) */
  /* val = [] */

  /* OR */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_17_0 = or_v(v_15_0, v_11_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((17, 0)) */
  /* op_1 = Constant((1, 2)) */

  /* SSTORE */
  /* op_0 = Constant((1, 2)) */
  /* op_1 = InstructionRef((17, 0)) */
  sstore_v(c_2, v_17_0);

  /* POP */

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_386 : { /* <============ */
  on_bb_start(902);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 1)) */
  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(2);
  /* no BB returns */

  JUMP(s_0_1);
}
pc_389 : { /* <============ */
  on_bb_start(905);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [0] */

  /* DUP1 */
  /* op_0 = Constant((1, 0)) */
  /* val = [0] */

  /* PUSH1 */
  /* val = [0] */

  /* DUP4 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = StackRef((0, 0)) */
  const uint256_t v_6_0 = and_v(g_19, s_0_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((6, 0)) */
  const uint256_t v_8_0 = and_v(g_19, v_6_0);

  /* DUP2 */
  /* op_0 = Constant((3, 0)) */
  /* val = [0] */

  /* MSTORE */
  /* op_0 = Constant((3, 0)) */
  /* op_1 = InstructionRef((8, 0)) */
  mstore_v(c_0, v_8_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((11, 32)) */
  /* op_1 = Constant((3, 0)) */
  /* val = [32] */

  /* SWAP1 */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((1, 0)) */

  /* DUP2 */
  /* op_0 = Constant((12, 32)) */
  /* val = [32] */

  /* MSTORE */
  /* op_0 = Constant((12, 32)) */
  /* op_1 = Constant((1, 0)) */
  mstore_v(c_20, c_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((16, 32)) */
  /* op_1 = Constant((12, 32)) */
  /* val = [64] */

  /* PUSH1 */
  /* val = [0] */

  /* SHA3 */
  /* op_0 = Constant((18, 0)) */
  /* op_1 = Constant((17, 64)) */
  const uint256_t v_19_0 = sha3_v(c_0, c_40);

  /* SLOAD */
  /* op_0 = InstructionRef((19, 0)) */
  const uint256_t v_20_0 = sload_v(v_19_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((20, 0)) */
  /* op_1 = Constant((1, 0)) */

  /* POP */

  /* SWAP2 */
  /* op_0 = InstructionRef((20, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* SWAP1 */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 1)) */
  /* BB finalizer */
  ctxt->s.set(1, v_20_0);
  ctxt->s.pop_drop_n(1);
  /* no BB returns */

  JUMP(s_0_1);
}
pc_3d1 : { /* <============ */
  on_bb_start(977);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [2] */

  /* PUSH1 */
  /* val = [0] */

  /* SWAP1 */
  /* op_0 = Constant((2, 0)) */
  /* op_1 = Constant((1, 2)) */

  /* SLOAD */
  /* op_0 = Constant((1, 2)) */
  const uint256_t v_4_0 = sload_v(c_2);

  /* SWAP1 */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((2, 0)) */

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((6, 256)) */
  /* op_1 = Constant((2, 0)) */
  /* val = [1] */

  /* SWAP1 */
  /* op_0 = Constant((7, 1)) */
  /* op_1 = InstructionRef((4, 0)) */

  /* DIV */
  /* op_0 = InstructionRef((4, 0)) */
  /* op_1 = Constant((7, 1)) */
  /* val = [] */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((4, 0)) */
  const uint256_t v_11_0 = and_v(g_19, v_4_0);

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = InstructionRef((11, 0)) */
  const uint256_t v_13_0 = and_v(g_19, v_11_0);

  /* DUP3 */
  /* op_0 = StackRef((0, 1)) */

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((16, 64)) */
  const uint256_t v_17_0 = mload_v(c_40);

  /* PUSH1 */
  /* val = [36] */

  /* ADD */
  /* op_0 = Constant((18, 36)) */
  /* op_1 = InstructionRef((17, 0)) */
  const uint256_t v_19_0 = add_v(c_24, v_17_0);

  /* DUP1 */
  /* op_0 = InstructionRef((19, 0)) */

  /* DUP4 */
  /* op_0 = StackRef((0, 1)) */

  /* PUSH20 */
  /* val = [1461501637330902918203684832716283019655932542975] */

  /* AND */
  /* op_0 = Constant((22, 1461501637330902918203684832716283019655932542975)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_23_0 = and_v(g_19, s_0_1);

  /* DUP2 */
  /* op_0 = InstructionRef((19, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((19, 0)) */
  /* op_1 = InstructionRef((23, 0)) */
  mstore_v(v_19_0, v_23_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((26, 32)) */
  /* op_1 = InstructionRef((19, 0)) */
  const uint256_t v_27_0 = add_v(c_20, v_19_0);

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* DUP2 */
  /* op_0 = InstructionRef((27, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((27, 0)) */
  /* op_1 = StackRef((0, 0)) */
  mstore_v(v_27_0, s_0_0);

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((31, 32)) */
  /* op_1 = InstructionRef((27, 0)) */
  const uint256_t v_32_0 = add_v(c_20, v_27_0);

  /* SWAP3 */
  /* op_0 = InstructionRef((32, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((37, 64)) */
  const uint256_t v_38_0 = mload_v(c_40);

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = InstructionRef((38, 0)) */

  /* DUP4 */
  /* op_0 = InstructionRef((32, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((32, 0)) */
  /* op_1 = InstructionRef((38, 0)) */
  const uint256_t v_42_0 = sub_v(v_32_0, v_38_0);

  /* SUB */
  /* op_0 = InstructionRef((42, 0)) */
  /* op_1 = Constant((39, 32)) */
  const uint256_t v_43_0 = sub_v(v_42_0, c_20);

  /* DUP2 */
  /* op_0 = InstructionRef((38, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((38, 0)) */
  /* op_1 = InstructionRef((43, 0)) */
  mstore_v(v_38_0, v_43_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((38, 0)) */
  /* op_1 = InstructionRef((32, 0)) */

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((47, 64)) */
  /* op_1 = InstructionRef((32, 0)) */
  mstore_v(c_40, v_32_0);

  /* PUSH32 */
  /* val =
   * [94264142729085255177946401541490607755928923235451287757544741978853427118080]
   */

  /* PUSH28 */
  /* val =
   * [26959946667150639794667015087019630673637144422540572481103610249215] */

  /* NOT */
  /* op_0 = Constant((50,
   * 26959946667150639794667015087019630673637144422540572481103610249215)) */
  /* val =
   * [115792089210356248756420345214020892766250353992003419616917011526809519390720]
   */

  /* AND */
  /* op_0 = Constant((51,
   * 115792089210356248756420345214020892766250353992003419616917011526809519390720))
   */
  /* op_1 = Constant((49,
   * 94264142729085255177946401541490607755928923235451287757544741978853427118080))
   */
  /* val =
   * [94264142729085255177946401541490607755928923235451287757544741978853427118080]
   */

  /* PUSH1 */
  /* val = [32] */

  /* DUP3 */
  /* op_0 = InstructionRef((38, 0)) */

  /* ADD */
  /* op_0 = InstructionRef((38, 0)) */
  /* op_1 = Constant((53, 32)) */
  const uint256_t v_55_0 = add_v(v_38_0, c_20);

  /* DUP1 */
  /* op_0 = InstructionRef((55, 0)) */

  /* MLOAD */
  /* op_0 = InstructionRef((55, 0)) */
  const uint256_t v_57_0 = mload_v(v_55_0);

  /* PUSH28 */
  /* val =
   * [26959946667150639794667015087019630673637144422540572481103610249215] */

  /* DUP4 */
  /* op_0 = Constant((52,
   * 94264142729085255177946401541490607755928923235451287757544741978853427118080))
   */
  /* val =
   * [94264142729085255177946401541490607755928923235451287757544741978853427118080]
   */

  /* DUP2 */
  /* op_0 = Constant((58,
   * 26959946667150639794667015087019630673637144422540572481103610249215)) */
  /* val =
   * [26959946667150639794667015087019630673637144422540572481103610249215] */

  /* DUP4 */
  /* op_0 = InstructionRef((57, 0)) */

  /* AND */
  /* op_0 = InstructionRef((57, 0)) */
  /* op_1 = Constant((58,
   * 26959946667150639794667015087019630673637144422540572481103610249215)) */
  const uint256_t v_62_0 = and_v(v_57_0, g_46);

  /* OR */
  /* op_0 = InstructionRef((62, 0)) */
  /* op_1 = Constant((52,
   * 94264142729085255177946401541490607755928923235451287757544741978853427118080))
   */
  const uint256_t v_63_0 = or_v(v_62_0, g_48);

  /* DUP4 */
  /* op_0 = InstructionRef((55, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((55, 0)) */
  /* op_1 = InstructionRef((63, 0)) */
  mstore_v(v_55_0, v_63_0);

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((70, 64)) */
  const uint256_t v_71_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((71, 0)) */

  /* DUP3 */
  /* op_0 = InstructionRef((38, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((38, 0)) */

  /* MLOAD */
  /* op_0 = InstructionRef((38, 0)) */
  const uint256_t v_75_0 = mload_v(v_38_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((75, 0)) */
  /* op_1 = InstructionRef((38, 0)) */

  /* PUSH1 */
  /* val = [32] */

  /* ADD */
  /* op_0 = Constant((77, 32)) */
  /* op_1 = InstructionRef((38, 0)) */
  const uint256_t v_78_0 = add_v(c_20, v_38_0);

  /* SWAP1 */
  /* op_0 = InstructionRef((78, 0)) */
  /* op_1 = InstructionRef((75, 0)) */

  /* DUP1 */
  /* op_0 = InstructionRef((75, 0)) */

  /* DUP4 */
  /* op_0 = InstructionRef((71, 0)) */

  /* DUP4 */
  /* op_0 = InstructionRef((78, 0)) */

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((13, 0))*/
  ctxt->s.push(v_13_0);
  /* BB return 1 InstructionRef((38, 0))*/
  ctxt->s.push(v_38_0);
  /* BB return 2 InstructionRef((71, 0))*/
  ctxt->s.push(v_71_0);
  /* BB return 3 InstructionRef((71, 0))*/
  ctxt->s.push(v_71_0);
  /* BB return 4 InstructionRef((78, 0))*/
  ctxt->s.push(v_78_0);
  /* BB return 5 InstructionRef((75, 0))*/
  ctxt->s.push(v_75_0);
  /* BB return 6 InstructionRef((75, 0))*/
  ctxt->s.push(v_75_0);
  /* BB return 7 InstructionRef((71, 0))*/
  ctxt->s.push(v_71_0);
  /* BB return 8 InstructionRef((78, 0))*/
  ctxt->s.push(v_78_0);
}
pc_4c6 : { /* <============ */
  on_bb_start(1222);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [32] */

  /* DUP4 */
  /* op_0 = StackRef((0, 2)) */

  /* LT */
  /* op_0 = StackRef((0, 2)) */
  /* op_1 = Constant((1, 32)) */
  const uint256_t v_3_0 = lt_v(s_0_2, c_20);

  /* PUSH2 */
  /* val = [1257] */

  /* JUMPI */
  /* op_0 = Constant((4, 1257)) */
  /* op_1 = InstructionRef((3, 0)) */
  if (v_3_0)
  {
    /* BB finalizer */
    /* no stack sets */
    /* no pops at end */
    /* no BB returns */

    goto pc_4e9;
  }

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_4cf : { /* <============ */
  on_bb_start(1231);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* DUP1 */
  /* op_0 = StackRef((0, 0)) */

  /* MLOAD */
  /* op_0 = StackRef((0, 0)) */
  const uint256_t v_1_0 = mload_v(s_0_0);

  /* DUP3 */
  /* op_0 = StackRef((0, 1)) */

  /* MSTORE */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((1, 0)) */
  mstore_v(s_0_1, v_1_0);

  /* PUSH1 */
  /* val = [32] */

  /* DUP3 */
  /* op_0 = StackRef((0, 1)) */

  /* ADD */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = Constant((4, 32)) */
  const uint256_t v_6_0 = add_v(s_0_1, c_20);

  /* SWAP2 */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* PUSH1 */
  /* val = [32] */

  /* DUP2 */
  /* op_0 = StackRef((0, 0)) */

  /* ADD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = Constant((9, 32)) */
  const uint256_t v_11_0 = add_v(s_0_0, c_20);

  /* SWAP1 */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = StackRef((0, 0)) */

  /* POP */

  /* PUSH1 */
  /* val = [32] */

  /* DUP4 */
  /* op_0 = StackRef((0, 2)) */

  /* SUB */
  /* op_0 = StackRef((0, 2)) */
  /* op_1 = Constant((14, 32)) */
  const uint256_t v_16_0 = sub_v(s_0_2, c_20);

  /* SWAP3 */
  /* op_0 = InstructionRef((16, 0)) */
  /* op_1 = StackRef((0, 2)) */

  /* POP */

  /* PUSH2 */
  /* val = [1222] */

  /* JUMP */
  /* op_0 = Constant((19, 1222)) */
  /* BB finalizer */
  ctxt->s.set(0, v_11_0);

  ctxt->s.set(1, v_6_0);

  ctxt->s.set(2, v_16_0);
  /* no pops at end */
  /* no BB returns */

  goto pc_4c6;
}
pc_4e9 : { /* <============ */
  on_bb_start(1257);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  const uint256_t s_0_7 = ctxt->s.peek(7);
  const uint256_t s_0_8 = ctxt->s.peek(8);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [1] */

  /* DUP4 */
  /* op_0 = StackRef((0, 2)) */

  /* PUSH1 */
  /* val = [32] */

  /* SUB */
  /* op_0 = Constant((3, 32)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_4_0 = sub_v(c_20, s_0_2);

  /* PUSH2 */
  /* val = [256] */

  /* EXP */
  /* op_0 = Constant((5, 256)) */
  /* op_1 = InstructionRef((4, 0)) */
  const uint256_t v_6_0 = exp_v(c_100, v_4_0);

  /* SUB */
  /* op_0 = InstructionRef((6, 0)) */
  /* op_1 = Constant((1, 1)) */
  const uint256_t v_7_0 = sub_v(v_6_0, c_1);

  /* DUP1 */
  /* op_0 = InstructionRef((7, 0)) */

  /* NOT */
  /* op_0 = InstructionRef((7, 0)) */
  const uint256_t v_9_0 = not_v(v_7_0);

  /* DUP3 */
  /* op_0 = StackRef((0, 0)) */

  /* MLOAD */
  /* op_0 = StackRef((0, 0)) */
  const uint256_t v_11_0 = mload_v(s_0_0);

  /* AND */
  /* op_0 = InstructionRef((11, 0)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_12_0 = and_v(v_11_0, v_9_0);

  /* DUP2 */
  /* op_0 = InstructionRef((7, 0)) */

  /* DUP5 */
  /* op_0 = StackRef((0, 1)) */

  /* MLOAD */
  /* op_0 = StackRef((0, 1)) */
  const uint256_t v_15_0 = mload_v(s_0_1);

  /* AND */
  /* op_0 = InstructionRef((15, 0)) */
  /* op_1 = InstructionRef((7, 0)) */
  const uint256_t v_16_0 = and_v(v_15_0, v_7_0);

  /* DUP1 */
  /* op_0 = InstructionRef((16, 0)) */

  /* DUP3 */
  /* op_0 = InstructionRef((12, 0)) */

  /* OR */
  /* op_0 = InstructionRef((12, 0)) */
  /* op_1 = InstructionRef((16, 0)) */
  const uint256_t v_19_0 = or_v(v_12_0, v_16_0);

  /* DUP6 */
  /* op_0 = StackRef((0, 1)) */

  /* MSTORE */
  /* op_0 = StackRef((0, 1)) */
  /* op_1 = InstructionRef((19, 0)) */
  mstore_v(s_0_1, v_19_0);

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* SWAP1 */
  /* op_0 = StackRef((0, 3)) */
  /* op_1 = StackRef((0, 4)) */

  /* POP */

  /* ADD */
  /* op_0 = StackRef((0, 3)) */
  /* op_1 = StackRef((0, 5)) */
  const uint256_t v_30_0 = add_v(s_0_3, s_0_5);

  /* SWAP2 */
  /* op_0 = InstructionRef((30, 0)) */
  /* op_1 = StackRef((0, 7)) */

  /* POP */

  /* POP */

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((35, 64)) */
  const uint256_t v_36_0 = mload_v(c_40);

  /* DUP1 */
  /* op_0 = InstructionRef((36, 0)) */

  /* DUP4 */
  /* op_0 = InstructionRef((30, 0)) */

  /* SUB */
  /* op_0 = InstructionRef((30, 0)) */
  /* op_1 = InstructionRef((36, 0)) */
  const uint256_t v_39_0 = sub_v(v_30_0, v_36_0);

  /* DUP2 */
  /* op_0 = InstructionRef((36, 0)) */

  /* DUP6 */
  /* op_0 = StackRef((0, 8)) */

  /* GAS */
  const uint256_t v_42_0 = gas_v();

  /* DELEGATECALL */
  /* op_0 = InstructionRef((42, 0)) */
  /* op_1 = StackRef((0, 8)) */
  /* op_2 = InstructionRef((36, 0)) */
  /* op_3 = InstructionRef((39, 0)) */
  /* op_4 = InstructionRef((36, 0)) */
  /* op_5 = Constant((34, 0)) */
  const uint256_t v_43_0 =
    delegatecall_v(v_42_0, s_0_8, v_36_0, v_39_0, v_36_0, c_0);
  if (ctxt->error)
    goto exit_label;

  /* SWAP2 */
  /* op_0 = InstructionRef((43, 0)) */
  /* op_1 = StackRef((0, 8)) */

  /* POP */

  /* POP */

  /* RETURNDATASIZE */
  const uint256_t v_47_0 = returndatasize_v();

  /* DUP1 */
  /* op_0 = InstructionRef((47, 0)) */

  /* PUSH1 */
  /* val = [0] */

  /* DUP2 */
  /* op_0 = InstructionRef((47, 0)) */

  /* EQ */
  /* op_0 = InstructionRef((47, 0)) */
  /* op_1 = Constant((49, 0)) */
  const uint256_t v_51_0 = eq_v(v_47_0, c_0);

  /* PUSH2 */
  /* val = [1353] */

  /* JUMPI */
  /* op_0 = Constant((52, 1353)) */
  /* op_1 = InstructionRef((51, 0)) */
  if (v_51_0)
  {
    /* BB finalizer */
    ctxt->s.set(6, v_47_0);

    ctxt->s.set(7, v_47_0);

    ctxt->s.set(8, v_43_0);
    ctxt->s.pop_drop_n(6);
    /* no BB returns */

    goto pc_549;
  }

  /* BB finalizer */
  ctxt->s.set(6, v_47_0);

  ctxt->s.set(7, v_47_0);

  ctxt->s.set(8, v_43_0);
  ctxt->s.pop_drop_n(6);
  /* no BB returns */
}
pc_528 : { /* <============ */
  on_bb_start(1320);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* PUSH1 */
  /* val = [64] */

  /* MLOAD */
  /* op_0 = Constant((0, 64)) */
  const uint256_t v_1_0 = mload_v(c_40);

  /* SWAP2 */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* PUSH1 */
  /* val = [31] */

  /* NOT */
  /* op_0 = Constant((4, 31)) */
  /* val =
   * [115792089237316195423570985008687907853269984665640564039457584007913129639904]
   */

  /* PUSH1 */
  /* val = [63] */

  /* RETURNDATASIZE */
  const uint256_t v_7_0 = returndatasize_v();

  /* ADD */
  /* op_0 = InstructionRef((7, 0)) */
  /* op_1 = Constant((6, 63)) */
  const uint256_t v_8_0 = add_v(v_7_0, c_3f);

  /* AND */
  /* op_0 = InstructionRef((8, 0)) */
  /* op_1 = Constant((5,
   * 115792089237316195423570985008687907853269984665640564039457584007913129639904))
   */
  const uint256_t v_9_0 = and_v(v_8_0, g_54);

  /* DUP3 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ADD */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = InstructionRef((9, 0)) */
  const uint256_t v_11_0 = add_v(v_1_0, v_9_0);

  /* PUSH1 */
  /* val = [64] */

  /* MSTORE */
  /* op_0 = Constant((12, 64)) */
  /* op_1 = InstructionRef((11, 0)) */
  mstore_v(c_40, v_11_0);

  /* RETURNDATASIZE */
  const uint256_t v_14_0 = returndatasize_v();

  /* DUP3 */
  /* op_0 = InstructionRef((1, 0)) */

  /* MSTORE */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = InstructionRef((14, 0)) */
  mstore_v(v_1_0, v_14_0);

  /* RETURNDATASIZE */
  const uint256_t v_17_0 = returndatasize_v();

  /* PUSH1 */
  /* val = [0] */

  /* PUSH1 */
  /* val = [32] */

  /* DUP5 */
  /* op_0 = InstructionRef((1, 0)) */

  /* ADD */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = Constant((19, 32)) */
  const uint256_t v_21_0 = add_v(v_1_0, c_20);

  /* RETURNDATACOPY */
  /* op_0 = InstructionRef((21, 0)) */
  /* op_1 = Constant((18, 0)) */
  /* op_2 = InstructionRef((17, 0)) */
  returndatacopy_v(v_21_0, c_0, v_17_0);

  /* PUSH2 */
  /* val = [1358] */

  /* JUMP */
  /* op_0 = Constant((23, 1358)) */
  /* BB finalizer */
  ctxt->s.set(1, v_1_0);
  /* no pops at end */
  /* no BB returns */

  goto pc_54e;
}
pc_549 : { /* <============ */
  on_bb_start(1353);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  /* JUMPDEST */

  /* PUSH1 */
  /* val = [96] */

  /* SWAP2 */
  /* op_0 = Constant((1, 96)) */
  /* op_1 = StackRef((0, 1)) */

  /* POP */

  /* BB finalizer */
  ctxt->s.set(1, c_60);
  /* no pops at end */
  /* no BB returns */
}
pc_54e : { /* <============ */
  on_bb_start(1358);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  /* JUMPDEST */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* POP */

  /* JUMP */
  /* op_0 = StackRef((0, 5)) */
  /* BB finalizer */
  /* no stack sets */
  ctxt->s.pop_drop_n(6);
  /* no BB returns */

  JUMP(s_0_5);
}
pc_555 : { /* <============ */
  on_bb_start(1365);
  /* INVALID */
  invalid_v();
  goto exit_label;

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_556 : { /* <============ */
  on_bb_start(1366);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  /* LOG2 */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  /* op_3 = StackRef((0, 3)) */
  log2_v(s_0_0, s_0_1, s_0_2, s_0_3);

  /* PUSH5 */
  /* val = [452857328472] */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x556 (inst offset 2; byte 0x22)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_55e : { /* <============ */
  on_bb_start(1374);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_3 = ctxt->s.peek(3);
  const uint256_t s_0_4 = ctxt->s.peek(4);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  /* SLT */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  TRACE_COMP(eevm::Opcode::SLT, s_0_0, s_0_1);
  const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);

  /* SHA3 */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);

  /* SSTORE */
  /* op_0 = InstructionRef((1, 0)) */
  /* op_1 = StackRef((0, 3)) */
  sstore_v(v_1_0, s_0_3);

  /* EXP */
  /* op_0 = StackRef((0, 4)) */
  /* op_1 = StackRef((0, 5)) */
  const uint256_t v_3_0 = exp_v(s_0_4, s_0_5);

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x55e (inst offset 4; byte 0x1e)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_563 : { /* <============ */
  on_bb_start(1379);
  const uint256_t s_0_14 = ctxt->s.peek(14);
  /* DUP15 */
  /* op_0 = StackRef((0, 14)) */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x563 (inst offset 1; byte 0xf)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_565 : { /* <============ */
  on_bb_start(1381);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_14 = ctxt->s.peek(14);
  /* CREATE */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  /* op_2 = StackRef((0, 2)) */
  const uint256_t v_0_0 = create_v(s_0_0, s_0_1, s_0_2);
  if (ctxt->error)
    goto exit_label;

  /* PUSH17 */
  /* val = [11017821367277519542713261000655222939183] */

  /* SWAP13 */
  /* op_0 = Constant((1, 11017821367277519542713261000655222939183)) */
  /* op_1 = StackRef((0, 14)) */

  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x565 (inst offset 3; byte 0xef)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_57a : { /* <============ */
  on_bb_start(1402);
  throw Exception(
    ET::illegalInstruction,
    "invalid instruction @ 0x57a (inst offset 0; byte 0xe4)");

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* no BB returns */
}
pc_57b : { /* <============ */
  on_bb_start(1403);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  const uint256_t s_0_5 = ctxt->s.peek(5);
  const uint256_t s_0_10 = ctxt->s.peek(10);
  /* AND */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = and_v(s_0_0, s_0_1);

  /* SWAP4 */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 5)) */

  /* SHL */
  /* op_0 = StackRef((0, 5)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_2_0 = shl_v(s_0_5, s_0_2);

  /* DUP9 */
  /* op_0 = StackRef((0, 10)) */

  /* SSTORE */
  /* op_0 = StackRef((0, 10)) */
  /* op_1 = InstructionRef((2, 0)) */
  sstore_v(s_0_10, v_2_0);

  /* PUSH5 */
  /* val = [495790613315] */

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(2, g_58);

  ctxt->s.set(5, v_0_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_587 : { /* <============ */
  on_bb_start(1415);
  const uint256_t s_0_0 = ctxt->s.peek(0);
  const uint256_t s_0_1 = ctxt->s.peek(1);
  const uint256_t s_0_2 = ctxt->s.peek(2);
  /* SMOD */
  /* op_0 = StackRef((0, 0)) */
  /* op_1 = StackRef((0, 1)) */
  const uint256_t v_0_0 = smod_v(s_0_0, s_0_1);

  /* MOD */
  /* op_0 = InstructionRef((0, 0)) */
  /* op_1 = StackRef((0, 2)) */
  const uint256_t v_1_0 = mod_v(v_0_0, s_0_2);

  /* STOP */
  stop_v();
  goto exit_label;

  /* BB finalizer */
  ctxt->s.set(2, v_1_0);
  ctxt->s.pop_drop_n(2);
  /* no BB returns */
}
pc_58a : { /* <============ */
  on_bb_start(1418);
  /* CALLER */
  const uint256_t v_0_0 = caller_v();

  /* BB finalizer */
  /* no stack sets */
  /* no pops at end */
  /* BB return 0 InstructionRef((0, 0))*/
  ctxt->s.push(v_0_0);
}
exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
  0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15, 0x61, 0x0,  0x10, 0x57, 0x60,
  0x0,  0x80, 0xfd, 0x5b, 0x50, 0x60, 0x40, 0x51, 0x61, 0x6,  0x61, 0x38, 0x3,
  0x80, 0x61, 0x6,  0x61, 0x83, 0x39, 0x81, 0x81, 0x1,  0x60, 0x40, 0x52, 0x60,
  0x20, 0x81, 0x10, 0x15, 0x61, 0x0,  0x33, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b,
  0x81, 0x1,  0x90, 0x80, 0x80, 0x51, 0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91,
  0x90, 0x50, 0x50, 0x50, 0x33, 0x60, 0x1,  0x60, 0x0,  0x61, 0x1,  0x0,  0xa,
  0x81, 0x54, 0x81, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2,  0x19,
  0x16, 0x90, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x2,
  0x17, 0x90, 0x55, 0x50, 0x80, 0x60, 0x2,  0x60, 0x0,  0x61, 0x1,  0x0,  0xa,
  0x81, 0x54, 0x81, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2,  0x19,
  0x16, 0x90, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x2,
  0x17, 0x90, 0x55, 0x50, 0x50, 0x61, 0x5,  0x8b, 0x80, 0x61, 0x0,  0xd6, 0x60,
  0x0,  0x39, 0x60, 0x0,  0xf3, 0xfe, 0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x4,
  0x36, 0x10, 0x61, 0x0,  0x49, 0x57, 0x60, 0x0,  0x35, 0x60, 0xe0, 0x1c, 0x80,
  0x62, 0x36, 0x2a, 0x95, 0x14, 0x61, 0x0,  0x4e, 0x57, 0x80, 0x63, 0x27, 0xe2,
  0x35, 0xe3, 0x14, 0x61, 0x0,  0x92, 0x57, 0x80, 0x63, 0x2e, 0x1a, 0x7d, 0x4d,
  0x14, 0x61, 0x0,  0xf7, 0x57, 0x80, 0x63, 0xdb, 0xf,  0xb1, 0x7,  0x14, 0x61,
  0x1,  0x32, 0x57, 0x80, 0x63, 0xf8, 0xb2, 0xcb, 0x4f, 0x14, 0x61, 0x1,  0x83,
  0x57, 0x5b, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x61, 0x0,  0x90, 0x60, 0x4,  0x80,
  0x36, 0x3,  0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x0,  0x64, 0x57, 0x60, 0x0,
  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x35, 0x73, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x16, 0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91, 0x90,
  0x50, 0x50, 0x50, 0x61, 0x1,  0xe8, 0x56, 0x5b, 0x0,  0x5b, 0x34, 0x80, 0x15,
  0x61, 0x0,  0x9e, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50, 0x61, 0x0,  0xe1,
  0x60, 0x4,  0x80, 0x36, 0x3,  0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x0,  0xb5,
  0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x35, 0x73,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x90, 0x60, 0x20, 0x1,  0x90,
  0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x61, 0x2,  0x37, 0x56, 0x5b, 0x60, 0x40,
  0x51, 0x80, 0x82, 0x81, 0x52, 0x60, 0x20, 0x1,  0x91, 0x50, 0x50, 0x60, 0x40,
  0x51, 0x80, 0x91, 0x3,  0x90, 0xf3, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x1,  0x3,
  0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x50, 0x61, 0x1,  0x30, 0x60, 0x4,  0x80,
  0x36, 0x3,  0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x1,  0x1a, 0x57, 0x60, 0x0,
  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90, 0x80, 0x80, 0x35, 0x90, 0x60, 0x20, 0x1,
  0x90, 0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x61, 0x2,  0x4f, 0x56, 0x5b, 0x0,
  0x5b, 0x34, 0x80, 0x15, 0x61, 0x1,  0x3e, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b,
  0x50, 0x61, 0x1,  0x81, 0x60, 0x4,  0x80, 0x36, 0x3,  0x60, 0x20, 0x81, 0x10,
  0x15, 0x61, 0x1,  0x55, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b, 0x81, 0x1,  0x90,
  0x80, 0x80, 0x35, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x90,
  0x60, 0x20, 0x1,  0x90, 0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x61, 0x2,  0xee,
  0x56, 0x5b, 0x0,  0x5b, 0x34, 0x80, 0x15, 0x61, 0x1,  0x8f, 0x57, 0x60, 0x0,
  0x80, 0xfd, 0x5b, 0x50, 0x61, 0x1,  0xd2, 0x60, 0x4,  0x80, 0x36, 0x3,  0x60,
  0x20, 0x81, 0x10, 0x15, 0x61, 0x1,  0xa6, 0x57, 0x60, 0x0,  0x80, 0xfd, 0x5b,
  0x81, 0x1,  0x90, 0x80, 0x80, 0x35, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x16, 0x90, 0x60, 0x20, 0x1,  0x90, 0x92, 0x91, 0x90, 0x50, 0x50, 0x50,
  0x61, 0x3,  0x89, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x82, 0x81, 0x52, 0x60,
  0x20, 0x1,  0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x3,  0x90, 0xf3,
  0x5b, 0x34, 0x60, 0x0,  0x80, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52,
  0x60, 0x20, 0x1,  0x90, 0x81, 0x52, 0x60, 0x20, 0x1,  0x60, 0x0,  0x20, 0x60,
  0x0,  0x82, 0x82, 0x54, 0x1,  0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x50,
  0x56, 0x5b, 0x60, 0x0,  0x60, 0x20, 0x52, 0x80, 0x60, 0x0,  0x52, 0x60, 0x40,
  0x60, 0x0,  0x20, 0x60, 0x0,  0x91, 0x50, 0x90, 0x50, 0x54, 0x81, 0x56, 0x5b,
  0x80, 0x60, 0x0,  0x80, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60,
  0x20, 0x1,  0x90, 0x81, 0x52, 0x60, 0x20, 0x1,  0x60, 0x0,  0x20, 0x54, 0x10,
  0x61, 0x2,  0xeb, 0x57, 0x61, 0x2,  0x9e, 0x33, 0x82, 0x61, 0x3,  0xd1, 0x56,
  0x5b, 0x80, 0x60, 0x0,  0x80, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52,
  0x60, 0x20, 0x1,  0x90, 0x81, 0x52, 0x60, 0x20, 0x1,  0x60, 0x0,  0x20, 0x60,
  0x0,  0x82, 0x82, 0x54, 0x3,  0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b,
  0x50, 0x56, 0x5b, 0x60, 0x1,  0x60, 0x0,  0x90, 0x54, 0x90, 0x61, 0x1,  0x0,
  0xa,  0x90, 0x4,  0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x33, 0x73, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x16, 0x14, 0x15, 0x61, 0x3,  0x86, 0x57, 0x80, 0x60,
  0x2,  0x60, 0x0,  0x61, 0x1,  0x0,  0xa,  0x81, 0x54, 0x81, 0x73, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x2,  0x19, 0x16, 0x90, 0x83, 0x73, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x2,  0x17, 0x90, 0x55, 0x50, 0x5b, 0x50,
  0x56, 0x5b, 0x60, 0x0,  0x80, 0x60, 0x0,  0x83, 0x73, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16,
  0x81, 0x52, 0x60, 0x20, 0x1,  0x90, 0x81, 0x52, 0x60, 0x20, 0x1,  0x60, 0x0,
  0x20, 0x54, 0x90, 0x50, 0x91, 0x90, 0x50, 0x56, 0x5b, 0x60, 0x2,  0x60, 0x0,
  0x90, 0x54, 0x90, 0x61, 0x1,  0x0,  0xa,  0x90, 0x4,  0x73, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x16, 0x82, 0x82, 0x60, 0x40, 0x51, 0x60, 0x24, 0x1,  0x80, 0x83, 0x73, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x1,  0x82,
  0x81, 0x52, 0x60, 0x20, 0x1,  0x92, 0x50, 0x50, 0x50, 0x60, 0x40, 0x51, 0x60,
  0x20, 0x81, 0x83, 0x3,  0x3,  0x81, 0x52, 0x90, 0x60, 0x40, 0x52, 0x7f, 0xd0,
  0x67, 0x9d, 0x34, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
  0x0,  0x0,  0x0,  0x0,  0x0,  0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x19, 0x16, 0x60, 0x20, 0x82,
  0x1,  0x80, 0x51, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x81, 0x83, 0x16, 0x17, 0x83, 0x52,
  0x50, 0x50, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x82, 0x80, 0x51, 0x90, 0x60,
  0x20, 0x1,  0x90, 0x80, 0x83, 0x83, 0x5b, 0x60, 0x20, 0x83, 0x10, 0x61, 0x4,
  0xe9, 0x57, 0x80, 0x51, 0x82, 0x52, 0x60, 0x20, 0x82, 0x1,  0x91, 0x50, 0x60,
  0x20, 0x81, 0x1,  0x90, 0x50, 0x60, 0x20, 0x83, 0x3,  0x92, 0x50, 0x61, 0x4,
  0xc6, 0x56, 0x5b, 0x60, 0x1,  0x83, 0x60, 0x20, 0x3,  0x61, 0x1,  0x0,  0xa,
  0x3,  0x80, 0x19, 0x82, 0x51, 0x16, 0x81, 0x84, 0x51, 0x16, 0x80, 0x82, 0x17,
  0x85, 0x52, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x90, 0x50, 0x1,  0x91, 0x50,
  0x50, 0x60, 0x0,  0x60, 0x40, 0x51, 0x80, 0x83, 0x3,  0x81, 0x85, 0x5a, 0xf4,
  0x91, 0x50, 0x50, 0x3d, 0x80, 0x60, 0x0,  0x81, 0x14, 0x61, 0x5,  0x49, 0x57,
  0x60, 0x40, 0x51, 0x91, 0x50, 0x60, 0x1f, 0x19, 0x60, 0x3f, 0x3d, 0x1,  0x16,
  0x82, 0x1,  0x60, 0x40, 0x52, 0x3d, 0x82, 0x52, 0x3d, 0x60, 0x0,  0x60, 0x20,
  0x84, 0x1,  0x3e, 0x61, 0x5,  0x4e, 0x56, 0x5b, 0x60, 0x60, 0x91, 0x50, 0x5b,
  0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0xfe, 0xa2, 0x64, 0x69, 0x70, 0x66, 0x73,
  0x58, 0x22, 0x12, 0x20, 0x55, 0xa,  0x1e, 0x8e, 0xf,  0xf0, 0x70, 0x20, 0x60,
  0xe3, 0x35, 0x95, 0xa9, 0xc7, 0x85, 0xa6, 0xdf, 0x70, 0x8f, 0x1d, 0x47, 0xf9,
  0x1e, 0x2f, 0x9c, 0xef, 0xe4, 0x16, 0x93, 0x1b, 0x88, 0x55, 0x64, 0x73, 0x6f,
  0x6c, 0x63, 0x43, 0x0,  0x7,  0x6,  0x0,  0x33,
};

const eevm::Code& eevm::EVM2CPP_Bank::constructor_bytecode()
{
  return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_Bank::constructor_args()
{
  return _constructor_args;
}
